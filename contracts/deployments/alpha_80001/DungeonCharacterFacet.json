{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldLocation",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "path",
          "type": "uint256"
        }
      ],
      "name": "CharacterMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "monsterId",
          "type": "uint256"
        }
      ],
      "name": "Death",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gearId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "slotType",
          "type": "uint8"
        }
      ],
      "name": "Equip",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "hp",
          "type": "uint16"
        }
      ],
      "name": "Heal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newLevel",
          "type": "uint16"
        }
      ],
      "name": "LevelUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "QuestUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "areaLocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "RandomEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gearId",
          "type": "uint256"
        }
      ],
      "name": "Recycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadCharacterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCharacterId",
          "type": "uint256"
        }
      ],
      "name": "Resurrect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "exits",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "name": "RoomActualised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "direction",
          "type": "uint8"
        }
      ],
      "name": "RoomDiscovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoomIncome",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "RoomName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDueDate",
          "type": "uint256"
        }
      ],
      "name": "RoomTaxPay",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "hp",
          "type": "uint16"
        }
      ],
      "name": "heal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "levelUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "gearIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "slots",
          "type": "uint8[]"
        }
      ],
      "name": "multiEquip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "resurrectFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xBc1979815C2B642d71636A080AcF41757C3800C7",
    "contractAddress": "0x486903552e6C763Ac4aC3702003fbd6FCB2e289e",
    "transactionIndex": 0,
    "gasUsed": "2530980",
    "logsBloom": "0x
    "blockHash": "0x5872b8538060ba0ac00b585608724a1499433719241d98b6e18ffa62abfba048",
    "transactionHash": "0xea62b62d34449ddb18d126d4cff27f9fb9c24b56448b1abfb3bfd05a29587a8a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4684928,
        "transactionHash": "0xea62b62d34449ddb18d126d4cff27f9fb9c24b56448b1abfb3bfd05a29587a8a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bc1979815c2b642d71636a080acf41757c3800c7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cf590832b080000000000000000000000000000000000000000000000000a2dec0e45f90e8a00000000000000000000000000000000000000000000000055579471034780880500000000000000000000000000000000000000000000000a2dbf18b575e3820000000000000000000000000000000000000000000000005557c16693caab9005",
        "logIndex": 0,
        "blockHash": "0x5872b8538060ba0ac00b585608724a1499433719241d98b6e18ffa62abfba048"
      }
    ],
    "blockNumber": 4684928,
    "cumulativeGasUsed": "2530980",
    "status": 1,
    "byzantium": true
  },
  "address": "0x486903552e6C763Ac4aC3702003fbd6FCB2e289e",
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldLocation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"}],\"name\":\"CharacterMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monsterId\",\"type\":\"uint256\"}],\"name\":\"Death\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slotType\",\"type\":\"uint8\"}],\"name\":\"Equip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"}],\"name\":\"Heal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newLevel\",\"type\":\"uint16\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"QuestUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"areaLocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"RandomEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearId\",\"type\":\"uint256\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadCharacterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCharacterId\",\"type\":\"uint256\"}],\"name\":\"Resurrect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"exits\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"RoomActualised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"RoomDiscovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoomIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"RoomName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDueDate\",\"type\":\"uint256\"}],\"name\":\"RoomTaxPay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"gearIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"slots\",\"type\":\"uint8[]\"}],\"name\":\"multiEquip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"resurrectFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/dungeon/DungeonCharacterFacet.sol\":\"DungeonCharacterFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"buidler-deploy/solc_0.6/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract Proxied {\\n    modifier proxied() {\\n        address adminAddress;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n        if (adminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == adminAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7a52615923f87f723441805ffcd8f9e99625ae77ceed130c86f08a2e34970787\"},\"buidler-deploy/solc_0.6/proxy/diamond/DiamondStorageContract.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\n// modified to be an abstract\\n\\nabstract contract DiamondStorageContract {\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint64 slotsIndex, uint64 slotIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // uint128 numSelectorsInSlot, uint128 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint256 selectorSlotsLength;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        // ds_slot = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ddce9c68aba45af0b56b560e6cb369bf53f5c08a25bd4b55ed522aae1c233ee\"},\"src/characters/Characters.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./CharactersDataLayout.sol\\\";\\n\\ncontract Characters is Proxied, CharactersDataLayout {\\n    event CharacterUpdate(uint256 indexed id, address indexed owner, uint256 data);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    function postUpgrade() external proxied {\\n        if (nextId == 0) {\\n            nextId = 1;\\n        }\\n    }\\n\\n    function getSubOwner(uint256 id) external view returns (uint256) {\\n        return _subOwner[id][_owners[id]];\\n    }\\n\\n    function setSubOwner(uint256 id, uint256 subOwner) external {\\n        require(msg.sender == _owners[id], \\\"only owner is able to set sub owner\\\");\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n    }\\n\\n    function _setSubOwnerFor(\\n        uint256 id,\\n        address owner,\\n        uint256 subOwner\\n    ) internal {\\n        // TODO emit SubOwnerTransferEvent\\n        _subOwner[id][owner] = subOwner;\\n    }\\n\\n    function mintTo(address to) external returns (uint256) {\\n        return _mint(to);\\n    }\\n\\n    // subowner is uint(address) of player currently\\n    // when subowner == 0 character is considered not in the dungeon\\n    function mint(uint256 subOwner) external returns (uint256) {\\n        uint256 id = _mint(msg.sender);\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n        return id;\\n    }\\n\\n    function _mint(address to) internal returns (uint256) {\\n        uint256 id = nextId++;\\n        _owners[id] = to;\\n        _numPerOwners[to]++;\\n        emit Transfer(address(0), to, id);\\n        return id;\\n    }\\n\\n    function getData(uint256 id) external view returns (uint256) {\\n        return _data[id][msg.sender];\\n    }\\n\\n    function getDataFor(uint256 id, address owner) external view returns (uint256) {\\n        return _data[id][owner];\\n    }\\n\\n    // TODO only dungeon should be able to set data\\n    // currently this can be called by the player when characters is outside of dungeon\\n    function setData(uint256 id, uint256 data) external {\\n        require(msg.sender == _ownerOf(id), \\\"only owner is allowed to set data\\\");\\n        _setDataFor(id, msg.sender, data);\\n    }\\n\\n    function _setDataFor(\\n        uint256 id,\\n        address owner,\\n        uint256 data\\n    ) internal {\\n        _data[id][owner] = data;\\n        emit CharacterUpdate(id, owner, data);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return _owners[id];\\n    }\\n\\n    function fullOwnerOf(uint256 id) external view returns (address owner, uint256 subOwner) {\\n        owner = _ownerOf(id);\\n        subOwner = _subOwner[id][owner];\\n    }\\n\\n    // EIP-721 Standard\\n    function ownerOf(uint256 id) external view returns (address tokenOwner) {\\n        tokenOwner = _ownerOf(id);\\n        require(tokenOwner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function balanceOf(address who) external view returns (uint256) {\\n        require(who != address(0), \\\"zero address\\\");\\n        return _numPerOwners[who];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"from is zero address\\\");\\n        address owner = _owners[id];\\n        require(owner == from, \\\"from is not owner\\\");\\n        _subOwner[id][owner] = 0;\\n        _owners[id] = to;\\n        _numPerOwners[from]--;\\n        _numPerOwners[to]++;\\n    }\\n\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        // TODO metadata || id == 0x5b5e139f;\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n}\\n\",\"keccak256\":\"0xdf591bd894e7d3c85ff5e211ff6bc8b7f5d92ad62871062e73696445f0b5042e\"},\"src/characters/CharactersDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract CharactersDataLayout {\\n    uint256 nextId;\\n    mapping(uint256 => address) _owners;\\n    mapping(address => uint256) _numPerOwners;\\n    mapping(uint256 => mapping(address => uint256)) _subOwner;\\n    mapping(uint256 => mapping(address => uint256)) _data;\\n}\\n\",\"keccak256\":\"0x07af58bd3f1cbde1a9e87e11f65505da0ef1377f26a9b41cee4750ffd0c9b894\"},\"src/dungeon/DungeonCharacterFacet.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./DungeonFacetBase.sol\\\";\\nimport \\\"./PureDungeon.sol\\\";\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\ncontract DungeonCharacterFacet is DungeonFacetBase {\\n    function heal(uint256 characterId, uint16 hp) external onlyPlayer {\\n        require(hp > 0, \\\"you have to heal something\\\");\\n        _blockHashRegister.save();\\n        CharacterData memory data = _getCharacterData(characterId);\\n        require(data.hp > 0, \\\"your character is dead\\\");\\n        uint256 location = _characters[characterId].location;\\n        _actualiseRoom(location);\\n        require(_rooms[location].kind == PureDungeon.ROOM_TYPE_TEMPLE, \\\"current room not temple\\\");\\n        uint16 newHp = PureDungeon._limitedChange(data.hp, data.maxHP, hp);\\n        uint256 hpCost = PureDungeon._hpCost(newHp - data.hp);\\n        _pay(characterId, location, PureDungeon.COINS, hpCost);\\n        data.hp = newHp;\\n        _setCharacterData(characterId, data);\\n        emit Heal(characterId, newHp - data.hp);\\n    }\\n\\n    function levelUp(uint256 characterId) external onlyPlayer {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        _actualiseRoom(character.location);\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        require(characterData.level < 9, \\\"only 9 levels for now\\\");\\n        require(characterData.hp > 0, \\\"your character is dead\\\");\\n        characterData.level++;\\n        (uint16 xpRequired, uint256 coinsRequired, uint8 hpIncrease) = PureDungeon._toLevelUp(characterData.level);\\n        characterData.maxHP += hpIncrease;\\n        characterData.hp = characterData.maxHP;\\n        require(characterData.xp >= xpRequired, \\\"not enough xp\\\");\\n        _elementsContract.subBurnFrom(characterId, PureDungeon.COINS, coinsRequired);\\n        _setCharacterData(characterId, characterData);\\n        emit LevelUp(characterId, characterData.level);\\n    }\\n\\n    function resurrectFrom(uint256 characterId) external onlyPlayer {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        uint256 location = character.location;\\n        _actualiseRoom(location);\\n\\n        CharacterData memory stats = _getCharacterData(characterId);\\n        require(stats.hp == 0, \\\"character is not dead\\\");\\n\\n        uint256 subOwner = _charactersContract.getSubOwner(characterId);\\n        _charactersContract.setSubOwner(characterId, 0);\\n\\n        uint256 newCharId = _charactersContract.mint(0);\\n        // no subOwner as we transfer it to player right away (see below)\\n        (uint16 characterXP, , ) = PureDungeon._toLevelUp(stats.level);\\n        stats.xp = characterXP;\\n        stats.hp = stats.maxHP;\\n\\n        _setCharacterData(newCharId, stats);\\n        _addInitialGears(newCharId);\\n        _characters[newCharId].floors = character.floors;\\n        _charactersContract.transferFrom(address(this), address(subOwner), newCharId);\\n        // start outside of dungeon\\n\\n        emit Resurrect(characterId, newCharId);\\n    }\\n\\n    function multiEquip(\\n        uint256 characterId,\\n        uint256[] calldata gearIds,\\n        uint8[] calldata slots\\n    ) external onlyPlayer {\\n        // TODO once this will depend on result of combat:\\n        // _blockHashRegister.save();\\n        // _actualiseRoom\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        require(characterData.hp > 0, \\\"your character is dead\\\");\\n        for (uint256 i = 0; i < gearIds.length; i++) {\\n            _equip(characterId, characterData.level, characterData.class, gearIds[i], slots[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a1777e53a34bdb09b6369af024d91e1e1d1eb802a6f1bec72753716644841d5\"},\"src/dungeon/DungeonDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../tokens/Rooms.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\ncontract DungeonDataLayout {\\n    struct Room {\\n        uint64 blockNumber;\\n        uint64 monsterBlockNumber;\\n        uint64 numActiveCharacters;\\n        uint8 direction;\\n        uint8 exits;\\n        uint8 kind;\\n        uint8 areaAtDiscovery;\\n        uint8 lastRoomIndex;\\n        uint8 index;\\n        uint256 discoverer;\\n        uint64 randomEvent;\\n    }\\n\\n    struct Character {\\n        uint256 location;\\n        uint8 direction;\\n        int64 floors;\\n        uint256 slot_1; // attack // TODO store this on character NFT ?\\n        uint256 slot_2; // defense // TODO store this on character NFT ?\\n        uint256 slot_3; // accessory 1 // TODO store this on character NFT ?\\n        uint256 slot_4; // accessory 2 // TODO store this on character NFT ?5\\n        uint256 slot_5; // accessory 3 // TODO store this on character NFT ?\\n    }\\n\\n    struct Area {\\n        uint8 areaType;\\n        uint8 discovered; // record room types already discovered : temple, teleport ...\\n        uint8 lastRoomIndex; // track what was the index of the room discovered first in last block\\n        uint8 currentIndex; // track the index of room discovered in the same block\\n        uint256 lastRoom; // last room disovered in a block, used for area blockHash too\\n        uint64 eventBlockNumber;\\n    }\\n\\n    mapping(uint256 => Character) _characters;\\n    mapping(uint256 => Room) _rooms;\\n    mapping(uint256 => Area) _areas;\\n\\n    struct AreaCounter {\\n        uint64 lastPeriod;\\n        uint64 numAreas;\\n    }\\n    AreaCounter _areaCounter;\\n\\n    address _adminContract;\\n    BlockHashRegister _blockHashRegister;\\n    Characters _charactersContract;\\n    Elements _elementsContract;\\n    Gears _gearsContract;\\n    Rooms _roomsContract;\\n    Player _playerContract;\\n\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => bool))) _unlockedExits;\\n\\n    struct Quest {\\n        uint8 status;\\n        string data;\\n    }\\n    mapping(uint256 => mapping(uint64 => Quest)) _quests; // _quests[character][id]\\n\\n    mapping(address => uint256) _taxDueDate;\\n\\n    mapping(uint256 => string) _customRoomNames;\\n}\\n\",\"keccak256\":\"0x9d189dba696ee5710f0cbb5c36e2ad3e3ac251c3263e1739c0e0c60772496c5e\"},\"src/dungeon/DungeonEvents.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract DungeonEvents {\\n    event RoomDiscovered(uint256 indexed location, uint64 blockNumber, uint8 direction);\\n    event RoomActualised(uint256 indexed location, bytes32 blockHash, uint8 exits, uint8 kind);\\n    event CharacterMoved(\\n        uint256 indexed characterId,\\n        uint256 indexed oldLocation,\\n        uint256 indexed newLocation,\\n        uint8 mode,\\n        uint256 path\\n    );\\n    event Enter(uint256 indexed characterId, address indexed player, string name);\\n    event Death(uint256 indexed characterId, uint256 monsterId);\\n    event LevelUp(uint256 indexed characterId, uint16 newLevel);\\n    event Equip(uint256 characterId, uint256 gearId, uint8 slotType);\\n    event Resurrect(uint256 indexed deadCharacterId, uint256 newCharacterId);\\n    event Heal(uint256 indexed characterId, uint16 hp);\\n    event RandomEvent(uint256 indexed areaLocation, uint64 blockNumber);\\n    event Recycle(uint256 indexed characterId, uint256 gearId);\\n    event QuestUpdate(uint256 indexed characterId, uint64 indexed id, uint8 indexed status, string data);\\n    event RoomTaxPay(address indexed owner, uint256 tax, uint256 newDueDate);\\n    event RoomIncome(uint256 indexed location, address indexed owner, uint256 id, uint256 amount);\\n    event RoomName(uint256 indexed location, string name, uint256 characterId);\\n}\\n\",\"keccak256\":\"0xe737adf71af0dc8563dbe62e7be657100e28ca7cfd81f5730c3ea14d666b9712\"},\"src/dungeon/DungeonFacetBase.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/diamond/DiamondStorageContract.sol\\\";\\nimport \\\"./DungeonDataLayout.sol\\\";\\nimport \\\"./DungeonEvents.sol\\\";\\nimport \\\"./PureDungeon.sol\\\";\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\nabstract contract DungeonFacetBase is DungeonDataLayout, DungeonEvents, DiamondStorageContract {\\n    uint256 internal constant MAX_GEARS = 10;\\n\\n\\n    modifier onlyOwner() {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _adminContract, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == address(_playerContract), \\\"only players allowed\\\");\\n        _;\\n    }\\n\\n    function _actualiseRoom(uint256 location) internal {\\n        Room storage room = _rooms[location];\\n        require(room.blockNumber > 0, \\\"room not created yet\\\");\\n        if (room.kind == 0) {\\n            bytes32 blockHash = _blockHashRegister.get(room.blockNumber);\\n            if (blockHash == 0) {\\n                // skip as block is not actualised or not in register\\n                return;\\n            }\\n            _actualiseArea(location, blockHash);\\n            (uint8 exits, uint8 kind, uint8 area_discovered) = PureDungeon._generateRoom(\\n                location,\\n                blockHash,\\n                room.direction,\\n                room.areaAtDiscovery,\\n                room.lastRoomIndex,\\n                room.index\\n            );\\n            room.exits = exits;\\n            room.kind = kind;\\n            uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n            Area storage area = _areas[areaLoc];\\n            if (area.discovered != area_discovered) {\\n                area.discovered = area_discovered;\\n            }\\n            emit RoomActualised(location, blockHash, exits, kind);\\n            uint8 areaType = _areas[areaLoc].areaType;\\n            if (room.discoverer != 0) {\\n                CharacterData memory characterData = _getCharacterData(room.discoverer);\\n                (uint256 numGold, uint256 numElements) = PureDungeon._computeRoomDiscoveryReward(\\n                    location,\\n                    blockHash,\\n                    characterData.class\\n                );\\n                if (areaType <= 5) {\\n                    _elementsContract.mint(room.discoverer, areaType, numElements);\\n                }\\n                _elementsContract.mint(room.discoverer, 6, numGold);\\n            }\\n        }\\n        _actualiseRandomEvent(PureDungeon._getAreaLoc(location)); // room actualisation take precedence // monster\\n    }\\n\\n    function _actualiseArea(uint256 location, bytes32 blockHash) internal {\\n        uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n        uint8 areaType = _areas[areaLoc].areaType;\\n        if (areaType == 0) {\\n            uint64 currentNumAreas = _areaCounter.numAreas;\\n            areaType = PureDungeon._generateArea(areaLoc, blockHash, currentNumAreas);\\n            _areas[areaLoc].areaType = areaType;\\n            if (areaType != 6) {\\n                uint64 period = uint64(block.timestamp / 23 hours);\\n                if (_areaCounter.lastPeriod != period) {\\n                    _areaCounter.lastPeriod = period;\\n                    _areaCounter.numAreas = 1;\\n                } else {\\n                    _areaCounter.numAreas = currentNumAreas + 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    struct CharacterData {\\n        uint8 class;\\n        uint16 level;\\n        uint32 xp;\\n        uint16 maxHP;\\n        uint16 hp;\\n    }\\n\\n    function _setCharacterData(uint256 characterId, CharacterData memory characterData) internal {\\n        uint256 data = ((uint256(characterData.class) << 248) +\\n            (uint256(characterData.level) << 232) +\\n            (uint256(characterData.xp) << 200) +\\n            (uint256(characterData.maxHP) << 184) +\\n            (uint256(characterData.hp) << 168));\\n        _charactersContract.setData(characterId, data);\\n    }\\n\\n    function _getCharacterData(uint256 characterId) internal view returns (CharacterData memory) {\\n        uint256 data = _charactersContract.getData(characterId);\\n        (uint16 level, uint16 hp, uint16 maxHP, uint32 xp, uint8 class) = PureDungeon._decodeCharacterData(data);\\n        return CharacterData(class, level, xp, maxHP, hp);\\n    }\\n\\n    function _actualiseRandomEvent(uint256 areaLoc) internal {\\n        Area storage area = _areas[areaLoc];\\n        uint64 blockNumber = area.eventBlockNumber;\\n        if (blockNumber != 0) {\\n            bytes32 blockHash = _blockHashRegister.get(blockNumber);\\n            if (blockHash == 0) {\\n                // skip as block is not actualised or not in register\\n                return;\\n            }\\n            (uint256 roomLocation, uint64 randomEvent) = PureDungeon._generateRandomEvent(areaLoc, blockHash);\\n            uint256 monsterIndex = _checkMonsterBlockNumber(roomLocation);\\n            Room storage room = _rooms[roomLocation];\\n            if (room.randomEvent == 0 && room.numActiveCharacters == 0 && monsterIndex == 0 && room.kind != 0) {\\n                room.randomEvent = randomEvent;\\n            }\\n            area.eventBlockNumber = 0;\\n        }\\n    }\\n\\n    /// @dev to be valid it require the room to be actualised first\\n    function _checkMonster(uint256 location) internal view returns (uint256) {\\n        uint256 monsterIndex = _checkMonsterBlockNumber(location);\\n        // if (monsterIndex == 0) {\\n        //     if (_roomEvents[location] == 1)  { //TODO monster indicator\\n        //         return 1;\\n        //     }\\n        //     return 0;\\n        // }\\n        return monsterIndex;\\n    }\\n\\n    function _checkMonsterBlockNumber(uint256 location) internal view returns (uint256) {\\n        uint64 monsterBlockNumber = _rooms[location].monsterBlockNumber;\\n        if (monsterBlockNumber == 0) {\\n            // no monsters\\n            return 0;\\n        }\\n        bytes32 monsterBlockHash = _blockHashRegister.get(monsterBlockNumber);\\n        if (monsterBlockHash == 0) {\\n            // skip as monster block is not actualised\\n            return 0;\\n        }\\n        bool newlyDiscoveredRoom = monsterBlockNumber == _rooms[location].blockNumber;\\n        return\\n            PureDungeon._generateMonsterIndex(\\n                location,\\n                monsterBlockHash,\\n                1,\\n                newlyDiscoveredRoom,\\n                _rooms[location].kind\\n            );\\n    }\\n\\n    struct GearData {\\n        uint16 level;\\n        uint8 slot;\\n        uint8 classBits; // bit array of allowed classes indexed by lsb\\n        uint16 durability;\\n        uint16 maxDurability; // gear is unbreakable when maxDurablity is 0\\n        uint32 template;\\n    }\\n\\n    function _setGearData(uint256 gearId, GearData memory gear) internal {\\n        uint256 data = PureDungeon._encodeGearData(\\n            gear.level,\\n            gear.slot,\\n            gear.classBits,\\n            gear.durability,\\n            gear.maxDurability,\\n            gear.template\\n        );\\n        _gearsContract.setData(gearId, data);\\n    }\\n\\n    function _getGearData(uint256 gearId) internal view returns (GearData memory) {\\n        uint256 data = _gearsContract.getData(gearId);\\n        (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        ) = PureDungeon._decodeGearData(data);\\n        return GearData(level, slot, classBits, durability, maxDurability, template);\\n    }\\n\\n    function _addInitialGears(uint256 characterId) internal {\\n        uint256 attackGearData = PureDungeon._encodeGearData(0, 0, 15, 10, 10, 1);\\n        uint256 defenseGearData = PureDungeon._encodeGearData(0, 1, 15, 10, 10, 4);\\n        uint256 attackGear = _gearsContract.mint(characterId, attackGearData);\\n        _equip(characterId, 0, 0, attackGear, 0);\\n        uint256 defenseGear = _gearsContract.mint(characterId, defenseGearData);\\n        _equip(characterId, 0, 0, defenseGear, 1);\\n    }\\n\\n    // TODO restrict transfer of equiped items\\n    function _equip(\\n        uint256 characterId,\\n        uint16 level,\\n        uint8 class,\\n        uint256 id,\\n        uint8 slot\\n    ) internal {\\n        GearData memory gear = _getGearData(id);\\n        require(gear.level <= level, \\\"gear Level too high\\\");\\n        require((gear.classBits >> class) & 1 != 0, \\\"invalid class\\\");\\n        if (slot == 0) {\\n            require(gear.slot == 0, \\\"only attack gear on slot 0\\\");\\n            _characters[characterId].slot_1 = id;\\n        } else if (slot == 1) {\\n            require(gear.slot == 1, \\\"only defense gear on slot 1\\\");\\n            _characters[characterId].slot_2 = id;\\n        } else if (slot == 2) {\\n            require(gear.slot == 2, \\\"only accessories on slot 2\\\");\\n            _characters[characterId].slot_3 = id;\\n        } else if (slot == 3) {\\n            require(gear.slot == 2, \\\"only accessories on slot 3\\\");\\n            _characters[characterId].slot_4 = id;\\n        } else if (slot == 4) {\\n            require(gear.slot == 2, \\\"only accessories on slot 4\\\");\\n            _characters[characterId].slot_5 = id;\\n        }\\n        emit Equip(characterId, id, gear.slot);\\n    }\\n\\n    function _handleKey(\\n        uint256 characterId,\\n        uint256 location,\\n        uint256 location2\\n    ) internal {\\n        uint256 location1 = location;\\n        if (location1 > location2) {\\n            location1 = location2;\\n            location2 = location;\\n        }\\n        if (!_isUnlocked(characterId, location1, location2)) {\\n            require(_elementsContract.subBalanceOf(characterId, PureDungeon.KEYS) > 0, \\\"no key\\\");\\n            _elementsContract.subBurnFrom(characterId, PureDungeon.KEYS, 1);\\n            _unlockedExits[characterId][location1][location2] = true;\\n        }\\n    }\\n\\n    function _isUnlocked(\\n        uint256 characterId,\\n        uint256 location1,\\n        uint256 location2\\n    ) internal view returns (bool) {\\n        return _unlockedExits[characterId][location1][location2];\\n    }\\n\\n    function _getAreaTypeForRoom(uint256 location) internal view returns (uint8) {\\n        return _areas[PureDungeon._getAreaLoc(location)].areaType;\\n    }\\n\\n    function _moveTo(\\n        uint256 characterId,\\n        uint256 oldLocation,\\n        uint8 direction\\n    ) internal returns (uint256) {\\n        (int64 x, int64 y, int64 z, ) = PureDungeon._coordinates(oldLocation);\\n        if (PureDungeon.NORTH == direction) {\\n            y--;\\n        } else if (PureDungeon.EAST == direction) {\\n            x++;\\n        } else if (PureDungeon.SOUTH == direction) {\\n            y++;\\n        } else if (PureDungeon.WEST == direction) {\\n            x--;\\n        } else {\\n            revert(\\\"impossible direction\\\");\\n        }\\n        uint256 newLocation = PureDungeon._location(x, y, z);\\n        Room storage currentRoom = _rooms[oldLocation];\\n        Room storage nextRoom = _rooms[newLocation];\\n        uint64 cb = currentRoom.blockNumber;\\n        uint64 nb = nextRoom.blockNumber;\\n        uint8 exitMask = uint8(2)**direction;\\n        uint8 opositeExitMask = uint8(2)**((direction + 2) % 4);\\n        if (cb < nb || nb == 0) {\\n            if ((currentRoom.exits & exitMask) == exitMask) {\\n                if ((currentRoom.exits / 2**4) & exitMask == exitMask) {\\n                    _handleKey(characterId, oldLocation, newLocation);\\n                }\\n                return newLocation;\\n            }\\n        } else if (cb > nb) {\\n            if ((nextRoom.exits & opositeExitMask) == opositeExitMask) {\\n                if ((nextRoom.exits / 2**4) & opositeExitMask == opositeExitMask) {\\n                    _handleKey(characterId, oldLocation, newLocation);\\n                }\\n                return newLocation;\\n            }\\n        } else {\\n            if ((currentRoom.exits & exitMask) == exitMask || (nextRoom.exits & opositeExitMask) == opositeExitMask) {\\n                if (oldLocation > newLocation) {\\n                    if ((nextRoom.exits / 2**4) & opositeExitMask == opositeExitMask) {\\n                        _handleKey(characterId, oldLocation, newLocation);\\n                    }\\n                } else {\\n                    if ((currentRoom.exits / 2**4) & exitMask == exitMask) {\\n                        _handleKey(characterId, oldLocation, newLocation);\\n                    }\\n                }\\n                return newLocation;\\n            }\\n        }\\n        revert(\\\"cant move this way\\\");\\n    }\\n\\n    function _move(\\n        uint256 characterId,\\n        uint256 location,\\n        uint8 direction\\n    ) internal {\\n        Character storage character = _characters[characterId];\\n        Room storage currentRoom = _rooms[character.location];\\n        Room storage nextRoom = _rooms[location];\\n        uint64 blockNumber;\\n        if (nextRoom.blockNumber == 0) {\\n            _discoverRoom(location, characterId, direction);\\n        } else {\\n            // TODO should we actualiseRoom first, before monster ?\\n            if (nextRoom.monsterBlockNumber == 0 && nextRoom.numActiveCharacters == 0) {\\n                blockNumber = uint64(block.number);\\n                _blockHashRegister.request();\\n                if (nextRoom.monsterBlockNumber == 0) {\\n                    nextRoom.monsterBlockNumber = blockNumber;\\n                }\\n            }\\n            _actualiseRoom(location);\\n            address benefactor = _roomBenefactor(location);\\n            if (benefactor != address(0) && uint256(benefactor) != _charactersContract.getSubOwner(characterId)) {\\n                _elementsContract.mintVault(benefactor, PureDungeon.FRAGMENTS, 1);\\n                emit RoomIncome(location, benefactor, PureDungeon.FRAGMENTS, 1);\\n            }\\n        }\\n        uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n        Area storage area = _areas[areaLoc];\\n        if (area.eventBlockNumber == 0 && block.number % 3 == 0) {\\n            if (blockNumber == 0) {\\n                blockNumber = uint64(block.number);\\n                _blockHashRegister.request();\\n            }\\n            area.eventBlockNumber = blockNumber;\\n            emit RandomEvent(areaLoc, blockNumber);\\n        }\\n        currentRoom.numActiveCharacters--;\\n        nextRoom.numActiveCharacters++;\\n        character.location = location;\\n        character.direction = direction;\\n        _increaseHPXP(characterId);\\n    }\\n\\n    function _increaseHPXP(uint256 characterId) internal {\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        if (characterData.hp < characterData.maxHP) {\\n            characterData.hp += 1;\\n            _setCharacterData(characterId, characterData);\\n        }\\n    }\\n\\n    function _isRoomActive(uint256 location) internal view returns (bool) {\\n        address owner = _roomsContract.ownerOf(location);\\n        return owner == address(this);\\n    }\\n\\n    function _roomBenefactor(uint256 location) internal view returns (address){\\n        if (_isRoomActive(location)) {\\n            return address(_roomsContract.subOwnerOf(location));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _pay(uint256 characterId, uint256 location, uint256 id, uint256 amount) internal {\\n        address benefactor = _roomBenefactor(location);\\n        if (benefactor != address(0)) {\\n            uint256 share = amount / 5;\\n            if (share > 0) {\\n                _elementsContract.subTransferFrom(characterId, 0, id, share);\\n                _elementsContract.transferFrom(address(this), benefactor, id, share);\\n                emit RoomIncome(location, benefactor, id, share);\\n            }\\n            _elementsContract.subBurnFrom(characterId, id, amount - share);\\n        } else {\\n            _elementsContract.subBurnFrom(characterId, id, amount);\\n        }\\n    }\\n\\n    function _discoverRoom(\\n        uint256 location,\\n        uint256 discoverer,\\n        uint8 direction\\n    ) internal {\\n        Area storage area = _areas[PureDungeon._getAreaLoc(location)];\\n        if (area.lastRoom > 0) {\\n            // area is also actualised with room when necessary\\n            _actualiseRoom(area.lastRoom);\\n            area.lastRoomIndex = area.currentIndex;\\n            area.lastRoom = 0;\\n        }\\n        _elementsContract.subBurnFrom(discoverer, PureDungeon.FRAGMENTS, PureDungeon._discoveryCost(location));\\n        Room storage nextRoom = _rooms[location];\\n        nextRoom.blockNumber = uint64(block.number);\\n        nextRoom.monsterBlockNumber = uint64(block.number);\\n        nextRoom.direction = direction;\\n        nextRoom.areaAtDiscovery = area.discovered;\\n        nextRoom.index = area.currentIndex++;\\n        nextRoom.lastRoomIndex = area.lastRoomIndex;\\n        nextRoom.discoverer = discoverer;\\n        area.lastRoom = location;\\n        _blockHashRegister.request();\\n        uint256 discovererOwner = _charactersContract.getSubOwner(discoverer);\\n        _initializeTaxDueDate(discovererOwner);\\n        _roomsContract.mintId(location, discovererOwner);\\n        emit RoomDiscovered(location, uint64(block.number), nextRoom.direction);\\n    }\\n\\n    function _initializeTaxDueDate(uint256 owner) internal {\\n        if (owner != 0 && _roomsContract.subBalanceOf(owner) == 0) {\\n            uint256 dueDate = block.timestamp + 5 days;\\n            _taxDueDate[address(owner)] = dueDate;\\n            emit RoomTaxPay(address(owner), 0, dueDate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x68f9dbe224dd7d110e59cefde276a774269bdc2f69f0550eb87967ea168ba36b\"},\"src/dungeon/PureDungeon.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nlibrary PureDungeon {\\n    uint256 internal constant LOCATION_ZERO = 2**255;\\n    uint256 internal constant BOUNTY = 2**254;\\n\\n    uint8 internal constant ROOM_TYPE_NORMAL = 1;\\n    uint8 internal constant ROOM_TYPE_TELEPORT = 2;\\n    uint8 internal constant ROOM_TYPE_TEMPLE = 3;\\n    uint8 internal constant ROOM_TYPE_LORE = 4;\\n    uint8 internal constant ROOM_TYPE_CARRIER = 5;\\n\\n    uint8 internal constant EXITS_INERTIA = 87;\\n    uint8 internal constant EXITS_BIFURCATION = 40;\\n    uint8 internal constant EXITS_BOTH_BIFURCATION = 25;\\n\\n    uint8 internal constant NORTH = 0;\\n    uint8 internal constant EAST = 1;\\n    uint8 internal constant SOUTH = 2;\\n    uint8 internal constant WEST = 3;\\n    uint8 internal constant DOWN = 4;\\n\\n    uint8 internal constant COINS = 6;\\n    uint8 internal constant KEYS = 7;\\n    uint8 internal constant FRAGMENTS = 8;\\n\\n    uint8 internal constant WARRIOR = 0;\\n    uint8 internal constant EXPLORER = 1;\\n    uint8 internal constant MAGE = 2;\\n    uint8 internal constant BARBARIAN = 3;\\n\\n    uint8 internal constant CLASS_BONUS = 4; // 100/4 = 25%\\n\\n    uint8 internal constant LEVEL_RING_WIDTH = 25;\\n    uint16 internal constant ELEMENT_AREA_10000_PROBA = 100; // 1%\\n    uint8 internal constant NUM_ELEMENT_AREA_PER_PERIOD = 10;\\n\\n    uint8 internal constant LOCK_PROBABILITY = 40;\\n    uint8 internal constant TWO_LOCK_PROBABILITY = 10;\\n\\n    uint8 internal constant MONSTER_SPAWN = 15;\\n\\n    uint8 internal constant INITIAL_HP = 16;\\n    uint8 internal constant HP_INCREASE = 10;\\n\\n    function coordinates(uint256 location)\\n        external\\n        pure\\n        returns (\\n            int64 x,\\n            int64 y,\\n            int64 z,\\n            uint64 a\\n        )\\n    {\\n        return _coordinates(location);\\n    }\\n\\n    function _coordinates(uint256 location)\\n        internal\\n        pure\\n        returns (\\n            int64 x,\\n            int64 y,\\n            int64 z,\\n            uint64 a\\n        )\\n    {\\n        x = int64(location);\\n        y = int64(location / 2**64);\\n        z = int64(location / 2**128);\\n        a = uint64(location / 2**255); // = 1 for valid location\\n    }\\n\\n    function location(\\n        int64 x,\\n        int64 y,\\n        int64 z\\n    ) external pure returns (uint256 location) {\\n        return _location(x, y, z);\\n    }\\n\\n    function _location(\\n        int64 x,\\n        int64 y,\\n        int64 z\\n    ) internal pure returns (uint256 location) {\\n        return 2**255 + uint256(uint64(z)) * 2**128 + uint256(uint64(y)) * 2**64 + uint64(x);\\n    }\\n\\n    function _locationToBounty(uint256 location) internal pure returns (uint256 bounty){\\n        return location - LOCATION_ZERO + BOUNTY;\\n    }\\n\\n    function _bountyToLocation(uint256 bounty) internal pure returns (uint256 location){\\n        return location - BOUNTY + LOCATION_ZERO;\\n    }\\n\\n    function generateMonsterIndex(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint256 numMonsters,\\n        bool newlyDiscoveredRoom,\\n        uint8 roomKind\\n    ) external pure returns (uint256) {\\n        return _generateMonsterIndex(location, blockHash, numMonsters, newlyDiscoveredRoom, roomKind);\\n    }\\n\\n    function _generateMonsterIndex(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint256 numMonsters,\\n        bool newlyDiscoveredRoom,\\n        uint8 roomKind\\n    ) internal pure returns (uint256) {\\n        if (roomKind != ROOM_TYPE_NORMAL) {\\n            return 0;\\n        }\\n        uint8 spawnRate = MONSTER_SPAWN;\\n        if (newlyDiscoveredRoom) {\\n            spawnRate += 10;\\n        }\\n        bool hasMonster = uint256(keccak256(abi.encodePacked(location, blockHash, uint8(6)))) % 100 < spawnRate;\\n        if (hasMonster) {\\n            return (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(7)))) % numMonsters) + 1;\\n        }\\n        return 0;\\n    }\\n\\n    function computeRoomDiscoveryReward(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 class\\n    ) external pure returns (uint256 numGold, uint256 numElements) {\\n        return _computeRoomDiscoveryReward(location, blockHash, class);\\n    }\\n\\n    function _computeRoomDiscoveryReward(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 class\\n    ) internal pure returns (uint256 numGold, uint256 numElements) {\\n        uint256 ring = _getRing(location, 0);\\n        uint256 target = ring / LEVEL_RING_WIDTH;\\n        if (target == 0) {\\n            target = 1;\\n        }\\n        numElements = (target / 2) + (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(100)))) % target);\\n        if (numElements == 0) {\\n            numElements = 1;\\n        }\\n        if (MAGE == class) {\\n            numElements = numElements + numElements / CLASS_BONUS;\\n        }\\n        if (target > 8) {\\n            target = 8;\\n        }\\n        numGold = (target / 2) + (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(101)))) % target);\\n        if (numGold == 0) {\\n            numGold = 1;\\n        }\\n        if (EXPLORER == class) {\\n            numGold = numGold + numGold / CLASS_BONUS;\\n        }\\n    }\\n\\n    function discoveryCost(uint256 location) external pure returns (uint256 fragments) {\\n        return _discoveryCost(location);\\n    }\\n\\n    function _discoveryCost(uint256 location) internal pure returns (uint256 fragments) {\\n        if (location == LOCATION_ZERO) {\\n            return 0;\\n        } else {\\n            uint256 ring = _getRing(location, 0);\\n            return 1 + ring / LEVEL_RING_WIDTH;\\n        }\\n    }\\n\\n    function generateRandomEvent(uint256 areaLoc, bytes32 blockHash)\\n        external\\n        pure\\n        returns (uint256 roomLocation, uint64 randomEvent)\\n    {\\n        return _generateRandomEvent(areaLoc, blockHash);\\n    }\\n\\n    function _generateRandomEvent(uint256 areaLoc, bytes32 blockHash)\\n        internal\\n        pure\\n        returns (uint256 roomLocation, uint64 randomEvent)\\n    {\\n        roomLocation = _getRoomLoc(\\n            areaLoc,\\n            uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(102)))) % 9),\\n            uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(103)))) % 9)\\n        );\\n        randomEvent = 1; // for now always monster TODO :uint64(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(104)))));\\n    }\\n\\n    function generateRoom(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    )\\n        external\\n        pure\\n        returns (\\n            uint8 exits,\\n            uint8 kind,\\n            uint8 area_discovered\\n        )\\n    {\\n        return _generateRoom(location, blockHash, direction, areaAtDiscovery, lastIndex, index);\\n    }\\n\\n    function _generateRoom(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8 exits,\\n            uint8 kind,\\n            uint8 area_discovered\\n        )\\n    {\\n        exits = _generateExits(location, blockHash, direction);\\n        (kind, area_discovered) = _getRoomKind(location, blockHash, areaAtDiscovery, lastIndex, index);\\n    }\\n\\n    function _getRoomKind(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    ) internal pure returns (uint8 kind, uint8 area_discovered) {\\n        uint256 areaLoc = _getAreaLoc(location);\\n        uint8 currentIndex = lastIndex;\\n        area_discovered = areaAtDiscovery;\\n        (int64 x, int64 y, , ) = _coordinates(location);\\n        if (x == 0 && y == 0) {\\n            // special case // cannot be discovered in batch in one block\\n            kind = ROOM_TYPE_TELEPORT;\\n            area_discovered = area_discovered | 1;\\n        } else {\\n            while (currentIndex <= index) {\\n                uint8 roll = uint8(\\n                    uint256(keccak256(abi.encodePacked(areaLoc, currentIndex, blockHash, uint8(3)))) % 20\\n                );\\n                if (!(area_discovered & 1 == 1) && (roll == 0 || currentIndex == 80)) {\\n                    // if roll or last room\\n                    kind = ROOM_TYPE_TELEPORT;\\n                    area_discovered = area_discovered | 1;\\n                } else if (\\n                    !(area_discovered & 2 == 2) &&\\n                    (roll == 1 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1))) // second last room and teleport not found yet\\n                ) {\\n                    kind = ROOM_TYPE_TEMPLE;\\n                    area_discovered = area_discovered | 2;\\n                } else if (\\n                    !(area_discovered & 4 == 4) &&\\n                    (roll == 2 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1)) || // second last room and teleport not found yet\\n                        (currentIndex == 79 && !(area_discovered & 2 == 2)) || // second last room and temple not found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 2 == 2))) // third last room and neither teleport nor temple found yet\\n                ) {\\n                    kind = ROOM_TYPE_LORE;\\n                    area_discovered = area_discovered | 4;\\n                } else if (\\n                    !(area_discovered & 8 == 8) &&\\n                    (roll == 3 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1)) || // second last room and teleport not found yet\\n                        (currentIndex == 79 && !(area_discovered & 2 == 2)) || // second last room and temple not found yet\\n                        (currentIndex == 79 && !(area_discovered & 4 == 4)) || // second last room and lore not found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 2 == 2)) || // third last room and neither teleport nor temple found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 4 == 4)) || // third last room and neither teleport nor lore found yet\\n                        (currentIndex == 78 && !(area_discovered & 4 == 4) && !(area_discovered & 2 == 2)) || // third last room and neither lore nor temple found yet\\n                        (currentIndex == 77 &&\\n                            !(area_discovered & 4 == 4) &&\\n                            !(area_discovered & 2 == 2) &&\\n                            !(area_discovered & 1 == 1))) // fourth last room and neither telport, temple nor lore found yet\\n                ) {\\n                    kind = ROOM_TYPE_CARRIER;\\n                    area_discovered = area_discovered | 8;\\n                } else {\\n                    kind = ROOM_TYPE_NORMAL;\\n                }\\n                currentIndex++;\\n            }\\n        }\\n    }\\n\\n    function toLevelUp(uint16 level)\\n        external\\n        pure\\n        returns (\\n            uint16 xpRequired,\\n            uint256 coinsRequired,\\n            uint8 hpIncrease\\n        )\\n    {\\n        return _toLevelUp(level);\\n    }\\n\\n    function _toLevelUp(uint16 level)\\n        internal\\n        pure\\n        returns (\\n            uint16 xpRequired,\\n            uint256 coinsRequired,\\n            uint8 hpIncrease\\n        )\\n    {\\n        uint16[11] memory xpRequirements = [0, 10, 49, 119, 208, 328, 524, 826, 1269, 3654, 6894];\\n        xpRequired = xpRequirements[level];\\n        if (level > 8) {\\n            coinsRequired = 492;\\n        } else {\\n            coinsRequired = (((1 + level) ** 3) / 5) + 8;\\n        }\\n        hpIncrease = HP_INCREASE;\\n    }\\n\\n    function generateArea(\\n        uint256 areaLoc,\\n        bytes32 blockHash,\\n        uint64 numElementalAreaInPeriod\\n    ) external pure returns (uint8 areaType) {\\n        _generateArea(areaLoc, blockHash, numElementalAreaInPeriod);\\n    }\\n\\n    function _generateArea(\\n        uint256 areaLoc,\\n        bytes32 blockHash,\\n        uint64 numElementalAreaInPeriod\\n    ) internal pure returns (uint8 areaType) {\\n        if (_isCentreArea(areaLoc) || numElementalAreaInPeriod >= NUM_ELEMENT_AREA_PER_PERIOD) {\\n            areaType = 6;\\n        } else {\\n            uint256 roomRing = (_getAreaRing(areaLoc) * 9);\\n            if (roomRing > 0) {\\n                roomRing -= 4; // this set the value to be the one of the corner room nearest to the center\\n            }\\n            if (roomRing >= LEVEL_RING_WIDTH) {\\n                bool elementArea = uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(12)))) % 10000) <=\\n                    ELEMENT_AREA_10000_PROBA;\\n                if (elementArea) {\\n                    (, ,int64 z, ) = _coordinates(areaLoc);\\n                    areaType = 1 + uint8(z % 5);\\n                } else {\\n                    areaType = 6;\\n                }\\n            } else {\\n                areaType = 6;\\n            }\\n        }\\n    }\\n\\n    // distance between 2 location * 0.4\\n    function teleportTax(uint256 p1, uint256 p2) external pure returns (uint256) {\\n        return _teleportTax(p1, p2);\\n    }\\n\\n    function _teleportTax(uint256 p1, uint256 p2) internal pure returns (uint256) {\\n        uint256 cost = (2 * _getRing(p1, p2)) / 5;\\n        if (cost == 0) {\\n            return 1;\\n        } else {\\n            return cost;\\n        }\\n    }\\n\\n    function carrierCost(uint256 location) external pure returns (uint256) {\\n        return _carrierCost(location);\\n    }\\n\\n    function _carrierCost(uint256 location) internal pure returns (uint256) {\\n        uint256 cost = (2 * _getRing(location, LOCATION_ZERO)) / 6;\\n        if (cost == 0) {\\n            return 1;\\n        } else {\\n            return cost;\\n        }\\n    }\\n\\n    function recyclingReward(uint256 gearData) external pure returns (uint256) {\\n        return _recyclingReward(gearData);\\n    }\\n\\n    function _recyclingReward(uint256 gearData) internal pure returns (uint256) {\\n        (uint16 level, , , uint16 durability, uint16 maxDurability, ) = _decodeGearData(gearData);\\n        uint256 reward = 1 + level / 2;\\n        if (durability == maxDurability) {\\n            reward += 1 + reward / 2;\\n        }\\n        return reward;\\n    }\\n\\n    function hpCost(uint16 hp) external pure returns (uint256) {\\n        return _hpCost(hp);\\n    }\\n\\n    function _hpCost(uint16 hp) internal pure returns (uint256) {\\n        return hp;\\n    }\\n\\n    function getRing(uint256 p1, uint256 p2) external pure returns (uint256) {\\n        return _getRing(p1, p2);\\n    }\\n\\n    function _getRing(uint256 p1, uint256 p2) internal pure returns (uint256) {\\n        (int64 x1, int64 y1, , ) = _coordinates(p1);\\n        (int64 x2, int64 y2, , ) = _coordinates(p2);\\n        int256 dx = x1 - x2;\\n        if (dx < 0) {\\n            dx = -dx;\\n        }\\n        int256 dy = y1 - y2;\\n        if (dy < 0) {\\n            dy = -dy;\\n        }\\n        if (dx > 2**64 / 2) {\\n            dx = 2**64 - dx;\\n        }\\n        if (dy > 2**64 / 2) {\\n            dy = 2**64 - dy;\\n        }\\n        if (dx > dy) {\\n            return uint256(dx);\\n        } else {\\n            return uint256(dy);\\n        }\\n    }\\n\\n    function _getAreaRing(uint256 areaLoc) internal pure returns (uint64) {\\n        (int64 x, int64 y, , ) = _coordinates(areaLoc);\\n        if (x < 0) {\\n            x = -x;\\n        }\\n        if (y < 0) {\\n            y = -y;\\n        }\\n        if (x > y) {\\n            return uint64(x);\\n        } else {\\n            return uint64(y);\\n        }\\n    }\\n\\n    // centre area is currently defined as the first 9 area (first area + 8 surrounding it)\\n    function _isCentreArea(uint256 areaLoc) internal pure returns (bool) {\\n        (int64 areaX, int64 areaY, , ) = _coordinates(areaLoc);\\n        return areaX >= -1 && areaY >= -1 && areaX <= 1 && areaY <= 1;\\n    }\\n\\n    function getAreaLoc(uint256 location) external pure returns (uint256) {\\n        return _getAreaLoc(location);\\n    }\\n\\n    function _getAreaLoc(uint256 location) internal pure returns (uint256) {\\n        (int64 x, int64 y, int64 z, ) = _coordinates(location);\\n        int64 areaX;\\n        if (x >= 0) {\\n            areaX = (x + 4) / 9;\\n        } else {\\n            areaX = -((-x + 4) / 9);\\n        }\\n\\n        int64 areaY;\\n        if (y >= 0) {\\n            areaY = (y + 4) / 9;\\n        } else {\\n            areaY = -((-y + 4) / 9);\\n        }\\n        return _location(areaX, areaY, z);\\n    }\\n\\n    function _getRoomLoc(\\n        uint256 areaLoc,\\n        uint8 x,\\n        uint8 y\\n    ) internal pure returns (uint256) {\\n        (int64 areaX, int64 areaY, int64 floor, ) = _coordinates(areaLoc);\\n        return _location(areaX * 9 - 4 + x, areaY * 9 - 4 + y, floor);\\n    }\\n\\n    // direction based exit generation\\n    // both exits and locks are generated\\n    // return value is encoded (uint4 locksBits, uint4 exitBits)\\n    function _generateExits(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction\\n    ) internal pure returns (uint8) {\\n        uint8 exits = 0;\\n        if (DOWN == direction) {\\n            exits = 0xF;\\n        } else {\\n            if (EXITS_INERTIA > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(1)))) % 100)) {\\n                exits = 2**direction;\\n            }\\n            if (EXITS_BIFURCATION > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(2)))) % 100)) {\\n                if (\\n                    EXITS_BOTH_BIFURCATION >\\n                    uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(3)))) % 100)\\n                ) {\\n                    if (NORTH == direction || SOUTH == direction) {\\n                        exits = (exits | 8) | 2;\\n                    } else if (EAST == direction || WEST == direction) {\\n                        exits = (exits | 1) | 4;\\n                    }\\n                } else {\\n                    if (50 > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(3)))) % 100)) {\\n                        if (NORTH == direction) {\\n                            exits |= 8;\\n                        } else if (EAST == direction) {\\n                            exits |= 1;\\n                        } else if (SOUTH == direction) {\\n                            exits |= 2;\\n                        } else if (WEST == direction) {\\n                            exits |= 4;\\n                        }\\n                    } else {\\n                        if (NORTH == direction) {\\n                            exits |= 2;\\n                        } else if (EAST == direction) {\\n                            exits |= 4;\\n                        } else if (SOUTH == direction) {\\n                            exits |= 8;\\n                        } else if (WEST == direction) {\\n                            exits |= 1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        uint8 randLock = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(111)))) % 100);\\n        uint8 numLocks = randLock < (100 - LOCK_PROBABILITY) ? 0 : (randLock < (100 - TWO_LOCK_PROBABILITY) ? 1 : 2);\\n        if (numLocks >= 4) {\\n            exits = exits | (15 * 2**4);\\n        } else if (numLocks == 3) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 4);\\n            uint8 locks = (chosenLocks + 1) * 7;\\n            if (locks == 21) {\\n                exits = exits | (13 * 2**4);\\n            } else if (locks == 28) {\\n                exits = exits | (11 * 2**4);\\n            }\\n            // 4 possibilities : 7 // 14 // 13 // 11\\n        } else if (numLocks == 2) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 6);\\n            uint8 locks = (chosenLocks + 1) * 3;\\n            if (locks == 15) {\\n                exits = exits | (5 * 2**4);\\n            } else if (locks == 18) {\\n                exits = exits | (10 * 2**4);\\n            }\\n            // 3 // 6 // 9 // 12 // 5 // 10\\n        } else if (numLocks == 1) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 4);\\n            exits = exits | (2**chosenLocks * 2**4);\\n        }\\n        return exits;\\n    }\\n\\n    function decodeCharacterData(uint256 data)\\n        external\\n        pure\\n        returns (\\n            uint16 level,\\n            uint16 hp,\\n            uint16 maxHP,\\n            uint32 xp,\\n            uint8 class\\n        )\\n    {\\n        return _decodeCharacterData(data);\\n    }\\n\\n    function _decodeCharacterData(uint256 data)\\n        internal\\n        pure\\n        returns (\\n            uint16 level,\\n            uint16 hp,\\n            uint16 maxHP,\\n            uint32 xp,\\n            uint8 class\\n        )\\n    {\\n        class = uint8(data >> 248);\\n        level = uint16((data >> 232) % 2**16);\\n        xp = uint32((data >> 200) % 2**32);\\n        maxHP = uint16((data >> 184) % 2**16);\\n        hp = uint16((data >> 168) % 2**16);\\n    }\\n\\n    function encodeGearData(\\n        uint16 level,\\n        uint8 slot,\\n        uint8 classBits,\\n        uint16 durability,\\n        uint16 maxDurability,\\n        uint32 template\\n    ) external pure returns (uint256 data) {\\n        return _encodeGearData(level, slot, classBits, durability, maxDurability, template);\\n    }\\n\\n    function _encodeGearData(\\n        uint16 level,\\n        uint8 slot,\\n        uint8 classBits,\\n        uint16 durability,\\n        uint16 maxDurability,\\n        uint32 template\\n    ) internal pure returns (uint256 data) {\\n        return ((uint256(classBits) << 248) +\\n            (uint256(level) << 232) +\\n            (uint256(slot) << 224) +\\n            (uint256(durability) << 208) +\\n            (uint256(maxDurability) << 192) +\\n            template);\\n    }\\n\\n    function decodeGearData(uint256 data)\\n        external\\n        pure\\n        returns (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        )\\n    {\\n        return _decodeGearData(data);\\n    }\\n\\n    function _decodeGearData(uint256 data)\\n        internal\\n        pure\\n        returns (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        )\\n    {\\n        classBits = uint8(data >> 248);\\n        level = uint16((data >> 232) % 2**16);\\n        slot = uint8((data >> 224) % 2**8);\\n        durability = uint16((data >> 208) % 2**16);\\n        maxDurability = uint16((data >> 192) % 2**16);\\n        template = uint32(data % 2**32);\\n    }\\n\\n    function limitedChange(\\n        uint16 value,\\n        uint16 max,\\n        int64 change\\n    ) external pure returns (uint16) {\\n        return _limitedChange(value, max, change);\\n    }\\n\\n    function _limitedChange(\\n        uint16 value,\\n        uint16 max,\\n        int64 change\\n    ) internal pure returns (uint16) {\\n        int64 updated = int64(value) + int64(change);\\n        if (updated > int64(max)) {\\n            return max;\\n        }\\n        if (updated <= 0) {\\n            return 0;\\n        } else {\\n            return uint16(updated);\\n        }\\n    }\\n\\n    function roomsTax(uint256 rooms, uint256 periods) external pure returns (uint256) {\\n        return _roomsTax(rooms, periods);\\n    }\\n    function _roomsTax(uint256 rooms, uint256 periods) internal pure returns (uint256) {\\n        return (1 + rooms / 10) * periods;\\n    }\\n}\\n\",\"keccak256\":\"0xdd23a937e6bc3a440c788bd20715643ced16be47b7644aef149d4a0c8c60d3f7\"},\"src/player/Player.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./PlayerDataLayout.sol\\\";\\nimport \\\"../utils/MetaTransactionReceiver.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"../utils/Constants.sol\\\";\\n\\ncontract Player is Proxied, PlayerDataLayout, MetaTransactionReceiver, Constants {\\n    event Call(bool success, bytes returnData);\\n    event Refill(address indexed playerAddress, uint256 newEnergy);\\n\\n    function postUpgrade(\\n        Characters charactersContract,\\n        address payable feeRecipient,\\n        uint256 minBalance,\\n        Pool pool\\n    ) external proxied {\\n        // TODO _setTrustedForwarder(...);\\n        _charactersContract = charactersContract;\\n        _feeRecipient = feeRecipient;\\n        MIN_BALANCE = minBalance;\\n        _pool = pool;\\n        pool.register();\\n    }\\n\\n    function register() external {\\n        if (msg.sender != address(_holder)) {\\n            require(address(_holder) == address(0), \\\"holder already set\\\");\\n            _holder = Enterable(msg.sender);\\n        }\\n    }\\n\\n    function getLastCharacterId(address playerAddress) external view returns (uint256) {\\n        return _lastCharacterIds[playerAddress];\\n    }\\n\\n    function getEnergy(address playerAddress) external view returns (uint256 energy, uint256 freeEnergy) {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    // TODO remove ?\\n    function getPlayerInfo(address playerAddress, uint256 characterId)\\n        external\\n        view\\n        returns (uint256 energy, uint256 freeEnergy)\\n    {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    function createAndEnter(\\n        address payable newDelegate,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        uint256 characterId = _charactersContract.mintTo(address(_holder));\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function enter(\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        _charactersContract.transferFrom(sender, address(_holder), characterId);\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function _enter(\\n        address payable sender,\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string memory name,\\n        uint8 class,\\n        uint256 location\\n    ) internal {\\n        require(msg.value >= value, \\\"msg.value < value\\\");\\n        if (msg.value > value) {\\n            _refill(sender, sender, msg.value - value);\\n        }\\n        if (newDelegate != address(0)) {\\n            _addDelegate(sender, newDelegate);\\n        }\\n        _holder.enter.value(value)(sender, characterId, name, class, location);\\n        _lastCharacterIds[sender] = characterId;\\n    }\\n\\n    function callAsCharacter(\\n        address destination,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData) {\\n        address sender = _msgSender();\\n        // TODO check death ?\\n        require(destination != address(this), \\\"cannot call itself\\\");\\n        // TODO block data if == `enter(address sender, uint256 characterId, bytes data)`\\n        uint256 initialGas = gasleft();\\n        uint256 characterId = _getFirstParam(data);\\n        require(_charactersContract.ownerOf(characterId) == address(_holder), \\\"_holder does not own character\\\");\\n        uint256 playerAddress = _charactersContract.getSubOwner(characterId);\\n        if (uint256(sender) != playerAddress) {\\n            require(uint256(_delegates[sender]) == playerAddress, \\\"sender is not delegate of character's player\\\");\\n        }\\n\\n        (success, returnData) = _executeWithSpecificGas(destination, gasLimit, data);\\n\\n        Player storage player = _players[address(playerAddress)];\\n        uint256 energy = player.energy;\\n        uint256 txCharge = ((initialGas - gasleft()) + 10000) * tx.gasprice;\\n        uint256 freeEnergyFee = (txCharge * 10) / 100; // 10% extra is used for free energy\\n\\n        uint256 poolFee = txCharge * 10; // 1000% is used for UBF\\n\\n        require(energy >= freeEnergyFee + poolFee, \\\"not enough energy\\\");\\n        energy -= (freeEnergyFee + poolFee);\\n        _pool.recordCharge{value: poolFee}(sender, txCharge, poolFee);\\n\\n        if (msg.sender == sender) {\\n            // not metatx : use local private key so need to recharge local balance // TODO remove (once metatx is enabled)\\n            if (msg.sender.balance < MIN_BALANCE) {\\n                uint256 balanceToGive = MIN_BALANCE - msg.sender.balance;\\n                if (balanceToGive >= energy) {\\n                    balanceToGive = energy;\\n                    energy = 0;\\n                } else {\\n                    energy -= balanceToGive;\\n                }\\n\\n                if (balanceToGive > 0) {\\n                    msg.sender.transfer(balanceToGive);\\n                }\\n            }\\n        }\\n        player.freeEnergy += uint128(freeEnergyFee);\\n        player.energy = uint128(energy);\\n\\n        emit Call(success, returnData);\\n    }\\n\\n    function isDelegateFor(address delegate, address playerAddress) external view returns (bool) {\\n        return _delegates[delegate] == playerAddress;\\n    }\\n\\n    function refillAccount(address account) public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, account, msg.value);\\n    }\\n\\n    function refill() public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, sender, msg.value);\\n    }\\n\\n    function _refill(\\n        address payable sender,\\n        address account,\\n        uint256 value\\n    ) internal returns (uint256 refund) {\\n        uint128 energy = _players[account].energy;\\n        energy += uint128(value);\\n        if (energy > uint128(MAX_FOOD)) {\\n            energy = uint128(MAX_FOOD);\\n            refund = energy - MAX_FOOD;\\n        }\\n        _players[account].energy = energy;\\n        emit Refill(account, energy);\\n        if (refund > 0) {\\n            sender.transfer(refund);\\n        }\\n    }\\n\\n    // TODO add Events for Delegates\\n    function addDelegate(address payable _delegate) public payable {\\n        address payable sender = _msgSender();\\n        if (msg.value > 0) {\\n            _refill(sender, sender, msg.value);\\n        }\\n        _addDelegate(sender, _delegate);\\n    }\\n\\n    function _addDelegate(address sender, address payable _delegate) internal {\\n        require(_delegate != address(0), \\\"no zero address delegate\\\");\\n        require(_players[sender].energy >= uint128(MIN_BALANCE), \\\"not enough energy\\\");\\n        _players[sender].energy -= uint128(MIN_BALANCE);\\n        _delegate.transfer(MIN_BALANCE);\\n        _delegates[_delegate] = sender;\\n    }\\n\\n    function _getFirstParam(bytes memory data) internal pure returns (uint256) {\\n        if (data.length < 36) {\\n            return 0;\\n        }\\n        uint256 value;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value;\\n    }\\n\\n    function _executeWithSpecificGas(\\n        address to,\\n        uint256 gasLimit,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        (success, returnData) = to.call.gas(gasLimit)(data);\\n        assert(gasleft() > gasLimit / 63);\\n        // not enough gas provided, assert to throw all gas // TODO use EIP-1930\\n    }\\n}\\n\",\"keccak256\":\"0x68ad10c9793851f62ca8da96537c9e89c813290c6b1d5a19d3dc760dbfdeadb9\"},\"src/player/PlayerDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ninterface Enterable {\\n    // TODO generalize?\\n    function enter(\\n        address sender,\\n        uint256 characterId,\\n        string calldata data,\\n        uint8 class,\\n        uint256 location\\n    ) external payable;\\n}\\n\\ncontract PlayerDataLayout {\\n    uint256 internal MIN_BALANCE; // = 5000000000000000;\\n\\n    struct Player {\\n        uint128 energy;\\n        uint128 freeEnergy;\\n    }\\n\\n    address payable _feeRecipient;\\n    mapping(address => address) _delegates;\\n    mapping(address => Player) _players;\\n    mapping(address => uint256) _lastCharacterIds;\\n\\n    Characters _charactersContract;\\n    Enterable _holder;\\n\\n    Pool _pool;\\n}\\n\",\"keccak256\":\"0xb5c01a684a934ae4742d2cb686ab53ed1d8e72bb7d6231bf440811de6a01dbbb\"},\"src/player/Pool.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ninterface Pool {\\n    function register() external;\\n\\n    function recordCharge(\\n        address account,\\n        uint256 txCharge,\\n        uint256 poolFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x28dfcd73f5c9400c1da453ecc67fea0493bec7c463b27b0eb3b8ccb7979e1a35\"},\"src/tokens/ERC1155Token.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./ERC1155TokenDataLayout.sol\\\";\\n\\ncontract ERC1155Token is Proxied, ERC1155TokenDataLayout {\\n    event TransferSingle(address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n    event TransferBatch(address indexed from, address indexed to, uint256[] indexed ids, uint256[] amounts);\\n    event SubTransferSingle(uint256 indexed from, uint256 indexed to, uint256 indexed id, uint256 amount);\\n    event SubTransferBatch(uint256 indexed from, uint256 indexed to, uint256[] indexed ids, uint256[] amounts);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function postUpgrade(address tokenOwner) public virtual proxied {\\n        _tokenOwner = tokenOwner;\\n    }\\n\\n    function mintVault(\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _balances[owner][id] += amount;\\n        _subBalances[0][id] += amount;\\n        emit TransferSingle(address(0), owner, id, amount);\\n        emit SubTransferSingle(0, 0, id, amount);\\n    }\\n\\n    // TODO remove after fix\\n    function mintTo(\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _balances[owner][id] += amount;\\n        emit TransferSingle(address(0), owner, id, amount);\\n    }\\n\\n    // TODO remove after fix\\n    function subMint(uint256 id, uint256 amount) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subBalances[0][id] += amount;\\n        emit SubTransferSingle(0, 0, id, amount);\\n    }\\n\\n    function mint(\\n        uint256 subOwner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subBalances[subOwner][id] += amount;\\n        _balances[_tokenOwner][id] += amount;\\n        emit TransferSingle(address(0), _tokenOwner, id, amount);\\n        emit SubTransferSingle(0, subOwner, id, amount);\\n    }\\n\\n    function subBurnFrom(\\n        uint256 from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(_tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BURN\\\");\\n        uint256 currentBalance = _subBalances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _subBalances[from][id] = currentBalance - amount;\\n        _balances[_tokenOwner][id] -= amount;\\n        emit TransferSingle(_tokenOwner, address(0), id, amount);\\n        emit SubTransferSingle(from, 0, id, amount);\\n    }\\n\\n    function batchSubBurnFrom(\\n        uint256 from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(ids.length == amounts.length, \\\"Inconsistent length\\\");\\n        require(\\n            _tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender],\\n            \\\"NOT_AUTHORIZED_BATCH_SUB_BURN\\\"\\n        );\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            uint256 currentBalance = _subBalances[from][id];\\n            require(currentBalance >= amount, \\\"does not own enough\\\");\\n            _subBalances[from][id] = currentBalance - amount;\\n            _balances[_tokenOwner][id] -= amount;\\n        }\\n        emit TransferBatch(_tokenOwner, address(0), ids, amounts);\\n        emit SubTransferBatch(from, 0, ids, amounts);\\n    }\\n\\n    function subBalanceOf(uint256 who, uint256 id) public view returns (uint256) {\\n        return _subBalances[who][id];\\n    }\\n\\n    function subBalanceOfBatch(uint256[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"Inconsistent array length between args\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = subBalanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    function subTransferFrom(\\n        uint256 from,\\n        uint256 to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(_tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender], \\\"NOT_AUTHORIZED_SUB_TRANSFER\\\");\\n        uint256 currentBalance = _subBalances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _subBalances[from][id] = currentBalance - amount;\\n        _subBalances[to][id] += amount;\\n        emit SubTransferSingle(from, to, id, amount);\\n    }\\n\\n    function balanceOf(address who, uint256 id) public view returns (uint256) {\\n        require(who != address(0), \\\"zero address\\\");\\n        return _balances[who][id];\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"Inconsistent array length between args\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    // TODO ERC1155 use safe version only\\n\\n    // onwer need to take responsibility to subBurn before transfering out\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_TRANSFER\\\");\\n        uint256 currentBalance = _balances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _balances[from][id] = currentBalance - amount;\\n        _balances[to][id] += amount;\\n        emit TransferSingle(from, to, id, amount);\\n    }\\n\\n    // onwer need to take responsibility to subBurn before transfering out\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(ids.length == amounts.length, \\\"Inconsistent length\\\");\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_BATCH_TRANSFER\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            uint256 currentBalance = _balances[from][id];\\n            require(currentBalance >= amount, \\\"does not own enough\\\");\\n            _balances[from][id] = currentBalance - amount;\\n            _balances[to][id] += amount;\\n        }\\n        emit TransferBatch(from, to, ids, amounts);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _operatorsForAll[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0xcd0147fbb2a8858e06cc424f06fbce16b62e08f25bf2836c252bda68e154d3a9\"},\"src/tokens/ERC1155TokenDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract ERC1155TokenDataLayout {\\n    mapping(address => mapping(uint256 => uint256)) internal _balances; // TODO pack balances into one unit256\\n    mapping(uint256 => mapping(uint256 => uint256)) internal _subBalances; // TODO pack balances into one unit256\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\n    address _tokenOwner; //the dungeon\\n}\\n\",\"keccak256\":\"0xdd21c84c06255dd0e075f96c495bfe5641ab182e1b64e921bdd36447825f80f2\"},\"src/tokens/ERC721Token.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./ERC721TokenDataLayout.sol\\\";\\n\\ncontract ERC721Token is Proxied, ERC721TokenDataLayout {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n    event SubTransfer(uint256 indexed from, uint256 indexed to, uint256 indexed id);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event DataUpdate(uint256 indexed id, uint256 indexed data);\\n\\n    function postUpgrade(address dungeon) public virtual proxied {\\n        _minter = dungeon;\\n    }\\n\\n    function subBalanceOf(uint256 subOwner) external view returns (uint256) {\\n        return _subNumNFTPerAddress[subOwner];\\n    }\\n\\n    function mint(uint256 subOwner, uint256 data) public returns (uint256 id) {\\n        require(msg.sender == _minter, \\\"NOT_AUTHORIZED_MINT\\\");\\n        id = ++_lastId;\\n        _subOwners[id] = subOwner;\\n        _subNumNFTPerAddress[subOwner]++;\\n        _owners[id] = _minter;\\n        _data[id] = data;\\n        emit DataUpdate(id, data);\\n        emit Transfer(address(0), _minter, id);\\n        emit SubTransfer(0, subOwner, id);\\n    }\\n\\n    // TODO make sure that data of gear/room in vault cannot be changed\\n    function setData(uint256 id, uint256 data) external {\\n        address owner = _owners[id];\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SET_DATA\\\");\\n        _data[id] = data;\\n        emit DataUpdate(id, data);\\n    }\\n\\n    function getData(uint256 id) external view returns (uint256) {\\n        return _data[id];\\n    }\\n\\n    function subBurn(uint256 id) external {\\n        address owner = _owners[id];\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BURN\\\");\\n        uint256 subOwner = _subOwners[id];\\n        _subOwners[id] = 0;\\n        _subNumNFTPerAddress[subOwner]--;\\n        emit SubTransfer(subOwner, 0, id);\\n    }\\n\\n    function subOwnerOf(uint256 id) public view returns (uint256) {\\n        return _subOwners[id];\\n    }\\n\\n    function ownerOf(uint256 id) public view returns (address) {\\n        address owner = _owners[id];\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        return owner;\\n    }\\n\\n    function subTransferFrom(\\n        address owner,\\n        uint256 from,\\n        uint256 to,\\n        uint256 id\\n    ) external {\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_TRANSFER\\\");\\n        require(owner == _owners[id], \\\"not owner\\\");\\n        uint256 subOwner = _subOwners[id];\\n        require(subOwner == from, \\\"not subOnwer\\\");\\n        _subOwners[id] = to;\\n        _subNumNFTPerAddress[subOwner]--;\\n        _subNumNFTPerAddress[to]++;\\n        emit SubTransfer(from, to, id);\\n    }\\n\\n    function subBatchTransferFrom(\\n        address owner,\\n        uint256 from,\\n        uint256 to,\\n        uint256[] calldata ids\\n    ) external {\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BATCH_TRANSFER\\\");\\n        uint256 numIds = ids.length;\\n        for (uint256 i = 0; i < numIds; i++) {\\n            uint256 id = ids[i];\\n            require(owner == _owners[id], \\\"not owner\\\");\\n            uint256 subOwner = _subOwners[id];\\n            require(subOwner == from, \\\"not subOnwer\\\");\\n            _subOwners[id] = to;\\n            emit SubTransfer(from, to, id);\\n        }\\n        _subNumNFTPerAddress[from] -= numIds;\\n        _subNumNFTPerAddress[to] += numIds;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_TRANSFER\\\");\\n        address owner = _owners[id];\\n        require(owner == from, \\\"not owner\\\");\\n        _owners[id] = to;\\n        uint256 subOwner = _subOwners[id];\\n        if (_subOwners[id] != 0) {\\n            _subOwners[id] = 0;\\n            _subNumNFTPerAddress[subOwner]--;\\n            emit SubTransfer(subOwner, 0, id);\\n        }\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external {\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_BATCH_TRANSFER\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            address owner = _owners[id];\\n            require(owner == from, \\\"not owner\\\");\\n            _owners[id] = to;\\n            uint256 subOwner = _subOwners[id];\\n            if (_subOwners[id] != 0) {\\n                _subOwners[id] = 0;\\n                _subNumNFTPerAddress[subOwner]--;\\n                emit SubTransfer(subOwner, 0, id);\\n            }\\n            emit Transfer(from, to, id); // TODO extract function (same as transferFrom)\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _operatorsForAll[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0x0e0b76aeb5c792803b2b750cf124709b231ebf0e47c5b408ebae0fb6f4b944f1\"},\"src/tokens/ERC721TokenDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract ERC721TokenDataLayout {\\n    address internal _minter;\\n    uint256 internal _lastId;\\n    mapping(uint256 => address) internal _owners;\\n    mapping(uint256 => uint256) internal _subOwners;\\n\\n    mapping(uint256 => uint256) internal _subNumNFTPerAddress;\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    mapping(uint256 => uint256) internal _data;\\n}\\n\",\"keccak256\":\"0xf389950923ea0618a2da366fb1726d4c6c60c507c5fad43fe9f1317f614a8553\"},\"src/tokens/Elements.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC1155Token.sol\\\";\\n\\ncontract Elements is ERC1155Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n}\\n\",\"keccak256\":\"0x5111ca6032430f85a7cb526c3ff0331fbbc398cbb8ceb52e96f73159cc47233f\"},\"src/tokens/Gears.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC721Token.sol\\\";\\n\\ncontract Gears is ERC721Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n}\\n\",\"keccak256\":\"0x6e1e20651a266c4ab8fba8e4f90c321d30101f24348da6803b0bae6711fdef3c\"},\"src/tokens/Rooms.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC721Token.sol\\\";\\n\\ncontract Rooms is ERC721Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n\\n    function mintId(uint256 id, uint256 subOwner) public {\\n        require(msg.sender == _minter, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subOwners[id] = subOwner;\\n        _subNumNFTPerAddress[subOwner]++;\\n        _owners[id] = _minter;\\n        emit Transfer(address(0), _minter, id);\\n        emit SubTransfer(0, subOwner, id);\\n    }\\n}\\n\",\"keccak256\":\"0x3241793b303d5eb5eb327e8036d6f06a3ed631daedf34e55806b3dea8c3a6573\"},\"src/utils/BlockHashRegister.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract BlockHashRegister {\\n    mapping(uint256 => bytes32) _blockHashes;\\n    uint256 _blockToActualise;\\n\\n    event HashRequest(uint256 blockNumber);\\n\\n    function get(uint256 blockNumber) external view returns (bytes32) {\\n        return _blockHashes[blockNumber];\\n    }\\n\\n    function getOrCompute(uint256 blockNumber) external view returns (bytes32) {\\n        bytes32 blockHash = _blockHashes[blockNumber];\\n        if (uint256(blockHash) == 0) {\\n            return _computeBlockHash(blockNumber);\\n        }\\n        return blockHash;\\n    }\\n\\n    function getBlockToActualise() external view returns (uint256) {\\n        return _blockToActualise;\\n    }\\n\\n    function request() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = block.number;\\n            emit HashRequest(block.number);\\n        }\\n    }\\n\\n    function save() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = 0;\\n        }\\n    }\\n\\n    function _computeBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (blockNumber < 256 || blockNumber > block.number - 256) {\\n            return blockhash(blockNumber);\\n        } else {\\n            uint256 moduloBlockNumber = block.number - ((block.number - blockNumber - 1) % 256) + 1;\\n            return blockhash(moduloBlockNumber);\\n        }\\n    }\\n\\n    function _save(uint256 blockNumber) internal returns (bytes32) {\\n        bytes32 blockHash = _computeBlockHash(blockNumber);\\n        _blockHashes[blockNumber] = blockHash;\\n        return blockHash;\\n    }\\n}\\n\",\"keccak256\":\"0xbf9f49a9ee6426191a58a2796f50ca4652c8dd635e120aadb277cf2ffb2f0cc9\"},\"src/utils/Constants.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract Constants {\\n    uint256 public constant MAX_FOOD = 400000000000000000;\\n}\\n\",\"keccak256\":\"0xaf0e49384bb233af73112ec81b17d1a71a68b528a01aa0afd6395506fc17675a\"},\"src/utils/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nabstract contract MetaTransactionReceiver {\\n    bytes32 constant FORWARDER_STORAGE_POSITION = 0xbda473cae6459373242ba82cd14b3b8493956b600be62b2478f52616c8a283de;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    function _msgSender() internal view returns (address payable sender) {\\n        sender = msg.sender;\\n        if (_isTrustedForwarder(sender)) {\\n            bytes memory data = msg.data;\\n            uint256 length = msg.data.length;\\n            assembly {\\n                sender := mload(add(data, length))\\n            }\\n        }\\n    }\\n\\n    function _isTrustedForwarder(address trustedForwarder) internal view returns(bool isTrustedForwarder) {\\n        address currentForwarder;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            currentForwarder := sload(\\n                FORWARDER_STORAGE_POSITION\\n            )\\n        }\\n        return currentForwarder == trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address trustedForwarder) internal {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(\\n                FORWARDER_STORAGE_POSITION,\\n                trustedForwarder\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x331029fe6dd9110f1655d42a32d0d698089923cf3ef38a3daab855745d776392\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cd5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ce90ec2146100515780632227990014610070578063d0604dd714610097578063f474541f146100b4575b600080fd5b61006e6004803603602081101561006757600080fd5b503561017d565b005b61006e6004803603604081101561008657600080fd5b508035906020013561ffff1661046e565b61006e600480360360208110156100ad57600080fd5b5035610710565b61006e600480360360608110156100ca57600080fd5b813591908101906040810160208201356401000000008111156100ec57600080fd5b8201836020820111156100fe57600080fd5b8035906020019184602083028401116401000000008311171561012057600080fd5b91939092909160208101903564010000000081111561013e57600080fd5b82018360208201111561015057600080fd5b8035906020019184602083028401116401000000008311171561017257600080fd5b509092509050610ae9565b600a546001600160a01b031633146101d3576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b5050506000828152602081905260409020805490915061025690610c00565b61025e612c1d565b61026783610f72565b90506009816020015161ffff16106102be576040805162461bcd60e51b81526020600482015260156024820152746f6e6c792039206c6576656c7320666f72206e6f7760581b604482015290519081900360640190fd5b6000816080015161ffff1611610314576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60208101805160010161ffff1690819052600090819081906103359061104b565b60608701805160ff83160161ffff90811691829052608089019190915260408801519396509194509250841663ffffffff90911610156103ac576040805162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f75676820787609c1b604482015290519081900360640190fd5b6007546040805163c9b902e360e01b815260048101899052600660248201526044810185905290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506104298685611116565b6020808501516040805161ffff90921682525188927ff9c0df78f5971a6ba2a9b0be5ece0fa71b8c42571ddc8c7cebc6807816bdc773928290030190a2505050505050565b600a546001600160a01b031633146104c4576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b60008161ffff161161051d576040805162461bcd60e51b815260206004820152601a60248201527f796f75206861766520746f206865616c20736f6d657468696e67000000000000604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505061058d612c1d565b61059683610f72565b90506000816080015161ffff16116105ee576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60008381526020819052604090205461060681610c00565b600081815260016020526040902054600160d01b900460ff16600314610673576040805162461bcd60e51b815260206004820152601760248201527f63757272656e7420726f6f6d206e6f742074656d706c65000000000000000000604482015290519081900360640190fd5b600061068c836080015184606001518661ffff166111d7565b9050600061069f84608001518303611223565b90506106ae868460068461122a565b61ffff821660808501526106c28685611116565b857fb572bcfe7c1f09d996241a68f1d4c1eac6f97533ddff5bdf47aaa2ac9730292a85608001518403604051808261ffff1661ffff16815260200191505060405180910390a2505050505050565b600a546001600160a01b03163314610766576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050600082815260208190526040902080549091506107e981610c00565b6107f1612c1d565b6107fa84610f72565b9050806080015161ffff16600014610851576040805162461bcd60e51b815260206004820152601560248201527418da185c9858dd195c881a5cc81b9bdd0819195859605a1b604482015290519081900360640190fd5b60065460408051630607176160e31b81526004810187905290516000926001600160a01b031691633038bb08916024808301926020929190829003018186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d60208110156108c757600080fd5b505160065460408051637fbddc4760e01b81526004810189905260006024820181905291519394506001600160a01b0390921692637fbddc4792604480820193929182900301818387803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b50506006546040805163140e25ad60e31b815260006004820181905291519194506001600160a01b03909216925063a0712d689160248082019260209290919082900301818787803b15801561098757600080fd5b505af115801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b505160208401519091506000906109c79061104b565b505061ffff8082166040870152606086015116608086015290506109eb8285611116565b6109f482611483565b600186810154600084815260208190526040808220909301805468ffffffffffffffff0019166001600160401b0361010094859004600790810b900b169093029290921790915560065482516323b872dd60e01b81523060048201526001600160a01b03878116602483015260448201879052935193909116926323b872dd9260648084019391929182900301818387803b158015610a9257600080fd5b505af1158015610aa6573d6000803e3d6000fd5b50506040805185815290518a93507f9864b8944e5b257db2545835b30ecab5f0bb520af28a793c225ce15f52e64bce92509081900360200190a250505050505050565b600a546001600160a01b03163314610b3f576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b610b47612c1d565b610b5086610f72565b90506000816080015161ffff1611610ba8576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60005b84811015610bf757610bef8783602001518460000151898986818110610bcd57fe5b90506020020135888887818110610be057fe5b9050602002013560ff166115d1565b600101610bab565b50505050505050565b600081815260016020526040902080546001600160401b0316610c61576040805162461bcd60e51b81526020600482015260146024820152731c9bdbdb481b9bdd0818dc99585d1959081e595d60621b604482015290519081900360640190fd5b8054600160d01b900460ff16610f5c57600554815460408051634a83e9cd60e11b81526001600160401b039092166004830152516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b5051905080610d01575050610f6f565b610d0b838261195e565b815460009081908190610d49908790869060ff600160c01b8204811691600160d81b8104821691600160e01b8204811691600160e81b900416611a4e565b875460ff808416600160d01b0260ff60d01b19918616600160c81b0260ff60c81b199093169290921716178855919450925090506000610d8887611a7f565b600081815260026020526040902080549192509060ff8481166101009092041614610dc057805461ff00191661010060ff8516021781555b6040805187815260ff8088166020830152861681830152905189917f8850140926f0260fe1b422b7a0d93e7d5734e521eae9ac8969ed512cc3834515919081900360600190a2600082815260026020526040902054600188015460ff9091169015610f5457610e2d612c1d565b610e3a8960010154610f72565b9050600080610e4e8c8b8560000151611b17565b9150915060058460ff1611610ed85760075460018c0154604080516302acc94b60e01b8152600481019290925260ff8716602483015260448201849052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050505b60075460018c0154604080516302acc94b60e01b815260048101929092526006602483015260448201859052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b505050505050505b505050505050505b610f6d610f6883611a7f565b611c13565b505b50565b610f7a612c1d565b60065460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015610fc657600080fd5b505afa158015610fda573d6000803e3d6000fd5b505050506040513d6020811015610ff057600080fd5b5051905060008080808061100386611d80565b6040805160a08101825260ff909216825261ffff958616602083015263ffffffff9092169181019190915290831660608201529116608082015296505050505050505b919050565b6000806000611058612c4b565b50604080516101608101825260008152600a60208201526031918101919091526077606082015260d0608082015261014860a082015261020c60c082015261033a60e08201526104f5610100820152610e46610120820152611aee6101408201528061ffff8616600b81106110c957fe5b6020020151935060088561ffff1611156110e7576101ec925061110a565b600560038660010161ffff160a61ffff16816110ff57fe5b0460080161ffff1692505b600a9150509193909250565b600060a8826080015161ffff16901b60b8836060015161ffff16901b60c8846040015163ffffffff16901b60e8856020015161ffff16901b60f8866000015160ff16901b010101019050600660009054906101000a90046001600160a01b03166001600160a01b0316634848b1a584836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156111c357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b600080828561ffff160190508361ffff1660070b8160070b13156111fe578391505061121c565b60008160070b1361121357600091505061121c565b905061121c565b505b9392505050565b61ffff1690565b600061123584611db1565b90506001600160a01b038116156114085760058204801561138e57600754604080516311aa10fb60e01b815260048101899052600060248201819052604482018890526064820185905291516001600160a01b03909316926311aa10fb9260848084019391929182900301818387803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505060075460408051637f4c824d60e11b81523060048201526001600160a01b038781166024830152604482018a905260648201879052915191909216935063fe99049a9250608480830192600092919082900301818387803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50505050816001600160a01b0316857f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb8684604051808381526020018281526020019250505060405180910390a35b6007546040805163c9b902e360e01b81526004810189905260248101879052838603604482015290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b1580156113ea57600080fd5b505af11580156113fe573d6000803e3d6000fd5b505050505061147c565b6007546040805163c9b902e360e01b815260048101889052602481018690526044810185905290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b15801561146357600080fd5b505af1158015611477573d6000803e3d6000fd5b505050505b5050505050565b6000611497600080600f600a806001611e48565b905060006114ae60006001600f600a806004611e48565b60085460408051630d9778e560e11b8152600481018790526024810186905290519293506000926001600160a01b0390921691631b2ef1ca9160448082019260209290919082900301818787803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b505050506040513d602081101561153257600080fd5b505190506115448460008084816115d1565b60085460408051630d9778e560e11b8152600481018790526024810185905290516000926001600160a01b031691631b2ef1ca91604480830192602092919082900301818787803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050506040513d60208110156115c257600080fd5b5051905061147c856000808460015b6115d9612c6a565b6115e283611e9c565b90508461ffff16816000015161ffff16111561163b576040805162461bcd60e51b81526020600482015260136024820152720cecac2e44098caeccad840e8dede40d0d2ced606b1b604482015290519081900360640190fd5b8360ff16816040015160ff16901c60011660ff1660001415611694576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c696420636c61737360981b604482015290519081900360640190fd5b60ff821661170f57602081015160ff16156116f6576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c792061747461636b2067656172206f6e20736c6f742030000000000000604482015290519081900360640190fd5b600086815260208190526040902060020183905561190f565b8160ff166001141561179057806020015160ff16600114611777576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c7920646566656e73652067656172206f6e20736c6f7420310000000000604482015290519081900360640190fd5b600086815260208190526040902060030183905561190f565b8160ff166002141561181157806020015160ff166002146117f8576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742032000000000000604482015290519081900360640190fd5b600086815260208190526040902060040183905561190f565b8160ff166003141561189257806020015160ff16600214611879576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742033000000000000604482015290519081900360640190fd5b600086815260208190526040902060050183905561190f565b8160ff166004141561190f57806020015160ff166002146118fa576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742034000000000000604482015290519081900360640190fd5b60008681526020819052604090206006018390555b6020808201516040805189815292830186905260ff90911682820152517f9661c1f94255e8f19fda183859db8ad335498fb1e361acc4bd925a68d1bcaf819181900360600190a1505050505050565b600061196983611a7f565b60008181526002602052604090205490915060ff1680611a4857600354600160401b90046001600160401b03166119a1838583611f7d565b6000848152600260205260409020805460ff191660ff831690811790915590925060061461147c57600354620143704204906001600160401b03808316911614611a1c5760038054600160401b67ffffffffffffffff199091166001600160401b0384161767ffffffffffffffff60401b1916179055611a45565b6003805467ffffffffffffffff60401b1916600160401b600185016001600160401b0316021790555b50505b50505050565b6000806000611a5e89898961205e565b9250611a6d8989888888612423565b939a9099509297509195505050505050565b600080600080611a8e85612750565b509250925092506000808460070b12611ab1575060096004840160070b05611acb565b60098460000360040160070b81611ac457fe5b0560000390505b6000808460070b12611ae7575060096004840160070b05611b01565b60098460000360040160070b81611afa57fe5b0560000390505b611b0c82828561276b565b979650505050505050565b6000806000611b27866000612794565b90506019810480611b36575060015b6040805160208082018a9052818301899052601960fa1b60608301528251604181840301815260619092019092528051910120819081611b7257fe5b066002820401925082611b8457600192505b600260ff86161415611b995760048304830192505b6008811115611ba6575060085b6040805160208082018a9052818301899052606560f81b60608301528251604181840301815260619092019092528051910120819081611be257fe5b066002820401935083611bf457600193505b600160ff86161415611c095760048404840193505b5050935093915050565b6000818152600260208190526040909120908101546001600160401b03168015611d7b5760055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015611c8b57600080fd5b505afa158015611c9f573d6000803e3d6000fd5b505050506040513d6020811015611cb557600080fd5b5051905080611cc657505050610f6f565b600080611cd38684612832565b915091506000611ce2836128b7565b60008481526001602052604090206002810154919250906001600160401b0316158015611d1e57508054600160801b90046001600160401b0316155b8015611d28575081155b8015611d3e57508054600160d01b900460ff1615155b15611d625760028101805467ffffffffffffffff19166001600160401b0385161790555b50505060028401805467ffffffffffffffff1916905550505b505050565b61ffff60e882901c81169260a883901c82169260b881901c9092169163ffffffff60c882901c169160f89190911c90565b6000611dbc826129bb565b15611e4057600954604080516369f648a160e01b81526004810185905290516001600160a01b03909216916369f648a191602480820192602092909190829003018186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d6020811015611e3757600080fd5b50519050611046565b506000611046565b6001600160f81b031960f885901b1661ffff60e81b60e888901b160160ff60e01b60e087901b160161ffff60d01b60d085901b160161ffff60c01b60c084901b160163ffffffff8216019695505050505050565b611ea4612c6a565b60085460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015611ef057600080fd5b505afa158015611f04573d6000803e3d6000fd5b505050506040513d6020811015611f1a57600080fd5b5051905060008080808080611f2e87612a4b565b6040805160c08101825261ffff978816815260ff968716602082015294909516948401949094529084166060830152909216608083015263ffffffff1660a08201529998505050505050505050565b6000611f8884612a7f565b80611f9d5750600a6001600160401b03831610155b15611faa5750600661121c565b6000611fb585612ad5565b6009026001600160401b031690506000811115611fd157600319015b6019811061205357604080516020808201889052818301879052600360fa1b60608301528251604181840301815260619092019092528051910120606461271090910660ff161180159061204857600061202a87612750565b509250505060058160070b8161203c57fe5b0760010193505061204d565b600692505b5061121a565b506006949350505050565b600080600460ff841614156120755750600f61225d565b604080516020808201889052818301879052600160f81b606083015282516041818403018152606190920190925280519101206064900660ff16605711156120c0575060ff821660020a5b604080516020808201889052818301879052600160f91b606083015282516041818403018152606190920190925280519101206064900660ff166028111561225d57604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16601911156121875760ff831615806121575750600260ff8416145b1561216457600a17612182565b600160ff841614806121795750600360ff8416145b15612182576005175b61225d565b604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16603211156122155760ff83166121d957600817612182565b600160ff841614156121ed57600117612182565b600260ff8416141561220157600217612182565b600360ff841614156121825760041761225d565b60ff83166122255760021761225d565b600160ff841614156122395760041761225d565b600260ff8416141561224d5760081761225d565b600360ff8416141561225d576001175b604080516020808201889052818301879052606f60f81b60608301528251808303604101815260619092019092528051910120606490066000603c60ff8316106122bb57605a60ff8316106122b35760026122b6565b60015b6122be565b60005b905060048160ff16106122d6578260f0179250612418565b8060ff1660031415612350576040805160208082018a9052818301899052600760fc1b606083015282518083036041018152606190920190925280519101206003166001810160070260ff811660151415612336578460d0179450612349565b8060ff16601c1415612349578460b01794505b5050612418565b8060ff16600214156123ca576040805160208082018a9052818301899052600760fc1b60608301528251808303604101815260619092019092528051910120600690066001810160030260ff8116600f14156123b157846050179450612349565b8060ff1660121415612349578460a01794505050612418565b8060ff1660011415612418576040805160208082018a9052818301899052600760fc1b6060830152825160418184030181526061909201909252805191012060031660020a60100292909217915b509095945050505050565b600080600061243188611a7f565b8692509050846000806124438b612750565b5050915091508160070b600014801561245f57508060070b6000145b156124735760029550846001179450612742565b8660ff168360ff16116127425760408051602080820187905260f886901b6001600160f81b03191682840152604182018d9052600360f81b60618301528251808303604201815260629092019092528051910120601490066001868116148015906124ec575060ff811615806124ec57508360ff166050145b156125005760029650856001179550612736565b60028087161480159061253f57508060ff166001148061252357508360ff166050145b8061253f57508360ff16604f14801561253f5750600180871614155b156125535760039650856002179550612736565b6004808716148015906125d957508060ff166002148061257657508360ff166050145b8061259257508360ff16604f1480156125925750600180871614155b806125ae57508360ff16604f1480156125ae5750600280871614155b806125d957508360ff16604e1480156125ca5750600180871614155b80156125d95750600280871614155b156125eb576004965094861794612736565b60088087161480159061271d57508060ff166003148061260e57508360ff166050145b8061262a57508360ff16604f14801561262a5750600180871614155b8061264657508360ff16604f1480156126465750600280871614155b8061266257508360ff16604f1480156126625750600480871614155b8061268d57508360ff16604e14801561267e5750600180871614155b801561268d5750600280871614155b806126b857508360ff16604e1480156126a95750600180871614155b80156126b85750600480871614155b806126e357508360ff16604e1480156126d45750600480871614155b80156126e35750600280871614155b8061271d57508360ff16604d1480156126ff5750600480871614155b801561270e5750600280871614155b801561271d5750600180871614155b156127315760059650856008179550612736565b600196505b50600190920191612473565b505050509550959350505050565b90600160401b820490600160801b830490600160ff1b840490565b600160ff1b6001600160401b03938416928416600160401b0291909316600160801b0201010190565b60008060006127a285612750565b5050915091506000806127b486612750565b5091935091505081840360070b60008112156127ce576000035b81840360070b60008112156127e1576000035b6001603f1b8213156127f75781600160401b0391505b6001603f1b81131561280a57600160401b035b8082131561281f5750945061282c9350505050565b955061282c945050505050565b92915050565b604080516020808201859052818301849052603360f91b6060830152825180830360410181526061830184528051908201206081830186905260a18301859052606760f81b60c1840152835160a281850301815260c2909301909352815191012060009182916128ac918691600991829006919006612b2b565b946001945092505050565b600081815260016020526040812054600160401b90046001600160401b0316806128e5576000915050611046565b60055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b15801561293957600080fd5b505afa15801561294d573d6000803e3d6000fd5b505050506040513d602081101561296357600080fd5b505190508061297757600092505050611046565b6000848152600160208190526040909120546001600160401b0380821690851614916129b291879185918590600160d01b900460ff16612b62565b95945050505050565b600954604080516331a9108f60e11b815260048101849052905160009283926001600160a01b0390911691636352211e91602480820192602092909190829003018186803b158015612a0c57600080fd5b505afa158015612a20573d6000803e3d6000fd5b505050506040513d6020811015612a3657600080fd5b50516001600160a01b03163014915050919050565b61ffff60e882901c81169260ff60e084901c169260f881901c9260d082901c81169260c083901c9091169163ffffffff1690565b6000806000612a8d84612750565b5050915091506000198260070b12158015612aad57506000198160070b12155b8015612abd575060018260070b13155b8015612acd575060018160070b13155b949350505050565b6000806000612ae384612750565b50509150915060008260070b1215612afc578160000391505b60008160070b1215612b0c576000035b8060070b8260070b1315612b2257509050611046565b91506110469050565b600080600080612b3a87612750565b50925092509250611b0c8660ff1660048560090203018660ff1660048560090203018361276b565b600060ff8216600114612b77575060006129b2565b600f8315612b8357600a015b6040805160208082018a9052818301899052600360f91b6060830152825180830360410181526061909201909252805191012060ff82166064909106108015612c0f576040805160208082018b90528183018a9052600760f81b60608301528251604181840301815260619092019092528051910120869081612c0257fe5b06600101925050506129b2565b506000979650505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604051806101600160405280600b906020820280368337509192915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fea264697066735822122026ee1a26696c769e51f23883a41ae4e5f44e059140ebe934712647c7ead04bbf64736f6c63430006050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ce90ec2146100515780632227990014610070578063d0604dd714610097578063f474541f146100b4575b600080fd5b61006e6004803603602081101561006757600080fd5b503561017d565b005b61006e6004803603604081101561008657600080fd5b508035906020013561ffff1661046e565b61006e600480360360208110156100ad57600080fd5b5035610710565b61006e600480360360608110156100ca57600080fd5b813591908101906040810160208201356401000000008111156100ec57600080fd5b8201836020820111156100fe57600080fd5b8035906020019184602083028401116401000000008311171561012057600080fd5b91939092909160208101903564010000000081111561013e57600080fd5b82018360208201111561015057600080fd5b8035906020019184602083028401116401000000008311171561017257600080fd5b509092509050610ae9565b600a546001600160a01b031633146101d3576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b5050506000828152602081905260409020805490915061025690610c00565b61025e612c1d565b61026783610f72565b90506009816020015161ffff16106102be576040805162461bcd60e51b81526020600482015260156024820152746f6e6c792039206c6576656c7320666f72206e6f7760581b604482015290519081900360640190fd5b6000816080015161ffff1611610314576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60208101805160010161ffff1690819052600090819081906103359061104b565b60608701805160ff83160161ffff90811691829052608089019190915260408801519396509194509250841663ffffffff90911610156103ac576040805162461bcd60e51b815260206004820152600d60248201526c06e6f7420656e6f75676820787609c1b604482015290519081900360640190fd5b6007546040805163c9b902e360e01b815260048101899052600660248201526044810185905290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506104298685611116565b6020808501516040805161ffff90921682525188927ff9c0df78f5971a6ba2a9b0be5ece0fa71b8c42571ddc8c7cebc6807816bdc773928290030190a2505050505050565b600a546001600160a01b031633146104c4576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b60008161ffff161161051d576040805162461bcd60e51b815260206004820152601a60248201527f796f75206861766520746f206865616c20736f6d657468696e67000000000000604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505061058d612c1d565b61059683610f72565b90506000816080015161ffff16116105ee576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60008381526020819052604090205461060681610c00565b600081815260016020526040902054600160d01b900460ff16600314610673576040805162461bcd60e51b815260206004820152601760248201527f63757272656e7420726f6f6d206e6f742074656d706c65000000000000000000604482015290519081900360640190fd5b600061068c836080015184606001518661ffff166111d7565b9050600061069f84608001518303611223565b90506106ae868460068461122a565b61ffff821660808501526106c28685611116565b857fb572bcfe7c1f09d996241a68f1d4c1eac6f97533ddff5bdf47aaa2ac9730292a85608001518403604051808261ffff1661ffff16815260200191505060405180910390a2505050505050565b600a546001600160a01b03163314610766576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050600082815260208190526040902080549091506107e981610c00565b6107f1612c1d565b6107fa84610f72565b9050806080015161ffff16600014610851576040805162461bcd60e51b815260206004820152601560248201527418da185c9858dd195c881a5cc81b9bdd0819195859605a1b604482015290519081900360640190fd5b60065460408051630607176160e31b81526004810187905290516000926001600160a01b031691633038bb08916024808301926020929190829003018186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d60208110156108c757600080fd5b505160065460408051637fbddc4760e01b81526004810189905260006024820181905291519394506001600160a01b0390921692637fbddc4792604480820193929182900301818387803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b50506006546040805163140e25ad60e31b815260006004820181905291519194506001600160a01b03909216925063a0712d689160248082019260209290919082900301818787803b15801561098757600080fd5b505af115801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b505160208401519091506000906109c79061104b565b505061ffff8082166040870152606086015116608086015290506109eb8285611116565b6109f482611483565b600186810154600084815260208190526040808220909301805468ffffffffffffffff0019166001600160401b0361010094859004600790810b900b169093029290921790915560065482516323b872dd60e01b81523060048201526001600160a01b03878116602483015260448201879052935193909116926323b872dd9260648084019391929182900301818387803b158015610a9257600080fd5b505af1158015610aa6573d6000803e3d6000fd5b50506040805185815290518a93507f9864b8944e5b257db2545835b30ecab5f0bb520af28a793c225ce15f52e64bce92509081900360200190a250505050505050565b600a546001600160a01b03163314610b3f576040805162461bcd60e51b81526020600482015260146024820152731bdb9b1e481c1b185e595c9cc8185b1b1bddd95960621b604482015290519081900360640190fd5b610b47612c1d565b610b5086610f72565b90506000816080015161ffff1611610ba8576040805162461bcd60e51b81526020600482015260166024820152751e5bdd5c8818da185c9858dd195c881a5cc81919585960521b604482015290519081900360640190fd5b60005b84811015610bf757610bef8783602001518460000151898986818110610bcd57fe5b90506020020135888887818110610be057fe5b9050602002013560ff166115d1565b600101610bab565b50505050505050565b600081815260016020526040902080546001600160401b0316610c61576040805162461bcd60e51b81526020600482015260146024820152731c9bdbdb481b9bdd0818dc99585d1959081e595d60621b604482015290519081900360640190fd5b8054600160d01b900460ff16610f5c57600554815460408051634a83e9cd60e11b81526001600160401b039092166004830152516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b5051905080610d01575050610f6f565b610d0b838261195e565b815460009081908190610d49908790869060ff600160c01b8204811691600160d81b8104821691600160e01b8204811691600160e81b900416611a4e565b875460ff808416600160d01b0260ff60d01b19918616600160c81b0260ff60c81b199093169290921716178855919450925090506000610d8887611a7f565b600081815260026020526040902080549192509060ff8481166101009092041614610dc057805461ff00191661010060ff8516021781555b6040805187815260ff8088166020830152861681830152905189917f8850140926f0260fe1b422b7a0d93e7d5734e521eae9ac8969ed512cc3834515919081900360600190a2600082815260026020526040902054600188015460ff9091169015610f5457610e2d612c1d565b610e3a8960010154610f72565b9050600080610e4e8c8b8560000151611b17565b9150915060058460ff1611610ed85760075460018c0154604080516302acc94b60e01b8152600481019290925260ff8716602483015260448201849052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b505050505b60075460018c0154604080516302acc94b60e01b815260048101929092526006602483015260448201859052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b505050505050505b505050505050505b610f6d610f6883611a7f565b611c13565b505b50565b610f7a612c1d565b60065460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015610fc657600080fd5b505afa158015610fda573d6000803e3d6000fd5b505050506040513d6020811015610ff057600080fd5b5051905060008080808061100386611d80565b6040805160a08101825260ff909216825261ffff958616602083015263ffffffff9092169181019190915290831660608201529116608082015296505050505050505b919050565b6000806000611058612c4b565b50604080516101608101825260008152600a60208201526031918101919091526077606082015260d0608082015261014860a082015261020c60c082015261033a60e08201526104f5610100820152610e46610120820152611aee6101408201528061ffff8616600b81106110c957fe5b6020020151935060088561ffff1611156110e7576101ec925061110a565b600560038660010161ffff160a61ffff16816110ff57fe5b0460080161ffff1692505b600a9150509193909250565b600060a8826080015161ffff16901b60b8836060015161ffff16901b60c8846040015163ffffffff16901b60e8856020015161ffff16901b60f8866000015160ff16901b010101019050600660009054906101000a90046001600160a01b03166001600160a01b0316634848b1a584836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156111c357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b600080828561ffff160190508361ffff1660070b8160070b13156111fe578391505061121c565b60008160070b1361121357600091505061121c565b905061121c565b505b9392505050565b61ffff1690565b600061123584611db1565b90506001600160a01b038116156114085760058204801561138e57600754604080516311aa10fb60e01b815260048101899052600060248201819052604482018890526064820185905291516001600160a01b03909316926311aa10fb9260848084019391929182900301818387803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505060075460408051637f4c824d60e11b81523060048201526001600160a01b038781166024830152604482018a905260648201879052915191909216935063fe99049a9250608480830192600092919082900301818387803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50505050816001600160a01b0316857f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb8684604051808381526020018281526020019250505060405180910390a35b6007546040805163c9b902e360e01b81526004810189905260248101879052838603604482015290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b1580156113ea57600080fd5b505af11580156113fe573d6000803e3d6000fd5b505050505061147c565b6007546040805163c9b902e360e01b815260048101889052602481018690526044810185905290516001600160a01b039092169163c9b902e39160648082019260009290919082900301818387803b15801561146357600080fd5b505af1158015611477573d6000803e3d6000fd5b505050505b5050505050565b6000611497600080600f600a806001611e48565b905060006114ae60006001600f600a806004611e48565b60085460408051630d9778e560e11b8152600481018790526024810186905290519293506000926001600160a01b0390921691631b2ef1ca9160448082019260209290919082900301818787803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b505050506040513d602081101561153257600080fd5b505190506115448460008084816115d1565b60085460408051630d9778e560e11b8152600481018790526024810185905290516000926001600160a01b031691631b2ef1ca91604480830192602092919082900301818787803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050506040513d60208110156115c257600080fd5b5051905061147c856000808460015b6115d9612c6a565b6115e283611e9c565b90508461ffff16816000015161ffff16111561163b576040805162461bcd60e51b81526020600482015260136024820152720cecac2e44098caeccad840e8dede40d0d2ced606b1b604482015290519081900360640190fd5b8360ff16816040015160ff16901c60011660ff1660001415611694576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c696420636c61737360981b604482015290519081900360640190fd5b60ff821661170f57602081015160ff16156116f6576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c792061747461636b2067656172206f6e20736c6f742030000000000000604482015290519081900360640190fd5b600086815260208190526040902060020183905561190f565b8160ff166001141561179057806020015160ff16600114611777576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c7920646566656e73652067656172206f6e20736c6f7420310000000000604482015290519081900360640190fd5b600086815260208190526040902060030183905561190f565b8160ff166002141561181157806020015160ff166002146117f8576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742032000000000000604482015290519081900360640190fd5b600086815260208190526040902060040183905561190f565b8160ff166003141561189257806020015160ff16600214611879576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742033000000000000604482015290519081900360640190fd5b600086815260208190526040902060050183905561190f565b8160ff166004141561190f57806020015160ff166002146118fa576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c79206163636573736f72696573206f6e20736c6f742034000000000000604482015290519081900360640190fd5b60008681526020819052604090206006018390555b6020808201516040805189815292830186905260ff90911682820152517f9661c1f94255e8f19fda183859db8ad335498fb1e361acc4bd925a68d1bcaf819181900360600190a1505050505050565b600061196983611a7f565b60008181526002602052604090205490915060ff1680611a4857600354600160401b90046001600160401b03166119a1838583611f7d565b6000848152600260205260409020805460ff191660ff831690811790915590925060061461147c57600354620143704204906001600160401b03808316911614611a1c5760038054600160401b67ffffffffffffffff199091166001600160401b0384161767ffffffffffffffff60401b1916179055611a45565b6003805467ffffffffffffffff60401b1916600160401b600185016001600160401b0316021790555b50505b50505050565b6000806000611a5e89898961205e565b9250611a6d8989888888612423565b939a9099509297509195505050505050565b600080600080611a8e85612750565b509250925092506000808460070b12611ab1575060096004840160070b05611acb565b60098460000360040160070b81611ac457fe5b0560000390505b6000808460070b12611ae7575060096004840160070b05611b01565b60098460000360040160070b81611afa57fe5b0560000390505b611b0c82828561276b565b979650505050505050565b6000806000611b27866000612794565b90506019810480611b36575060015b6040805160208082018a9052818301899052601960fa1b60608301528251604181840301815260619092019092528051910120819081611b7257fe5b066002820401925082611b8457600192505b600260ff86161415611b995760048304830192505b6008811115611ba6575060085b6040805160208082018a9052818301899052606560f81b60608301528251604181840301815260619092019092528051910120819081611be257fe5b066002820401935083611bf457600193505b600160ff86161415611c095760048404840193505b5050935093915050565b6000818152600260208190526040909120908101546001600160401b03168015611d7b5760055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015611c8b57600080fd5b505afa158015611c9f573d6000803e3d6000fd5b505050506040513d6020811015611cb557600080fd5b5051905080611cc657505050610f6f565b600080611cd38684612832565b915091506000611ce2836128b7565b60008481526001602052604090206002810154919250906001600160401b0316158015611d1e57508054600160801b90046001600160401b0316155b8015611d28575081155b8015611d3e57508054600160d01b900460ff1615155b15611d625760028101805467ffffffffffffffff19166001600160401b0385161790555b50505060028401805467ffffffffffffffff1916905550505b505050565b61ffff60e882901c81169260a883901c82169260b881901c9092169163ffffffff60c882901c169160f89190911c90565b6000611dbc826129bb565b15611e4057600954604080516369f648a160e01b81526004810185905290516001600160a01b03909216916369f648a191602480820192602092909190829003018186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d6020811015611e3757600080fd5b50519050611046565b506000611046565b6001600160f81b031960f885901b1661ffff60e81b60e888901b160160ff60e01b60e087901b160161ffff60d01b60d085901b160161ffff60c01b60c084901b160163ffffffff8216019695505050505050565b611ea4612c6a565b60085460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015611ef057600080fd5b505afa158015611f04573d6000803e3d6000fd5b505050506040513d6020811015611f1a57600080fd5b5051905060008080808080611f2e87612a4b565b6040805160c08101825261ffff978816815260ff968716602082015294909516948401949094529084166060830152909216608083015263ffffffff1660a08201529998505050505050505050565b6000611f8884612a7f565b80611f9d5750600a6001600160401b03831610155b15611faa5750600661121c565b6000611fb585612ad5565b6009026001600160401b031690506000811115611fd157600319015b6019811061205357604080516020808201889052818301879052600360fa1b60608301528251604181840301815260619092019092528051910120606461271090910660ff161180159061204857600061202a87612750565b509250505060058160070b8161203c57fe5b0760010193505061204d565b600692505b5061121a565b506006949350505050565b600080600460ff841614156120755750600f61225d565b604080516020808201889052818301879052600160f81b606083015282516041818403018152606190920190925280519101206064900660ff16605711156120c0575060ff821660020a5b604080516020808201889052818301879052600160f91b606083015282516041818403018152606190920190925280519101206064900660ff166028111561225d57604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16601911156121875760ff831615806121575750600260ff8416145b1561216457600a17612182565b600160ff841614806121795750600360ff8416145b15612182576005175b61225d565b604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16603211156122155760ff83166121d957600817612182565b600160ff841614156121ed57600117612182565b600260ff8416141561220157600217612182565b600360ff841614156121825760041761225d565b60ff83166122255760021761225d565b600160ff841614156122395760041761225d565b600260ff8416141561224d5760081761225d565b600360ff8416141561225d576001175b604080516020808201889052818301879052606f60f81b60608301528251808303604101815260619092019092528051910120606490066000603c60ff8316106122bb57605a60ff8316106122b35760026122b6565b60015b6122be565b60005b905060048160ff16106122d6578260f0179250612418565b8060ff1660031415612350576040805160208082018a9052818301899052600760fc1b606083015282518083036041018152606190920190925280519101206003166001810160070260ff811660151415612336578460d0179450612349565b8060ff16601c1415612349578460b01794505b5050612418565b8060ff16600214156123ca576040805160208082018a9052818301899052600760fc1b60608301528251808303604101815260619092019092528051910120600690066001810160030260ff8116600f14156123b157846050179450612349565b8060ff1660121415612349578460a01794505050612418565b8060ff1660011415612418576040805160208082018a9052818301899052600760fc1b6060830152825160418184030181526061909201909252805191012060031660020a60100292909217915b509095945050505050565b600080600061243188611a7f565b8692509050846000806124438b612750565b5050915091508160070b600014801561245f57508060070b6000145b156124735760029550846001179450612742565b8660ff168360ff16116127425760408051602080820187905260f886901b6001600160f81b03191682840152604182018d9052600360f81b60618301528251808303604201815260629092019092528051910120601490066001868116148015906124ec575060ff811615806124ec57508360ff166050145b156125005760029650856001179550612736565b60028087161480159061253f57508060ff166001148061252357508360ff166050145b8061253f57508360ff16604f14801561253f5750600180871614155b156125535760039650856002179550612736565b6004808716148015906125d957508060ff166002148061257657508360ff166050145b8061259257508360ff16604f1480156125925750600180871614155b806125ae57508360ff16604f1480156125ae5750600280871614155b806125d957508360ff16604e1480156125ca5750600180871614155b80156125d95750600280871614155b156125eb576004965094861794612736565b60088087161480159061271d57508060ff166003148061260e57508360ff166050145b8061262a57508360ff16604f14801561262a5750600180871614155b8061264657508360ff16604f1480156126465750600280871614155b8061266257508360ff16604f1480156126625750600480871614155b8061268d57508360ff16604e14801561267e5750600180871614155b801561268d5750600280871614155b806126b857508360ff16604e1480156126a95750600180871614155b80156126b85750600480871614155b806126e357508360ff16604e1480156126d45750600480871614155b80156126e35750600280871614155b8061271d57508360ff16604d1480156126ff5750600480871614155b801561270e5750600280871614155b801561271d5750600180871614155b156127315760059650856008179550612736565b600196505b50600190920191612473565b505050509550959350505050565b90600160401b820490600160801b830490600160ff1b840490565b600160ff1b6001600160401b03938416928416600160401b0291909316600160801b0201010190565b60008060006127a285612750565b5050915091506000806127b486612750565b5091935091505081840360070b60008112156127ce576000035b81840360070b60008112156127e1576000035b6001603f1b8213156127f75781600160401b0391505b6001603f1b81131561280a57600160401b035b8082131561281f5750945061282c9350505050565b955061282c945050505050565b92915050565b604080516020808201859052818301849052603360f91b6060830152825180830360410181526061830184528051908201206081830186905260a18301859052606760f81b60c1840152835160a281850301815260c2909301909352815191012060009182916128ac918691600991829006919006612b2b565b946001945092505050565b600081815260016020526040812054600160401b90046001600160401b0316806128e5576000915050611046565b60055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b15801561293957600080fd5b505afa15801561294d573d6000803e3d6000fd5b505050506040513d602081101561296357600080fd5b505190508061297757600092505050611046565b6000848152600160208190526040909120546001600160401b0380821690851614916129b291879185918590600160d01b900460ff16612b62565b95945050505050565b600954604080516331a9108f60e11b815260048101849052905160009283926001600160a01b0390911691636352211e91602480820192602092909190829003018186803b158015612a0c57600080fd5b505afa158015612a20573d6000803e3d6000fd5b505050506040513d6020811015612a3657600080fd5b50516001600160a01b03163014915050919050565b61ffff60e882901c81169260ff60e084901c169260f881901c9260d082901c81169260c083901c9091169163ffffffff1690565b6000806000612a8d84612750565b5050915091506000198260070b12158015612aad57506000198160070b12155b8015612abd575060018260070b13155b8015612acd575060018160070b13155b949350505050565b6000806000612ae384612750565b50509150915060008260070b1215612afc578160000391505b60008160070b1215612b0c576000035b8060070b8260070b1315612b2257509050611046565b91506110469050565b600080600080612b3a87612750565b50925092509250611b0c8660ff1660048560090203018660ff1660048560090203018361276b565b600060ff8216600114612b77575060006129b2565b600f8315612b8357600a015b6040805160208082018a9052818301899052600360f91b6060830152825180830360410181526061909201909252805191012060ff82166064909106108015612c0f576040805160208082018b90528183018a9052600760f81b60608301528251604181840301815260619092019092528051910120869081612c0257fe5b06600101925050506129b2565b506000979650505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604051806101600160405280600b906020820280368337509192915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fea264697066735822122026ee1a26696c769e51f23883a41ae4e5f44e059140ebe934712647c7ead04bbf64736f6c63430006050033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2873,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_characters",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Character)2856_storage)"
      },
      {
        "astId": 2877,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_rooms",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Room)2839_storage)"
      },
      {
        "astId": 2881,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_areas",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Area)2869_storage)"
      },
      {
        "astId": 2888,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_areaCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AreaCounter)2886_storage"
      },
      {
        "astId": 2890,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_adminContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2892,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_blockHashRegister",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(BlockHashRegister)13120"
      },
      {
        "astId": 2894,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_charactersContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Characters)469"
      },
      {
        "astId": 2896,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_elementsContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(Elements)12803"
      },
      {
        "astId": 2898,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_gearsContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(Gears)12822"
      },
      {
        "astId": 2900,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_roomsContract",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(Rooms)12889"
      },
      {
        "astId": 2902,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_playerContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(Player)10671"
      },
      {
        "astId": 2910,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_unlockedExits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))"
      },
      {
        "astId": 2921,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_quests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint64,t_struct(Quest)2915_storage))"
      },
      {
        "astId": 2925,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_taxDueDate",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2929,
        "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
        "label": "_customRoomNames",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BlockHashRegister)13120": {
        "encoding": "inplace",
        "label": "contract BlockHashRegister",
        "numberOfBytes": "20"
      },
      "t_contract(Characters)469": {
        "encoding": "inplace",
        "label": "contract Characters",
        "numberOfBytes": "20"
      },
      "t_contract(Elements)12803": {
        "encoding": "inplace",
        "label": "contract Elements",
        "numberOfBytes": "20"
      },
      "t_contract(Gears)12822": {
        "encoding": "inplace",
        "label": "contract Gears",
        "numberOfBytes": "20"
      },
      "t_contract(Player)10671": {
        "encoding": "inplace",
        "label": "contract Player",
        "numberOfBytes": "20"
      },
      "t_contract(Rooms)12889": {
        "encoding": "inplace",
        "label": "contract Rooms",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint64,t_struct(Quest)2915_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint64 => struct DungeonDataLayout.Quest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_struct(Quest)2915_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Area)2869_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Area)",
        "numberOfBytes": "32",
        "value": "t_struct(Area)2869_storage"
      },
      "t_mapping(t_uint256,t_struct(Character)2856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)2856_storage"
      },
      "t_mapping(t_uint256,t_struct(Room)2839_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Room)",
        "numberOfBytes": "32",
        "value": "t_struct(Room)2839_storage"
      },
      "t_mapping(t_uint64,t_struct(Quest)2915_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct DungeonDataLayout.Quest)",
        "numberOfBytes": "32",
        "value": "t_struct(Quest)2915_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Area)2869_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Area",
        "members": [
          {
            "astId": 2858,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "areaType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2860,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "discovered",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2862,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "lastRoomIndex",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2864,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "currentIndex",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2866,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "lastRoom",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "eventBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AreaCounter)2886_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.AreaCounter",
        "members": [
          {
            "astId": 2883,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2885,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "numAreas",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Character)2856_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Character",
        "members": [
          {
            "astId": 2841,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "location",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2843,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "direction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 2845,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "floors",
            "offset": 1,
            "slot": "1",
            "type": "t_int64"
          },
          {
            "astId": 2847,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "slot_1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2849,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "slot_2",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2851,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "slot_3",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2853,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "slot_4",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2855,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "slot_5",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Quest)2915_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Quest",
        "members": [
          {
            "astId": 2912,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2914,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Room)2839_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Room",
        "members": [
          {
            "astId": 2818,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2820,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "monsterBlockNumber",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2822,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "numActiveCharacters",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2824,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "direction",
            "offset": 24,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2826,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "exits",
            "offset": 25,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2828,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "kind",
            "offset": 26,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2830,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "areaAtDiscovery",
            "offset": 27,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2832,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "lastRoomIndex",
            "offset": 28,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2834,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "index",
            "offset": 29,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2836,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "discoverer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2838,
            "contract": "src/dungeon/DungeonCharacterFacet.sol:DungeonCharacterFacet",
            "label": "randomEvent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}