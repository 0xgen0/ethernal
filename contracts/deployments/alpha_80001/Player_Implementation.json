{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Call",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEnergy",
          "type": "uint256"
        }
      ],
      "name": "Refill",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FOOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "addDelegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callAsCharacter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDelegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "class",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "createAndEnter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDelegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "class",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getEnergy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "energy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeEnergy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "getLastCharacterId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "getPlayerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "energy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeEnergy",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "isDelegateFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Characters",
          "name": "charactersContract",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        },
        {
          "internalType": "contract Pool",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refill",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "refillAccount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xBc1979815C2B642d71636A080AcF41757C3800C7",
    "contractAddress": "0x16cE9E80C00480bcA38C08fafC3735788409EB4a",
    "transactionIndex": 0,
    "gasUsed": "1175176",
    "logsBloom": "0x00400000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000800100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x5ebf1d88812d19d6a86fb2fc12cc8b911c0ba9dcfbf234672148546d1ed77ac4",
    "transactionHash": "0x6c838e6025ea0e87ea6f8c2776e482ed91d758fc1652c64dc60c758237f2f4ce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3389828,
        "transactionHash": "0x6c838e6025ea0e87ea6f8c2776e482ed91d758fc1652c64dc60c758237f2f4ce",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bc1979815c2b642d71636a080acf41757c3800c7",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000042cd0fc07500000000000000000000000000000000000000000000000000a40ab080feaf6ca00000000000000000000000000000000000000000000000051be2d83abbc985bdc00000000000000000000000000000000000000000000000a40a6db3eeeef7a00000000000000000000000000000000000000000000000051be31b07cb89fabdc",
        "logIndex": 0,
        "blockHash": "0x5ebf1d88812d19d6a86fb2fc12cc8b911c0ba9dcfbf234672148546d1ed77ac4"
      }
    ],
    "blockNumber": 3389828,
    "cumulativeGasUsed": "1175176",
    "status": 1,
    "byzantium": true
  },
  "address": "0x16cE9E80C00480bcA38C08fafC3735788409EB4a",
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEnergy\",\"type\":\"uint256\"}],\"name\":\"Refill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAsCharacter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDelegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"createAndEnter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDelegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getEnergy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeEnergy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getLastCharacterId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeEnergy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"isDelegateFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Characters\",\"name\":\"charactersContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"contract Pool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refillAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/player/Player.sol\":\"Player\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"buidler-deploy/solc_0.6/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract Proxied {\\n    modifier proxied() {\\n        address adminAddress;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n        if (adminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == adminAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7a52615923f87f723441805ffcd8f9e99625ae77ceed130c86f08a2e34970787\"},\"src/characters/Characters.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./CharactersDataLayout.sol\\\";\\n\\ncontract Characters is Proxied, CharactersDataLayout {\\n    event CharacterUpdate(uint256 indexed id, address indexed owner, uint256 data);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    function postUpgrade() external proxied {\\n        if (nextId == 0) {\\n            nextId = 1;\\n        }\\n    }\\n\\n    function getSubOwner(uint256 id) external view returns (uint256) {\\n        return _subOwner[id][_owners[id]];\\n    }\\n\\n    function setSubOwner(uint256 id, uint256 subOwner) external {\\n        require(msg.sender == _owners[id], \\\"only owner is able to set sub owner\\\");\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n    }\\n\\n    function _setSubOwnerFor(\\n        uint256 id,\\n        address owner,\\n        uint256 subOwner\\n    ) internal {\\n        // TODO emit SubOwnerTransferEvent\\n        _subOwner[id][owner] = subOwner;\\n    }\\n\\n    function mintTo(address to) external returns (uint256) {\\n        return _mint(to);\\n    }\\n\\n    // subowner is uint(address) of player currently\\n    // when subowner == 0 character is considered not in the dungeon\\n    function mint(uint256 subOwner) external returns (uint256) {\\n        uint256 id = _mint(msg.sender);\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n        return id;\\n    }\\n\\n    function _mint(address to) internal returns (uint256) {\\n        uint256 id = nextId++;\\n        _owners[id] = to;\\n        _numPerOwners[to]++;\\n        emit Transfer(address(0), to, id);\\n        return id;\\n    }\\n\\n    function getData(uint256 id) external view returns (uint256) {\\n        return _data[id][msg.sender];\\n    }\\n\\n    function getDataFor(uint256 id, address owner) external view returns (uint256) {\\n        return _data[id][owner];\\n    }\\n\\n    // TODO only dungeon should be able to set data\\n    // currently this can be called by the player when characters is outside of dungeon\\n    function setData(uint256 id, uint256 data) external {\\n        require(msg.sender == _ownerOf(id), \\\"only owner is allowed to set data\\\");\\n        _setDataFor(id, msg.sender, data);\\n    }\\n\\n    function _setDataFor(\\n        uint256 id,\\n        address owner,\\n        uint256 data\\n    ) internal {\\n        _data[id][owner] = data;\\n        emit CharacterUpdate(id, owner, data);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return _owners[id];\\n    }\\n\\n    function fullOwnerOf(uint256 id) external view returns (address owner, uint256 subOwner) {\\n        owner = _ownerOf(id);\\n        subOwner = _subOwner[id][owner];\\n    }\\n\\n    // EIP-721 Standard\\n    function ownerOf(uint256 id) external view returns (address tokenOwner) {\\n        tokenOwner = _ownerOf(id);\\n        require(tokenOwner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function balanceOf(address who) external view returns (uint256) {\\n        require(who != address(0), \\\"zero address\\\");\\n        return _numPerOwners[who];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"from is zero address\\\");\\n        address owner = _owners[id];\\n        require(owner == from, \\\"from is not owner\\\");\\n        _subOwner[id][owner] = 0;\\n        _owners[id] = to;\\n        _numPerOwners[from]--;\\n        _numPerOwners[to]++;\\n    }\\n\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        // TODO metadata || id == 0x5b5e139f;\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n}\\n\",\"keccak256\":\"0xdf591bd894e7d3c85ff5e211ff6bc8b7f5d92ad62871062e73696445f0b5042e\"},\"src/characters/CharactersDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract CharactersDataLayout {\\n    uint256 nextId;\\n    mapping(uint256 => address) _owners;\\n    mapping(address => uint256) _numPerOwners;\\n    mapping(uint256 => mapping(address => uint256)) _subOwner;\\n    mapping(uint256 => mapping(address => uint256)) _data;\\n}\\n\",\"keccak256\":\"0x07af58bd3f1cbde1a9e87e11f65505da0ef1377f26a9b41cee4750ffd0c9b894\"},\"src/player/Player.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./PlayerDataLayout.sol\\\";\\nimport \\\"../utils/MetaTransactionReceiver.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"../utils/Constants.sol\\\";\\n\\ncontract Player is Proxied, PlayerDataLayout, MetaTransactionReceiver, Constants {\\n    event Call(bool success, bytes returnData);\\n    event Refill(address indexed playerAddress, uint256 newEnergy);\\n\\n    function postUpgrade(\\n        Characters charactersContract,\\n        address payable feeRecipient,\\n        uint256 minBalance,\\n        Pool pool\\n    ) external proxied {\\n        // TODO _setTrustedForwarder(...);\\n        _charactersContract = charactersContract;\\n        _feeRecipient = feeRecipient;\\n        MIN_BALANCE = minBalance;\\n        _pool = pool;\\n        pool.register();\\n    }\\n\\n    function register() external {\\n        if (msg.sender != address(_holder)) {\\n            require(address(_holder) == address(0), \\\"holder already set\\\");\\n            _holder = Enterable(msg.sender);\\n        }\\n    }\\n\\n    function getLastCharacterId(address playerAddress) external view returns (uint256) {\\n        return _lastCharacterIds[playerAddress];\\n    }\\n\\n    function getEnergy(address playerAddress) external view returns (uint256 energy, uint256 freeEnergy) {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    // TODO remove ?\\n    function getPlayerInfo(address playerAddress, uint256 characterId)\\n        external\\n        view\\n        returns (uint256 energy, uint256 freeEnergy)\\n    {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    function createAndEnter(\\n        address payable newDelegate,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        uint256 characterId = _charactersContract.mintTo(address(_holder));\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function enter(\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        _charactersContract.transferFrom(sender, address(_holder), characterId);\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function _enter(\\n        address payable sender,\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string memory name,\\n        uint8 class,\\n        uint256 location\\n    ) internal {\\n        require(msg.value >= value, \\\"msg.value < value\\\");\\n        if (msg.value > value) {\\n            _refill(sender, sender, msg.value - value);\\n        }\\n        if (newDelegate != address(0)) {\\n            _addDelegate(sender, newDelegate);\\n        }\\n        _holder.enter.value(value)(sender, characterId, name, class, location);\\n        _lastCharacterIds[sender] = characterId;\\n    }\\n\\n    function callAsCharacter(\\n        address destination,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData) {\\n        address sender = _msgSender();\\n        // TODO check death ?\\n        require(destination != address(this), \\\"cannot call itself\\\");\\n        // TODO block data if == `enter(address sender, uint256 characterId, bytes data)`\\n        uint256 initialGas = gasleft();\\n        uint256 characterId = _getFirstParam(data);\\n        require(_charactersContract.ownerOf(characterId) == address(_holder), \\\"_holder does not own character\\\");\\n        uint256 playerAddress = _charactersContract.getSubOwner(characterId);\\n        if (uint256(sender) != playerAddress) {\\n            require(uint256(_delegates[sender]) == playerAddress, \\\"sender is not delegate of character's player\\\");\\n        }\\n\\n        (success, returnData) = _executeWithSpecificGas(destination, gasLimit, data);\\n\\n        Player storage player = _players[address(playerAddress)];\\n        uint256 energy = player.energy;\\n        uint256 txCharge = ((initialGas - gasleft()) + 10000) * tx.gasprice;\\n        uint256 freeEnergyFee = (txCharge * 10) / 100; // 10% extra is used for free energy\\n\\n        uint256 poolFee = txCharge * 10; // 1000% is used for UBF\\n\\n        require(energy >= freeEnergyFee + poolFee, \\\"not enough energy\\\");\\n        energy -= (freeEnergyFee + poolFee);\\n        _pool.recordCharge{value: poolFee}(sender, txCharge, poolFee);\\n\\n        if (msg.sender == sender) {\\n            // not metatx : use local private key so need to recharge local balance // TODO remove (once metatx is enabled)\\n            if (msg.sender.balance < MIN_BALANCE) {\\n                uint256 balanceToGive = MIN_BALANCE - msg.sender.balance;\\n                if (balanceToGive >= energy) {\\n                    balanceToGive = energy;\\n                    energy = 0;\\n                } else {\\n                    energy -= balanceToGive;\\n                }\\n\\n                if (balanceToGive > 0) {\\n                    msg.sender.transfer(balanceToGive);\\n                }\\n            }\\n        }\\n        player.freeEnergy += uint128(freeEnergyFee);\\n        player.energy = uint128(energy);\\n\\n        emit Call(success, returnData);\\n    }\\n\\n    function isDelegateFor(address delegate, address playerAddress) external view returns (bool) {\\n        return _delegates[delegate] == playerAddress;\\n    }\\n\\n    function refillAccount(address account) public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, account, msg.value);\\n    }\\n\\n    function refill() public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, sender, msg.value);\\n    }\\n\\n    function _refill(\\n        address payable sender,\\n        address account,\\n        uint256 value\\n    ) internal returns (uint256 refund) {\\n        uint128 energy = _players[account].energy;\\n        energy += uint128(value);\\n        if (energy > uint128(MAX_FOOD)) {\\n            energy = uint128(MAX_FOOD);\\n            refund = energy - MAX_FOOD;\\n        }\\n        _players[account].energy = energy;\\n        emit Refill(account, energy);\\n        if (refund > 0) {\\n            sender.transfer(refund);\\n        }\\n    }\\n\\n    // TODO add Events for Delegates\\n    function addDelegate(address payable _delegate) public payable {\\n        address payable sender = _msgSender();\\n        if (msg.value > 0) {\\n            _refill(sender, sender, msg.value);\\n        }\\n        _addDelegate(sender, _delegate);\\n    }\\n\\n    function _addDelegate(address sender, address payable _delegate) internal {\\n        require(_delegate != address(0), \\\"no zero address delegate\\\");\\n        require(_players[sender].energy >= uint128(MIN_BALANCE), \\\"not enough energy\\\");\\n        _players[sender].energy -= uint128(MIN_BALANCE);\\n        _delegate.transfer(MIN_BALANCE);\\n        _delegates[_delegate] = sender;\\n    }\\n\\n    function _getFirstParam(bytes memory data) internal pure returns (uint256) {\\n        if (data.length < 36) {\\n            return 0;\\n        }\\n        uint256 value;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value;\\n    }\\n\\n    function _executeWithSpecificGas(\\n        address to,\\n        uint256 gasLimit,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        (success, returnData) = to.call.gas(gasLimit)(data);\\n        assert(gasleft() > gasLimit / 63);\\n        // not enough gas provided, assert to throw all gas // TODO use EIP-1930\\n    }\\n}\\n\",\"keccak256\":\"0x68ad10c9793851f62ca8da96537c9e89c813290c6b1d5a19d3dc760dbfdeadb9\"},\"src/player/PlayerDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ninterface Enterable {\\n    // TODO generalize?\\n    function enter(\\n        address sender,\\n        uint256 characterId,\\n        string calldata data,\\n        uint8 class,\\n        uint256 location\\n    ) external payable;\\n}\\n\\ncontract PlayerDataLayout {\\n    uint256 internal MIN_BALANCE; // = 5000000000000000;\\n\\n    struct Player {\\n        uint128 energy;\\n        uint128 freeEnergy;\\n    }\\n\\n    address payable _feeRecipient;\\n    mapping(address => address) _delegates;\\n    mapping(address => Player) _players;\\n    mapping(address => uint256) _lastCharacterIds;\\n\\n    Characters _charactersContract;\\n    Enterable _holder;\\n\\n    Pool _pool;\\n}\\n\",\"keccak256\":\"0xb5c01a684a934ae4742d2cb686ab53ed1d8e72bb7d6231bf440811de6a01dbbb\"},\"src/player/Pool.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ninterface Pool {\\n    function register() external;\\n\\n    function recordCharge(\\n        address account,\\n        uint256 txCharge,\\n        uint256 poolFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x28dfcd73f5c9400c1da453ecc67fea0493bec7c463b27b0eb3b8ccb7979e1a35\"},\"src/utils/Constants.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract Constants {\\n    uint256 public constant MAX_FOOD = 400000000000000000;\\n}\\n\",\"keccak256\":\"0xaf0e49384bb233af73112ec81b17d1a71a68b528a01aa0afd6395506fc17675a\"},\"src/utils/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nabstract contract MetaTransactionReceiver {\\n    bytes32 constant FORWARDER_STORAGE_POSITION = 0xbda473cae6459373242ba82cd14b3b8493956b600be62b2478f52616c8a283de;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    function _msgSender() internal view returns (address payable sender) {\\n        sender = msg.sender;\\n        if (_isTrustedForwarder(sender)) {\\n            bytes memory data = msg.data;\\n            uint256 length = msg.data.length;\\n            assembly {\\n                sender := mload(add(data, length))\\n            }\\n        }\\n    }\\n\\n    function _isTrustedForwarder(address trustedForwarder) internal view returns(bool isTrustedForwarder) {\\n        address currentForwarder;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            currentForwarder := sload(\\n                FORWARDER_STORAGE_POSITION\\n            )\\n        }\\n        return currentForwarder == trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address trustedForwarder) internal {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(\\n                FORWARDER_STORAGE_POSITION,\\n                trustedForwarder\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x331029fe6dd9110f1655d42a32d0d698089923cf3ef38a3daab855745d776392\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061144e806100206000396000f3fe6080604052600436106100dd5760003560e01c8063752afa701161007f57806399888ac91161005957806399888ac914610474578063c23a2465146104b9578063e71bdf41146104f4578063ef7375451461051a576100dd565b8063752afa70146103615780638fc0f5eb146103ef5780639391c77a1461043b576100dd565b8063454d3fc1116100bb578063454d3fc1146101d75780634e0fb1f4146102ec578063538e075914610312578063572b6c051461031a576100dd565b80631aa3a008146100e25780631dbd3c62146100f95780633bda15e61461018e575b600080fd5b3480156100ee57600080fd5b506100f761052f565b005b6100f7600480360360c081101561010f57600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561014657600080fd5b82018360208201111561015857600080fd5b8035906020019184600183028401116401000000008311171561017a57600080fd5b919350915060ff81351690602001356105a9565b34801561019a57600080fd5b506100f7600480360360808110156101b157600080fd5b506001600160a01b0381358116916020810135821691604082013591606001351661067e565b3480156101e357600080fd5b50610269600480360360608110156101fa57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561022a57600080fd5b82018360208201111561023c57600080fd5b8035906020019184600183028401116401000000008311171561025e57600080fd5b509092509050610786565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102b0578181015183820152602001610298565b50505050905090810190601f1680156102dd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6100f76004803603602081101561030257600080fd5b50356001600160a01b0316610ca4565b6100f7610cc0565b34801561032657600080fd5b5061034d6004803603602081101561033d57600080fd5b50356001600160a01b0316610cdb565b604080519115158252519081900360200190f35b6100f7600480360360a081101561037757600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111640100000000831117156103db57600080fd5b919350915060ff8135169060200135610cee565b3480156103fb57600080fd5b506104226004803603602081101561041257600080fd5b50356001600160a01b0316610dc8565b6040805192835260208301919091528051918290030190f35b34801561044757600080fd5b506104226004803603604081101561045e57600080fd5b506001600160a01b038135169060200135610df8565b34801561048057600080fd5b506104a76004803603602081101561049757600080fd5b50356001600160a01b0316610e29565b60408051918252519081900360200190f35b3480156104c557600080fd5b5061034d600480360360408110156104dc57600080fd5b506001600160a01b0381358116916020013516610e44565b6100f76004803603602081101561050a57600080fd5b50356001600160a01b0316610e66565b34801561052657600080fd5b506104a7610e8f565b6006546001600160a01b031633146105a7576006546001600160a01b031615610594576040805162461bcd60e51b81526020600482015260126024820152711a1bdb19195c88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b600680546001600160a01b031916331790555b565b60006105b3610e9b565b600554600654604080516323b872dd60e01b81526001600160a01b0380861660048301529283166024820152604481018c905290519394509116916323b872dd9160648082019260009290919082900301818387803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506106748189898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150610eed9050565b5050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0381166106dd576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556106f2565b336001600160a01b038216146106f257600080fd5b600580546001600160a01b038088166001600160a01b0319928316179092556001805487841690831617905560008581556007805493861693909216831790915560408051630354740160e31b81529051631aa3a0089260048381019391929182900301818387803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050505050505050565b600060606000610794610e9b565b90506001600160a01b0387163014156107e9576040805162461bcd60e51b815260206004820152601260248201527131b0b73737ba1031b0b6361034ba39b2b63360711b604482015290519081900360640190fd5b60005a9050600061082f87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061107d92505050565b600654600554604080516331a9108f60e11b81526004810185905290519394506001600160a01b03928316939190921691636352211e916024808301926020929190829003018186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d60208110156108af57600080fd5b50516001600160a01b03161461090c576040805162461bcd60e51b815260206004820152601e60248201527f5f686f6c64657220646f6573206e6f74206f776e206368617261637465720000604482015290519081900360640190fd5b60055460408051630607176160e31b81526004810184905290516000926001600160a01b031691633038bb08916024808301926020929190829003018186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b505190506001600160a01b03841681146109ee576001600160a01b038085166000908152600260205260409020541681146109ee5760405162461bcd60e51b815260040180806020018281038252602c8152602001806113ed602c913960400191505060405180910390fd5b610a2f8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061109992505050565b6001600160a01b0383166000908152600360205260408120805493995091975090916001600160801b0316903a5a8703612710010290506000606482600a0281610a7557fe5b049050600a8202808201841015610ac7576040805162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820656e6572677960781b604482015290519081900360640190fd5b60075460408051632082fbcd60e21b81526001600160a01b038c811660048301526024820187905260448201859052915185850190970396919092169163820bef3491849160648082019260009290919082900301818588803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b5050505050886001600160a01b0316336001600160a01b03161415610bbf5760005433311015610bbf5760005433319003848110610b825750600093610b88565b80850394505b8015610bbd57604051339082156108fc029083906000818181858888f19350505050158015610bbb573d6000803e3d6000fd5b505b505b84546001600160801b03858116600160801b8084048316860183160291909216176001600160801b031916178555604080518c1515815260208082018381528d51938301939093528c517f9a55c85f4afdf6baca33ed6106a8754818254616412d5fcc558a6deb81e7a65f938f938f939092606084019185019080838360005b83811015610c57578181015183820152602001610c3f565b50505050905090810190601f168015610c845780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050505094509492505050565b6000610cae610e9b565b9050610cbb81833461115a565b505050565b6000610cca610e9b565b9050610cd781823461115a565b5050565b6000610ce682611251565b90505b919050565b6000610cf8610e9b565b6005546006546040805163755edd1760e01b81526001600160a01b0392831660048201529051939450600093919092169163755edd1791602480830192602092919082900301818787803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b5051604080516020601f89018190048102820181019092528781529192506106749184918b9185918c91908c908c90819084018382808284376000920191909152508c92508b9150610eed9050565b6001600160a01b03166000908152600360205260409020546001600160801b0380821692600160801b9092041690565b506001600160a01b03166000908152600360205260409020546001600160801b0380821692600160801b9092041690565b6001600160a01b031660009081526004602052604090205490565b6001600160a01b03918216600090815260026020526040902054821691161490565b6000610e70610e9b565b90503415610e8557610e8381823461115a565b505b610cd78183611284565b67058d15e17628000081565b33610ea581611251565b15610eea5760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601519150505b90565b83341015610f36576040805162461bcd60e51b81526020600482015260116024820152706d73672e76616c7565203c2076616c756560781b604482015290519081900360640190fd5b83341115610f4d57610f4b878886340361115a565b505b6001600160a01b03861615610f6657610f668787611284565b60065460405163a23782b360e01b81526001600160a01b03898116600483019081526024830189905260ff861660648401526084830185905260a060448401908152875160a48501528751929094169363a23782b39389938d938c938b938b938b93929160c40190602087019080838360005b83811015610ff1578181015183820152602001610fd9565b50505050905090810190601f16801561101e5780820380516001836020036101000a031916815260200191505b5096505050505050506000604051808303818588803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b5050506001600160a01b0390981660009081526004602052604090209590955550505050505050565b600060248251101561109157506000610ce9565b506024015190565b60006060846001600160a01b031684846040518082805190602001908083835b602083106110d85780518252601f1990920191602091820191016110b9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811461113b576040519150601f19603f3d011682016040523d82523d6000602084013e611140565b606091505b509092509050603f84045a1161115257fe5b935093915050565b6001600160a01b0382166000908152600360205260408120546001600160801b0390811683019067058d15e17628000090821611156111a257506000905067058d15e1762800005b6001600160a01b03841660008181526003602090815260409182902080546001600160801b0319166001600160801b038616908117909155825190815291517f5466efde3f6b866c1103aefb7dcd4d0ed7d35437128ee5fcd44762b00cd514b09281900390910190a28115611249576040516001600160a01b0386169083156108fc029084906000818181858888f19350505050158015611247573d6000803e3d6000fd5b505b509392505050565b7fbda473cae6459373242ba82cd14b3b8493956b600be62b2478f52616c8a283de546001600160a01b0391821691161490565b6001600160a01b0381166112df576040805162461bcd60e51b815260206004820152601860248201527f6e6f207a65726f20616464726573732064656c65676174650000000000000000604482015290519081900360640190fd5b600080546001600160a01b038416825260036020526040909120546001600160801b039182169116101561134e576040805162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820656e6572677960781b604482015290519081900360640190fd5b600080546001600160a01b0384811683526003602052604080842080546001600160801b031981166001600160801b0391821695909503169390931790925582549151908416926108fc831502929190818181858888f193505050501580156113bb573d6000803e3d6000fd5b506001600160a01b0390811660009081526002602052604090208054919092166001600160a01b031990911617905556fe73656e646572206973206e6f742064656c6567617465206f6620636861726163746572277320706c61796572a2646970667358221220ed6be824f190be4103bd7b30846377e719be5c12ffe1c36085933e866180c0e864736f6c63430006050033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063752afa701161007f57806399888ac91161005957806399888ac914610474578063c23a2465146104b9578063e71bdf41146104f4578063ef7375451461051a576100dd565b8063752afa70146103615780638fc0f5eb146103ef5780639391c77a1461043b576100dd565b8063454d3fc1116100bb578063454d3fc1146101d75780634e0fb1f4146102ec578063538e075914610312578063572b6c051461031a576100dd565b80631aa3a008146100e25780631dbd3c62146100f95780633bda15e61461018e575b600080fd5b3480156100ee57600080fd5b506100f761052f565b005b6100f7600480360360c081101561010f57600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561014657600080fd5b82018360208201111561015857600080fd5b8035906020019184600183028401116401000000008311171561017a57600080fd5b919350915060ff81351690602001356105a9565b34801561019a57600080fd5b506100f7600480360360808110156101b157600080fd5b506001600160a01b0381358116916020810135821691604082013591606001351661067e565b3480156101e357600080fd5b50610269600480360360608110156101fa57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561022a57600080fd5b82018360208201111561023c57600080fd5b8035906020019184600183028401116401000000008311171561025e57600080fd5b509092509050610786565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102b0578181015183820152602001610298565b50505050905090810190601f1680156102dd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6100f76004803603602081101561030257600080fd5b50356001600160a01b0316610ca4565b6100f7610cc0565b34801561032657600080fd5b5061034d6004803603602081101561033d57600080fd5b50356001600160a01b0316610cdb565b604080519115158252519081900360200190f35b6100f7600480360360a081101561037757600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111640100000000831117156103db57600080fd5b919350915060ff8135169060200135610cee565b3480156103fb57600080fd5b506104226004803603602081101561041257600080fd5b50356001600160a01b0316610dc8565b6040805192835260208301919091528051918290030190f35b34801561044757600080fd5b506104226004803603604081101561045e57600080fd5b506001600160a01b038135169060200135610df8565b34801561048057600080fd5b506104a76004803603602081101561049757600080fd5b50356001600160a01b0316610e29565b60408051918252519081900360200190f35b3480156104c557600080fd5b5061034d600480360360408110156104dc57600080fd5b506001600160a01b0381358116916020013516610e44565b6100f76004803603602081101561050a57600080fd5b50356001600160a01b0316610e66565b34801561052657600080fd5b506104a7610e8f565b6006546001600160a01b031633146105a7576006546001600160a01b031615610594576040805162461bcd60e51b81526020600482015260126024820152711a1bdb19195c88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b600680546001600160a01b031916331790555b565b60006105b3610e9b565b600554600654604080516323b872dd60e01b81526001600160a01b0380861660048301529283166024820152604481018c905290519394509116916323b872dd9160648082019260009290919082900301818387803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506106748189898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150610eed9050565b5050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0381166106dd576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556106f2565b336001600160a01b038216146106f257600080fd5b600580546001600160a01b038088166001600160a01b0319928316179092556001805487841690831617905560008581556007805493861693909216831790915560408051630354740160e31b81529051631aa3a0089260048381019391929182900301818387803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050505050505050565b600060606000610794610e9b565b90506001600160a01b0387163014156107e9576040805162461bcd60e51b815260206004820152601260248201527131b0b73737ba1031b0b6361034ba39b2b63360711b604482015290519081900360640190fd5b60005a9050600061082f87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061107d92505050565b600654600554604080516331a9108f60e11b81526004810185905290519394506001600160a01b03928316939190921691636352211e916024808301926020929190829003018186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d60208110156108af57600080fd5b50516001600160a01b03161461090c576040805162461bcd60e51b815260206004820152601e60248201527f5f686f6c64657220646f6573206e6f74206f776e206368617261637465720000604482015290519081900360640190fd5b60055460408051630607176160e31b81526004810184905290516000926001600160a01b031691633038bb08916024808301926020929190829003018186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b505190506001600160a01b03841681146109ee576001600160a01b038085166000908152600260205260409020541681146109ee5760405162461bcd60e51b815260040180806020018281038252602c8152602001806113ed602c913960400191505060405180910390fd5b610a2f8a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061109992505050565b6001600160a01b0383166000908152600360205260408120805493995091975090916001600160801b0316903a5a8703612710010290506000606482600a0281610a7557fe5b049050600a8202808201841015610ac7576040805162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820656e6572677960781b604482015290519081900360640190fd5b60075460408051632082fbcd60e21b81526001600160a01b038c811660048301526024820187905260448201859052915185850190970396919092169163820bef3491849160648082019260009290919082900301818588803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b5050505050886001600160a01b0316336001600160a01b03161415610bbf5760005433311015610bbf5760005433319003848110610b825750600093610b88565b80850394505b8015610bbd57604051339082156108fc029083906000818181858888f19350505050158015610bbb573d6000803e3d6000fd5b505b505b84546001600160801b03858116600160801b8084048316860183160291909216176001600160801b031916178555604080518c1515815260208082018381528d51938301939093528c517f9a55c85f4afdf6baca33ed6106a8754818254616412d5fcc558a6deb81e7a65f938f938f939092606084019185019080838360005b83811015610c57578181015183820152602001610c3f565b50505050905090810190601f168015610c845780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050505094509492505050565b6000610cae610e9b565b9050610cbb81833461115a565b505050565b6000610cca610e9b565b9050610cd781823461115a565b5050565b6000610ce682611251565b90505b919050565b6000610cf8610e9b565b6005546006546040805163755edd1760e01b81526001600160a01b0392831660048201529051939450600093919092169163755edd1791602480830192602092919082900301818787803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b5051604080516020601f89018190048102820181019092528781529192506106749184918b9185918c91908c908c90819084018382808284376000920191909152508c92508b9150610eed9050565b6001600160a01b03166000908152600360205260409020546001600160801b0380821692600160801b9092041690565b506001600160a01b03166000908152600360205260409020546001600160801b0380821692600160801b9092041690565b6001600160a01b031660009081526004602052604090205490565b6001600160a01b03918216600090815260026020526040902054821691161490565b6000610e70610e9b565b90503415610e8557610e8381823461115a565b505b610cd78183611284565b67058d15e17628000081565b33610ea581611251565b15610eea5760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601519150505b90565b83341015610f36576040805162461bcd60e51b81526020600482015260116024820152706d73672e76616c7565203c2076616c756560781b604482015290519081900360640190fd5b83341115610f4d57610f4b878886340361115a565b505b6001600160a01b03861615610f6657610f668787611284565b60065460405163a23782b360e01b81526001600160a01b03898116600483019081526024830189905260ff861660648401526084830185905260a060448401908152875160a48501528751929094169363a23782b39389938d938c938b938b938b93929160c40190602087019080838360005b83811015610ff1578181015183820152602001610fd9565b50505050905090810190601f16801561101e5780820380516001836020036101000a031916815260200191505b5096505050505050506000604051808303818588803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b5050506001600160a01b0390981660009081526004602052604090209590955550505050505050565b600060248251101561109157506000610ce9565b506024015190565b60006060846001600160a01b031684846040518082805190602001908083835b602083106110d85780518252601f1990920191602091820191016110b9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811461113b576040519150601f19603f3d011682016040523d82523d6000602084013e611140565b606091505b509092509050603f84045a1161115257fe5b935093915050565b6001600160a01b0382166000908152600360205260408120546001600160801b0390811683019067058d15e17628000090821611156111a257506000905067058d15e1762800005b6001600160a01b03841660008181526003602090815260409182902080546001600160801b0319166001600160801b038616908117909155825190815291517f5466efde3f6b866c1103aefb7dcd4d0ed7d35437128ee5fcd44762b00cd514b09281900390910190a28115611249576040516001600160a01b0386169083156108fc029084906000818181858888f19350505050158015611247573d6000803e3d6000fd5b505b509392505050565b7fbda473cae6459373242ba82cd14b3b8493956b600be62b2478f52616c8a283de546001600160a01b0391821691161490565b6001600160a01b0381166112df576040805162461bcd60e51b815260206004820152601860248201527f6e6f207a65726f20616464726573732064656c65676174650000000000000000604482015290519081900360640190fd5b600080546001600160a01b038416825260036020526040909120546001600160801b039182169116101561134e576040805162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820656e6572677960781b604482015290519081900360640190fd5b600080546001600160a01b0384811683526003602052604080842080546001600160801b031981166001600160801b0391821695909503169390931790925582549151908416926108fc831502929190818181858888f193505050501580156113bb573d6000803e3d6000fd5b506001600160a01b0390811660009081526002602052604090208054919092166001600160a01b031990911617905556fe73656e646572206973206e6f742064656c6567617465206f6620636861726163746572277320706c61796572a2646970667358221220ed6be824f190be4103bd7b30846377e719be5c12ffe1c36085933e866180c0e864736f6c63430006050033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10532,
        "contract": "src/player/Player.sol:Player",
        "label": "MIN_BALANCE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10539,
        "contract": "src/player/Player.sol:Player",
        "label": "_feeRecipient",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 10543,
        "contract": "src/player/Player.sol:Player",
        "label": "_delegates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10547,
        "contract": "src/player/Player.sol:Player",
        "label": "_players",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Player)10537_storage)"
      },
      {
        "astId": 10551,
        "contract": "src/player/Player.sol:Player",
        "label": "_lastCharacterIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10553,
        "contract": "src/player/Player.sol:Player",
        "label": "_charactersContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Characters)469"
      },
      {
        "astId": 10555,
        "contract": "src/player/Player.sol:Player",
        "label": "_holder",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Enterable)10530"
      },
      {
        "astId": 10557,
        "contract": "src/player/Player.sol:Player",
        "label": "_pool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(Pool)10573"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(Characters)469": {
        "encoding": "inplace",
        "label": "contract Characters",
        "numberOfBytes": "20"
      },
      "t_contract(Enterable)10530": {
        "encoding": "inplace",
        "label": "contract Enterable",
        "numberOfBytes": "20"
      },
      "t_contract(Pool)10573": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Player)10537_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PlayerDataLayout.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)10537_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Player)10537_storage": {
        "encoding": "inplace",
        "label": "struct PlayerDataLayout.Player",
        "members": [
          {
            "astId": 10534,
            "contract": "src/player/Player.sol:Player",
            "label": "energy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10536,
            "contract": "src/player/Player.sol:Player",
            "label": "freeEnergy",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}