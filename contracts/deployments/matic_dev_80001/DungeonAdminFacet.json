{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldLocation",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "path",
          "type": "uint256"
        }
      ],
      "name": "CharacterMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "monsterId",
          "type": "uint256"
        }
      ],
      "name": "Death",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gearId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "slotType",
          "type": "uint8"
        }
      ],
      "name": "Equip",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "hp",
          "type": "uint16"
        }
      ],
      "name": "Heal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newLevel",
          "type": "uint16"
        }
      ],
      "name": "LevelUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "QuestUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "areaLocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "RandomEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gearId",
          "type": "uint256"
        }
      ],
      "name": "Recycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadCharacterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCharacterId",
          "type": "uint256"
        }
      ],
      "name": "Resurrect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "exits",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "name": "RoomActualised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "direction",
          "type": "uint8"
        }
      ],
      "name": "RoomDiscovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoomIncome",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "RoomName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDueDate",
          "type": "uint256"
        }
      ],
      "name": "RoomTaxPay",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchMineVaultElements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monsterId",
          "type": "uint256"
        }
      ],
      "name": "characterDefeated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monsterId",
          "type": "uint256"
        },
        {
          "internalType": "int16",
          "name": "hpChange",
          "type": "int16"
        }
      ],
      "name": "characterEscaped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[8]",
          "name": "amounts",
          "type": "uint16[8]"
        }
      ],
      "name": "claimBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "internalType": "uint16[8]",
          "name": "income",
          "type": "uint16[8]"
        }
      ],
      "name": "generateRoomIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "monsterDefeated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blockHashRegister",
          "type": "address"
        },
        {
          "internalType": "contract Player",
          "name": "playerContract",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adminContract",
          "type": "address"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Characters",
          "name": "characters",
          "type": "address"
        },
        {
          "internalType": "contract Elements",
          "name": "elements",
          "type": "address"
        },
        {
          "internalType": "contract Gears",
          "name": "gears",
          "type": "address"
        },
        {
          "internalType": "contract Rooms",
          "name": "rooms",
          "type": "address"
        }
      ],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "teleportCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "monsterId",
          "type": "uint256"
        },
        {
          "internalType": "int16",
          "name": "hpChange",
          "type": "int16"
        },
        {
          "internalType": "uint16",
          "name": "xpGained",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "gearData",
          "type": "uint256"
        },
        {
          "internalType": "int64",
          "name": "durabilityChange",
          "type": "int64"
        },
        {
          "internalType": "int16[8]",
          "name": "balanceChange",
          "type": "int16[8]"
        }
      ],
      "name": "updateCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "character",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "updateQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "amountsPayed",
          "type": "uint256[8]"
        }
      ],
      "name": "updateRoomData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xC92aE171cb9AEfEbcB88cdB40ba508e81F30AE1b",
    "contractAddress": "0xf2E8ec9206B510B820EBE2330075841bd5E4aFbc",
    "transactionIndex": 0,
    "gasUsed": "3841501",
    "logsBloom": "0x
    "blockHash": "0xe03d8e49bed6511a8e862343660e1cd9fdb1a6f90b04bba98cc99631c0dacd99",
    "transactionHash": "0xfb1ddb289cbba98de5d96f8ff2d49b495be60a43d7473ac55222bf44fddd4118",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5102100,
        "transactionHash": "0xfb1ddb289cbba98de5d96f8ff2d49b495be60a43d7473ac55222bf44fddd4118",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c92ae171cb9aefebcb88cdb40ba508e81f30ae1b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000443d1fc08bea00000000000000000000000000000000000000000000000009460fb10587a0e000000000000000000000000000000000000000000000000056555778a5ef6fcb0500000000000000000000000000000000000000000000000945cb73e5c714f600000000000000000000000000000000000000000000000056559bb5c5affbb505",
        "logIndex": 0,
        "blockHash": "0xe03d8e49bed6511a8e862343660e1cd9fdb1a6f90b04bba98cc99631c0dacd99"
      }
    ],
    "blockNumber": 5102100,
    "cumulativeGasUsed": "3841501",
    "status": 1,
    "byzantium": true
  },
  "address": "0xf2E8ec9206B510B820EBE2330075841bd5E4aFbc",
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldLocation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"}],\"name\":\"CharacterMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monsterId\",\"type\":\"uint256\"}],\"name\":\"Death\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slotType\",\"type\":\"uint8\"}],\"name\":\"Equip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"}],\"name\":\"Heal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newLevel\",\"type\":\"uint16\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"QuestUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"areaLocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"RandomEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gearId\",\"type\":\"uint256\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadCharacterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCharacterId\",\"type\":\"uint256\"}],\"name\":\"Resurrect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"exits\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"RoomActualised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"RoomDiscovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoomIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"RoomName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDueDate\",\"type\":\"uint256\"}],\"name\":\"RoomTaxPay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMineVaultElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monsterId\",\"type\":\"uint256\"}],\"name\":\"characterDefeated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monsterId\",\"type\":\"uint256\"},{\"internalType\":\"int16\",\"name\":\"hpChange\",\"type\":\"int16\"}],\"name\":\"characterEscaped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[8]\",\"name\":\"amounts\",\"type\":\"uint16[8]\"}],\"name\":\"claimBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"internalType\":\"uint16[8]\",\"name\":\"income\",\"type\":\"uint16[8]\"}],\"name\":\"generateRoomIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"monsterDefeated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blockHashRegister\",\"type\":\"address\"},{\"internalType\":\"contract Player\",\"name\":\"playerContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminContract\",\"type\":\"address\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Characters\",\"name\":\"characters\",\"type\":\"address\"},{\"internalType\":\"contract Elements\",\"name\":\"elements\",\"type\":\"address\"},{\"internalType\":\"contract Gears\",\"name\":\"gears\",\"type\":\"address\"},{\"internalType\":\"contract Rooms\",\"name\":\"rooms\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"teleportCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monsterId\",\"type\":\"uint256\"},{\"internalType\":\"int16\",\"name\":\"hpChange\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"xpGained\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"gearData\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"durabilityChange\",\"type\":\"int64\"},{\"internalType\":\"int16[8]\",\"name\":\"balanceChange\",\"type\":\"int16[8]\"}],\"name\":\"updateCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"character\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"amountsPayed\",\"type\":\"uint256[8]\"}],\"name\":\"updateRoomData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/dungeon/DungeonAdminFacet.sol\":\"DungeonAdminFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"buidler-deploy/solc_0.6/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract Proxied {\\n    modifier proxied() {\\n        address adminAddress;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n        if (adminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == adminAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7a52615923f87f723441805ffcd8f9e99625ae77ceed130c86f08a2e34970787\"},\"buidler-deploy/solc_0.6/proxy/diamond/DiamondStorageContract.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\n// * from https://github.com/mudgen/Diamond/blob/8235e6b63b47aab08a81c6f73bfb7faafda79ca4/contracts/\\n\\n// modified to be an abstract\\n\\nabstract contract DiamondStorageContract {\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint64 slotsIndex, uint64 slotIndex\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // uint128 numSelectorsInSlot, uint128 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint256 selectorSlotsLength;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        // ds_slot = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n        assembly {\\n            ds_slot := 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ddce9c68aba45af0b56b560e6cb369bf53f5c08a25bd4b55ed522aae1c233ee\"},\"src/characters/Characters.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./CharactersDataLayout.sol\\\";\\n\\ncontract Characters is Proxied, CharactersDataLayout {\\n    event CharacterUpdate(uint256 indexed id, address indexed owner, uint256 data);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    function postUpgrade() external proxied {\\n        if (nextId == 0) {\\n            nextId = 1;\\n        }\\n    }\\n\\n    function getSubOwner(uint256 id) external view returns (uint256) {\\n        return _subOwner[id][_owners[id]];\\n    }\\n\\n    function setSubOwner(uint256 id, uint256 subOwner) external {\\n        require(msg.sender == _owners[id], \\\"only owner is able to set sub owner\\\");\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n    }\\n\\n    function _setSubOwnerFor(\\n        uint256 id,\\n        address owner,\\n        uint256 subOwner\\n    ) internal {\\n        // TODO emit SubOwnerTransferEvent\\n        _subOwner[id][owner] = subOwner;\\n    }\\n\\n    function mintTo(address to) external returns (uint256) {\\n        return _mint(to);\\n    }\\n\\n    // subowner is uint(address) of player currently\\n    // when subowner == 0 character is considered not in the dungeon\\n    function mint(uint256 subOwner) external returns (uint256) {\\n        uint256 id = _mint(msg.sender);\\n        _setSubOwnerFor(id, msg.sender, subOwner);\\n        return id;\\n    }\\n\\n    function _mint(address to) internal returns (uint256) {\\n        uint256 id = nextId++;\\n        _owners[id] = to;\\n        _numPerOwners[to]++;\\n        emit Transfer(address(0), to, id);\\n        return id;\\n    }\\n\\n    function getData(uint256 id) external view returns (uint256) {\\n        return _data[id][msg.sender];\\n    }\\n\\n    function getDataFor(uint256 id, address owner) external view returns (uint256) {\\n        return _data[id][owner];\\n    }\\n\\n    // TODO only dungeon should be able to set data\\n    // currently this can be called by the player when characters is outside of dungeon\\n    function setData(uint256 id, uint256 data) external {\\n        require(msg.sender == _ownerOf(id), \\\"only owner is allowed to set data\\\");\\n        _setDataFor(id, msg.sender, data);\\n    }\\n\\n    function _setDataFor(\\n        uint256 id,\\n        address owner,\\n        uint256 data\\n    ) internal {\\n        _data[id][owner] = data;\\n        emit CharacterUpdate(id, owner, data);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return _owners[id];\\n    }\\n\\n    function fullOwnerOf(uint256 id) external view returns (address owner, uint256 subOwner) {\\n        owner = _ownerOf(id);\\n        subOwner = _subOwner[id][owner];\\n    }\\n\\n    // EIP-721 Standard\\n    function ownerOf(uint256 id) external view returns (address tokenOwner) {\\n        tokenOwner = _ownerOf(id);\\n        require(tokenOwner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function balanceOf(address who) external view returns (uint256) {\\n        require(who != address(0), \\\"zero address\\\");\\n        return _numPerOwners[who];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"from is zero address\\\");\\n        address owner = _owners[id];\\n        require(owner == from, \\\"from is not owner\\\");\\n        _subOwner[id][owner] = 0;\\n        _owners[id] = to;\\n        _numPerOwners[from]--;\\n        _numPerOwners[to]++;\\n    }\\n\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        // TODO metadata || id == 0x5b5e139f;\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n}\\n\",\"keccak256\":\"0xdf591bd894e7d3c85ff5e211ff6bc8b7f5d92ad62871062e73696445f0b5042e\"},\"src/characters/CharactersDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract CharactersDataLayout {\\n    uint256 nextId;\\n    mapping(uint256 => address) _owners;\\n    mapping(address => uint256) _numPerOwners;\\n    mapping(uint256 => mapping(address => uint256)) _subOwner;\\n    mapping(uint256 => mapping(address => uint256)) _data;\\n}\\n\",\"keccak256\":\"0x07af58bd3f1cbde1a9e87e11f65505da0ef1377f26a9b41cee4750ffd0c9b894\"},\"src/dungeon/DungeonAdminFacet.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./DungeonFacetBase.sol\\\";\\nimport \\\"./PureDungeon.sol\\\";\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\ncontract DungeonAdminFacet is DungeonFacetBase {\\n    function postUpgrade(\\n        address blockHashRegister,\\n        Player playerContract,\\n        address payable owner,\\n        address adminContract\\n    ) external onlyOwner {\\n        _playerContract = playerContract;\\n        playerContract.register();\\n        _blockHashRegister = BlockHashRegister(blockHashRegister);\\n        _adminContract = adminContract;\\n    }\\n\\n    function forward(address to, bytes memory data) public payable onlyAdmin returns (bool success) {\\n        uint256 value = msg.value;\\n        assembly {\\n            success := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n        require(success, \\\"failed to forward\\\");\\n    }\\n\\n    function updateCharacter(\\n        uint256 characterId,\\n        uint256 monsterId,\\n        int16 hpChange,\\n        uint16 xpGained,\\n        uint256 gearData,\\n        int64 durabilityChange,\\n        int16[8] calldata balanceChange // 5 elements, coins, keys, fragments\\n    ) external onlyAdmin {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        _actualiseRoom(character.location);\\n        if (gearData > 0) {\\n            require(_gearsContract.subBalanceOf(characterId) < MAX_GEARS, \\\"Too many gears\\\");\\n            _gearsContract.mint(characterId, gearData);\\n        }\\n        for (uint8 i = 0; i < balanceChange.length; i++) {\\n            int16 change = balanceChange[i];\\n            if (change > 0) {\\n                _elementsContract.mint(characterId, i + 1, uint256(change));\\n            } else if (change < 0) {\\n                _elementsContract.subBurnFrom(characterId, i + 1, uint256(-change));\\n            }\\n        }\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        if (hpChange != 0) {\\n            characterData.hp = PureDungeon._limitedChange(characterData.hp, characterData.maxHP, hpChange);\\n            if (characterData.hp == 0) {\\n                emit Death(characterId, monsterId);\\n            }\\n        }\\n        characterData.xp += xpGained;\\n        _setCharacterData(characterId, characterData);\\n        if (durabilityChange != 0) {\\n            GearData memory attackGear = _getGearData(character.slot_1);\\n            if (attackGear.maxDurability != 0) {\\n                attackGear.durability = PureDungeon._limitedChange(\\n                    attackGear.durability,\\n                    attackGear.maxDurability,\\n                    durabilityChange\\n                );\\n                _setGearData(character.slot_1, attackGear);\\n                if (attackGear.durability == 0) {\\n                    _gearsContract.subBurn(character.slot_1);\\n                }\\n            }\\n            GearData memory defenseGear = _getGearData(character.slot_2);\\n            if (defenseGear.maxDurability != 0) {\\n                defenseGear.durability = PureDungeon._limitedChange(\\n                    defenseGear.durability,\\n                    defenseGear.maxDurability,\\n                    durabilityChange\\n                );\\n                _setGearData(character.slot_2, defenseGear);\\n                if (defenseGear.durability == 0) {\\n                    _gearsContract.subBurn(character.slot_2);\\n                }\\n            }\\n        }\\n    }\\n\\n    function claimBounty(uint256 location, uint256 characterId, uint16[8] calldata amounts) external onlyAdmin {\\n        uint256 bounty = PureDungeon._locationToBounty(location);\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                _elementsContract.subTransferFrom(bounty, characterId, i + 1, amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function updateRoomData(uint256 characterId, uint256 location, uint256 data, uint256[8] calldata amountsPayed) external onlyAdmin {\\n        require(_isRoomActive(location), 'room is not active');\\n        uint256 owner = _roomsContract.subOwnerOf(location);\\n        uint256 player = _charactersContract.getSubOwner(characterId);\\n        require(owner == player, \\\"not owner\\\");\\n        for (uint256 i = 0; i < amountsPayed.length; i++) {\\n            _elementsContract.transferFrom(address(owner), address(0), i+1, amountsPayed[i]);\\n        }\\n        _roomsContract.setData(location, data);\\n    }\\n\\n    function teleportCharacter(uint256 characterId, uint256 location) external onlyAdmin {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        uint256 oldLocation = character.location;\\n        _actualiseRoom(oldLocation);\\n        emit CharacterMoved(characterId, oldLocation, location, 1, PureDungeon.DOWN);\\n        (, ,int64 floor, ) = PureDungeon._coordinates(location);\\n        if (character.floors < floor) {\\n            character.floors = floor;\\n        }\\n        _move(characterId, location, PureDungeon.DOWN);\\n    }\\n\\n    function monsterDefeated(uint256 location) external onlyAdmin {\\n        _blockHashRegister.save();\\n        _actualiseRoom(location);\\n        Room storage room = _rooms[location];\\n        if (room.monsterBlockNumber != 0) {\\n            room.monsterBlockNumber = 0;\\n        }\\n        if (room.randomEvent != 0) {\\n            room.randomEvent = 0;\\n        }\\n        if (_roomsContract.getData(location) > 0) {\\n            _roomsContract.setData(location, 0);\\n        }\\n    }\\n\\n    function characterDefeated(uint256 characterId, uint256 monsterId) external onlyAdmin {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        _actualiseRoom(character.location);\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        characterData.hp = 0;\\n        _setCharacterData(characterId, characterData);\\n        emit Death(characterId, monsterId);\\n    }\\n\\n    function characterEscaped(\\n        uint256 characterId,\\n        uint256 monsterId,\\n        int16 hpChange\\n    ) external onlyAdmin {\\n        _blockHashRegister.save();\\n        Character storage character = _characters[characterId];\\n        uint256 location = character.location;\\n        _actualiseRoom(location);\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        int64 newHp = int64(characterData.hp) + int64(hpChange);\\n        if (newHp > int64(characterData.maxHP)) {\\n            characterData.hp = characterData.maxHP;\\n        }\\n        if (newHp <= 0) {\\n            emit Death(characterId, monsterId);\\n            characterData.hp = 0;\\n        } else {\\n            characterData.hp = uint16(newHp);\\n        }\\n        _setCharacterData(characterId, characterData);\\n        uint8 reverseDirection = (character.direction + 2) % 4;\\n        uint256 escapeTo = _moveTo(characterId, location, reverseDirection);\\n        emit CharacterMoved(characterId, character.location, escapeTo, 0, reverseDirection);\\n        _actualiseRoom(escapeTo);\\n        _rooms[character.location].numActiveCharacters--;\\n        _rooms[escapeTo].numActiveCharacters++;\\n        character.location = escapeTo;\\n        character.direction = reverseDirection;\\n    }\\n\\n    function updateQuest(uint256 character, uint64 id, uint8 status, string calldata data) external onlyAdmin {\\n        Quest storage quest = _quests[character][id];\\n        quest.status = status;\\n        quest.data = data;\\n        emit QuestUpdate(character, id, status, data);\\n    }\\n\\n    // TODO: remove when not needed\\n    function batchMineVaultElements(uint256 id, address[] calldata players, uint256[] calldata amounts) external onlyAdmin {\\n        for (uint256 i = 0; i < players.length; i++) {\\n            _elementsContract.mintVault(players[i], id, amounts[i]);\\n        }\\n    }\\n\\n    function generateRoomIncome(uint256 location, address benefactor, uint16[8] calldata income) external onlyAdmin {\\n        for (uint8 i = 0; i < income.length; i++) {\\n            uint256 id = i + 1;\\n            uint256 amount = uint256(income[i]);\\n            if (amount > 0) {\\n                _elementsContract.mintVault(benefactor, id, amount);\\n                emit RoomIncome(location, benefactor, id, amount);\\n            }\\n        }\\n    }\\n\\n    function start(\\n        Characters characters,\\n        Elements elements,\\n        Gears gears,\\n        Rooms rooms\\n    ) external onlyOwner {\\n        _charactersContract = characters;\\n        _elementsContract = elements;\\n        _gearsContract = gears;\\n        _roomsContract = rooms;\\n        Room storage room = _rooms[PureDungeon.LOCATION_ZERO];\\n        require(room.kind == 0, \\\"dungeon already started\\\");\\n        _discoverRoom(PureDungeon.LOCATION_ZERO, 0, PureDungeon.DOWN);\\n    }\\n}\\n\",\"keccak256\":\"0xb9fbf0ba3ef2e97be13ab0b4bd879fa8dc1ed5a14515950799a240cdb2950163\"},\"src/dungeon/DungeonDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../tokens/Rooms.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\ncontract DungeonDataLayout {\\n    struct Room {\\n        uint64 blockNumber;\\n        uint64 monsterBlockNumber;\\n        uint64 numActiveCharacters;\\n        uint8 direction;\\n        uint8 exits;\\n        uint8 kind;\\n        uint8 areaAtDiscovery;\\n        uint8 lastRoomIndex;\\n        uint8 index;\\n        uint256 discoverer;\\n        uint64 randomEvent;\\n    }\\n\\n    struct Character {\\n        uint256 location;\\n        uint8 direction;\\n        int64 floors;\\n        uint256 slot_1; // attack // TODO store this on character NFT ?\\n        uint256 slot_2; // defense // TODO store this on character NFT ?\\n        uint256 slot_3; // accessory 1 // TODO store this on character NFT ?\\n        uint256 slot_4; // accessory 2 // TODO store this on character NFT ?5\\n        uint256 slot_5; // accessory 3 // TODO store this on character NFT ?\\n    }\\n\\n    struct Area {\\n        uint8 areaType;\\n        uint8 discovered; // record room types already discovered : temple, teleport ...\\n        uint8 lastRoomIndex; // track what was the index of the room discovered first in last block\\n        uint8 currentIndex; // track the index of room discovered in the same block\\n        uint256 lastRoom; // last room disovered in a block, used for area blockHash too\\n        uint64 eventBlockNumber;\\n    }\\n\\n    mapping(uint256 => Character) _characters;\\n    mapping(uint256 => Room) _rooms;\\n    mapping(uint256 => Area) _areas;\\n\\n    struct AreaCounter {\\n        uint64 lastPeriod;\\n        uint64 numAreas;\\n    }\\n    AreaCounter _areaCounter;\\n\\n    address _adminContract;\\n    BlockHashRegister _blockHashRegister;\\n    Characters _charactersContract;\\n    Elements _elementsContract;\\n    Gears _gearsContract;\\n    Rooms _roomsContract;\\n    Player _playerContract;\\n\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => bool))) _unlockedExits;\\n\\n    struct Quest {\\n        uint8 status;\\n        string data;\\n    }\\n    mapping(uint256 => mapping(uint64 => Quest)) _quests; // _quests[character][id]\\n\\n    mapping(address => uint256) _taxDueDate;\\n\\n    mapping(uint256 => string) _customRoomNames;\\n}\\n\",\"keccak256\":\"0x9d189dba696ee5710f0cbb5c36e2ad3e3ac251c3263e1739c0e0c60772496c5e\"},\"src/dungeon/DungeonEvents.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract DungeonEvents {\\n    event RoomDiscovered(uint256 indexed location, uint64 blockNumber, uint8 direction);\\n    event RoomActualised(uint256 indexed location, bytes32 blockHash, uint8 exits, uint8 kind);\\n    event CharacterMoved(\\n        uint256 indexed characterId,\\n        uint256 indexed oldLocation,\\n        uint256 indexed newLocation,\\n        uint8 mode,\\n        uint256 path\\n    );\\n    event Enter(uint256 indexed characterId, address indexed player, string name);\\n    event Death(uint256 indexed characterId, uint256 monsterId);\\n    event LevelUp(uint256 indexed characterId, uint16 newLevel);\\n    event Equip(uint256 characterId, uint256 gearId, uint8 slotType);\\n    event Resurrect(uint256 indexed deadCharacterId, uint256 newCharacterId);\\n    event Heal(uint256 indexed characterId, uint16 hp);\\n    event RandomEvent(uint256 indexed areaLocation, uint64 blockNumber);\\n    event Recycle(uint256 indexed characterId, uint256 gearId);\\n    event QuestUpdate(uint256 indexed characterId, uint64 indexed id, uint8 indexed status, string data);\\n    event RoomTaxPay(address indexed owner, uint256 tax, uint256 newDueDate);\\n    event RoomIncome(uint256 indexed location, address indexed owner, uint256 id, uint256 amount);\\n    event RoomName(uint256 indexed location, string name, uint256 characterId);\\n}\\n\",\"keccak256\":\"0xe737adf71af0dc8563dbe62e7be657100e28ca7cfd81f5730c3ea14d666b9712\"},\"src/dungeon/DungeonFacetBase.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/diamond/DiamondStorageContract.sol\\\";\\nimport \\\"./DungeonDataLayout.sol\\\";\\nimport \\\"./DungeonEvents.sol\\\";\\nimport \\\"./PureDungeon.sol\\\";\\nimport \\\"../utils/BlockHashRegister.sol\\\";\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"../tokens/Elements.sol\\\";\\nimport \\\"../tokens/Gears.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\nabstract contract DungeonFacetBase is DungeonDataLayout, DungeonEvents, DiamondStorageContract {\\n    uint256 internal constant MAX_GEARS = 10;\\n\\n\\n    modifier onlyOwner() {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _adminContract, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == address(_playerContract), \\\"only players allowed\\\");\\n        _;\\n    }\\n\\n    function _actualiseRoom(uint256 location) internal {\\n        Room storage room = _rooms[location];\\n        require(room.blockNumber > 0, \\\"room not created yet\\\");\\n        if (room.kind == 0) {\\n            bytes32 blockHash = _blockHashRegister.get(room.blockNumber);\\n            if (blockHash == 0) {\\n                // skip as block is not actualised or not in register\\n                return;\\n            }\\n            _actualiseArea(location, blockHash);\\n            (uint8 exits, uint8 kind, uint8 area_discovered) = PureDungeon._generateRoom(\\n                location,\\n                blockHash,\\n                room.direction,\\n                room.areaAtDiscovery,\\n                room.lastRoomIndex,\\n                room.index\\n            );\\n            room.exits = exits;\\n            room.kind = kind;\\n            uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n            Area storage area = _areas[areaLoc];\\n            if (area.discovered != area_discovered) {\\n                area.discovered = area_discovered;\\n            }\\n            emit RoomActualised(location, blockHash, exits, kind);\\n            uint8 areaType = _areas[areaLoc].areaType;\\n            if (room.discoverer != 0) {\\n                CharacterData memory characterData = _getCharacterData(room.discoverer);\\n                (uint256 numGold, uint256 numElements) = PureDungeon._computeRoomDiscoveryReward(\\n                    location,\\n                    blockHash,\\n                    characterData.class\\n                );\\n                if (areaType <= 5) {\\n                    _elementsContract.mint(room.discoverer, areaType, numElements);\\n                }\\n                _elementsContract.mint(room.discoverer, 6, numGold);\\n            }\\n        }\\n        _actualiseRandomEvent(PureDungeon._getAreaLoc(location)); // room actualisation take precedence // monster\\n    }\\n\\n    function _actualiseArea(uint256 location, bytes32 blockHash) internal {\\n        uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n        uint8 areaType = _areas[areaLoc].areaType;\\n        if (areaType == 0) {\\n            uint64 currentNumAreas = _areaCounter.numAreas;\\n            areaType = PureDungeon._generateArea(areaLoc, blockHash, currentNumAreas);\\n            _areas[areaLoc].areaType = areaType;\\n            if (areaType != 6) {\\n                uint64 period = uint64(block.timestamp / 23 hours);\\n                if (_areaCounter.lastPeriod != period) {\\n                    _areaCounter.lastPeriod = period;\\n                    _areaCounter.numAreas = 1;\\n                } else {\\n                    _areaCounter.numAreas = currentNumAreas + 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    struct CharacterData {\\n        uint8 class;\\n        uint16 level;\\n        uint32 xp;\\n        uint16 maxHP;\\n        uint16 hp;\\n    }\\n\\n    function _setCharacterData(uint256 characterId, CharacterData memory characterData) internal {\\n        uint256 data = ((uint256(characterData.class) << 248) +\\n            (uint256(characterData.level) << 232) +\\n            (uint256(characterData.xp) << 200) +\\n            (uint256(characterData.maxHP) << 184) +\\n            (uint256(characterData.hp) << 168));\\n        _charactersContract.setData(characterId, data);\\n    }\\n\\n    function _getCharacterData(uint256 characterId) internal view returns (CharacterData memory) {\\n        uint256 data = _charactersContract.getData(characterId);\\n        (uint16 level, uint16 hp, uint16 maxHP, uint32 xp, uint8 class) = PureDungeon._decodeCharacterData(data);\\n        return CharacterData(class, level, xp, maxHP, hp);\\n    }\\n\\n    function _actualiseRandomEvent(uint256 areaLoc) internal {\\n        Area storage area = _areas[areaLoc];\\n        uint64 blockNumber = area.eventBlockNumber;\\n        if (blockNumber != 0) {\\n            bytes32 blockHash = _blockHashRegister.get(blockNumber);\\n            if (blockHash == 0) {\\n                // skip as block is not actualised or not in register\\n                return;\\n            }\\n            (uint256 roomLocation, uint64 randomEvent) = PureDungeon._generateRandomEvent(areaLoc, blockHash);\\n            uint256 monsterIndex = _checkMonsterBlockNumber(roomLocation);\\n            Room storage room = _rooms[roomLocation];\\n            if (room.randomEvent != 2\\n                && room.numActiveCharacters == 0\\n                && monsterIndex == 0\\n                && room.kind != 0\\n            ) {\\n                room.randomEvent = randomEvent;\\n            }\\n            area.eventBlockNumber = 0;\\n        }\\n    }\\n\\n    /// @dev to be valid it require the room to be actualised first\\n    function _checkMonster(uint256 location) internal view returns (uint256) {\\n        uint256 monsterIndex = _checkMonsterBlockNumber(location);\\n        // if (monsterIndex == 0) {\\n        //     if (_roomEvents[location] == 1)  { //TODO monster indicator\\n        //         return 1;\\n        //     }\\n        //     return 0;\\n        // }\\n        return monsterIndex;\\n    }\\n\\n    function _checkMonsterBlockNumber(uint256 location) internal view returns (uint256) {\\n        uint64 monsterBlockNumber = _rooms[location].monsterBlockNumber;\\n        if (monsterBlockNumber == 0) {\\n            // no monsters\\n            return 0;\\n        }\\n        bytes32 monsterBlockHash = _blockHashRegister.get(monsterBlockNumber);\\n        if (monsterBlockHash == 0) {\\n            // skip as monster block is not actualised\\n            return 0;\\n        }\\n        bool newlyDiscoveredRoom = monsterBlockNumber == _rooms[location].blockNumber;\\n        return\\n            PureDungeon._generateMonsterIndex(\\n                location,\\n                monsterBlockHash,\\n                1,\\n                newlyDiscoveredRoom,\\n                _rooms[location].kind\\n            );\\n    }\\n\\n    struct GearData {\\n        uint16 level;\\n        uint8 slot;\\n        uint8 classBits; // bit array of allowed classes indexed by lsb\\n        uint16 durability;\\n        uint16 maxDurability; // gear is unbreakable when maxDurablity is 0\\n        uint32 template;\\n    }\\n\\n    function _setGearData(uint256 gearId, GearData memory gear) internal {\\n        uint256 data = PureDungeon._encodeGearData(\\n            gear.level,\\n            gear.slot,\\n            gear.classBits,\\n            gear.durability,\\n            gear.maxDurability,\\n            gear.template\\n        );\\n        _gearsContract.setData(gearId, data);\\n    }\\n\\n    function _getGearData(uint256 gearId) internal view returns (GearData memory) {\\n        uint256 data = _gearsContract.getData(gearId);\\n        (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        ) = PureDungeon._decodeGearData(data);\\n        return GearData(level, slot, classBits, durability, maxDurability, template);\\n    }\\n\\n    function _addInitialGears(uint256 characterId) internal {\\n        uint256 attackGearData = PureDungeon._encodeGearData(0, 0, 15, 10, 10, 1);\\n        uint256 defenseGearData = PureDungeon._encodeGearData(0, 1, 15, 10, 10, 4);\\n        uint256 attackGear = _gearsContract.mint(characterId, attackGearData);\\n        _equip(characterId, 0, 0, attackGear, 0);\\n        uint256 defenseGear = _gearsContract.mint(characterId, defenseGearData);\\n        _equip(characterId, 0, 0, defenseGear, 1);\\n    }\\n\\n    // TODO restrict transfer of equiped items\\n    function _equip(\\n        uint256 characterId,\\n        uint16 level,\\n        uint8 class,\\n        uint256 id,\\n        uint8 slot\\n    ) internal {\\n        GearData memory gear = _getGearData(id);\\n        require(gear.level <= level, \\\"gear Level too high\\\");\\n        require((gear.classBits >> class) & 1 != 0, \\\"invalid class\\\");\\n        if (slot == 0) {\\n            require(gear.slot == 0, \\\"only attack gear on slot 0\\\");\\n            _characters[characterId].slot_1 = id;\\n        } else if (slot == 1) {\\n            require(gear.slot == 1, \\\"only defense gear on slot 1\\\");\\n            _characters[characterId].slot_2 = id;\\n        } else if (slot == 2) {\\n            require(gear.slot == 2, \\\"only accessories on slot 2\\\");\\n            _characters[characterId].slot_3 = id;\\n        } else if (slot == 3) {\\n            require(gear.slot == 2, \\\"only accessories on slot 3\\\");\\n            _characters[characterId].slot_4 = id;\\n        } else if (slot == 4) {\\n            require(gear.slot == 2, \\\"only accessories on slot 4\\\");\\n            _characters[characterId].slot_5 = id;\\n        }\\n        emit Equip(characterId, id, gear.slot);\\n    }\\n\\n    function _handleKey(\\n        uint256 characterId,\\n        uint256 location,\\n        uint256 location2\\n    ) internal {\\n        uint256 location1 = location;\\n        if (location1 > location2) {\\n            location1 = location2;\\n            location2 = location;\\n        }\\n        if (!_isUnlocked(characterId, location1, location2)) {\\n            require(_elementsContract.subBalanceOf(characterId, PureDungeon.KEYS) > 0, \\\"no key\\\");\\n            _elementsContract.subBurnFrom(characterId, PureDungeon.KEYS, 1);\\n            _unlockedExits[characterId][location1][location2] = true;\\n        }\\n    }\\n\\n    function _isUnlocked(\\n        uint256 characterId,\\n        uint256 location1,\\n        uint256 location2\\n    ) internal view returns (bool) {\\n        return _unlockedExits[characterId][location1][location2];\\n    }\\n\\n    function _getAreaTypeForRoom(uint256 location) internal view returns (uint8) {\\n        return _areas[PureDungeon._getAreaLoc(location)].areaType;\\n    }\\n\\n    function _moveTo(\\n        uint256 characterId,\\n        uint256 oldLocation,\\n        uint8 direction\\n    ) internal returns (uint256) {\\n        (int64 x, int64 y, int64 z, ) = PureDungeon._coordinates(oldLocation);\\n        if (PureDungeon.NORTH == direction) {\\n            y--;\\n        } else if (PureDungeon.EAST == direction) {\\n            x++;\\n        } else if (PureDungeon.SOUTH == direction) {\\n            y++;\\n        } else if (PureDungeon.WEST == direction) {\\n            x--;\\n        } else {\\n            revert(\\\"impossible direction\\\");\\n        }\\n        uint256 newLocation = PureDungeon._location(x, y, z);\\n        Room storage currentRoom = _rooms[oldLocation];\\n        Room storage nextRoom = _rooms[newLocation];\\n        uint64 cb = currentRoom.blockNumber;\\n        uint64 nb = nextRoom.blockNumber;\\n        uint8 exitMask = uint8(2)**direction;\\n        uint8 opositeExitMask = uint8(2)**((direction + 2) % 4);\\n        if (cb < nb || nb == 0) {\\n            if ((currentRoom.exits & exitMask) == exitMask) {\\n                if ((currentRoom.exits / 2**4) & exitMask == exitMask) {\\n                    _handleKey(characterId, oldLocation, newLocation);\\n                }\\n                return newLocation;\\n            }\\n        } else if (cb > nb) {\\n            if ((nextRoom.exits & opositeExitMask) == opositeExitMask) {\\n                if ((nextRoom.exits / 2**4) & opositeExitMask == opositeExitMask) {\\n                    _handleKey(characterId, oldLocation, newLocation);\\n                }\\n                return newLocation;\\n            }\\n        } else {\\n            if ((currentRoom.exits & exitMask) == exitMask || (nextRoom.exits & opositeExitMask) == opositeExitMask) {\\n                if (oldLocation > newLocation) {\\n                    if ((nextRoom.exits / 2**4) & opositeExitMask == opositeExitMask) {\\n                        _handleKey(characterId, oldLocation, newLocation);\\n                    }\\n                } else {\\n                    if ((currentRoom.exits / 2**4) & exitMask == exitMask) {\\n                        _handleKey(characterId, oldLocation, newLocation);\\n                    }\\n                }\\n                return newLocation;\\n            }\\n        }\\n        revert(\\\"cant move this way\\\");\\n    }\\n\\n    function _move(\\n        uint256 characterId,\\n        uint256 location,\\n        uint8 direction\\n    ) internal {\\n        Character storage character = _characters[characterId];\\n        Room storage currentRoom = _rooms[character.location];\\n        Room storage nextRoom = _rooms[location];\\n        uint64 blockNumber;\\n        if (nextRoom.blockNumber == 0) {\\n            _discoverRoom(location, characterId, direction);\\n        } else {\\n            // TODO should we actualiseRoom first, before monster ?\\n            // TODO can we remove num active characters check?\\n            if (\\n                nextRoom.monsterBlockNumber == 0\\n                    && nextRoom.numActiveCharacters == 0\\n                    && nextRoom.randomEvent != 2\\n                    && _roomsContract.getData(location) == 0\\n            ) {\\n                blockNumber = uint64(block.number);\\n                _blockHashRegister.request();\\n                if (nextRoom.monsterBlockNumber == 0) {\\n                    nextRoom.monsterBlockNumber = blockNumber;\\n                }\\n            }\\n            _actualiseRoom(location);\\n            address benefactor = _roomBenefactor(location);\\n            if (benefactor != address(0) && uint256(benefactor) != _charactersContract.getSubOwner(characterId)) {\\n                _elementsContract.mintVault(benefactor, PureDungeon.FRAGMENTS, 1);\\n                emit RoomIncome(location, benefactor, PureDungeon.FRAGMENTS, 1);\\n            }\\n        }\\n        uint256 areaLoc = PureDungeon._getAreaLoc(location);\\n        Area storage area = _areas[areaLoc];\\n        if (area.eventBlockNumber == 0 && block.number % 3 == 0) {\\n            if (blockNumber == 0) {\\n                blockNumber = uint64(block.number);\\n                _blockHashRegister.request();\\n            }\\n            area.eventBlockNumber = blockNumber;\\n            emit RandomEvent(areaLoc, blockNumber);\\n        }\\n        currentRoom.numActiveCharacters--;\\n        nextRoom.numActiveCharacters++;\\n        character.location = location;\\n        character.direction = direction;\\n        _increaseHPXP(characterId);\\n    }\\n\\n    function _increaseHPXP(uint256 characterId) internal {\\n        CharacterData memory characterData = _getCharacterData(characterId);\\n        if (characterData.hp < characterData.maxHP) {\\n            characterData.hp += 1;\\n            _setCharacterData(characterId, characterData);\\n        }\\n    }\\n\\n    function _isRoomActive(uint256 location) internal view returns (bool) {\\n        address owner = _roomsContract.ownerOf(location);\\n        return owner == address(this);\\n    }\\n\\n    function _roomBenefactor(uint256 location) internal view returns (address){\\n        if (_isRoomActive(location)) {\\n            return address(_roomsContract.subOwnerOf(location));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _pay(uint256 characterId, uint256 location, uint256 id, uint256 amount) internal {\\n        address benefactor = _roomBenefactor(location);\\n        if (benefactor != address(0)) {\\n            uint256 share = amount / 5;\\n            if (share > 0) {\\n                _elementsContract.subTransferFrom(characterId, 0, id, share);\\n                _elementsContract.transferFrom(address(this), benefactor, id, share);\\n                emit RoomIncome(location, benefactor, id, share);\\n            }\\n            _elementsContract.subBurnFrom(characterId, id, amount - share);\\n        } else {\\n            _elementsContract.subBurnFrom(characterId, id, amount);\\n        }\\n    }\\n\\n    function _discoverRoom(\\n        uint256 location,\\n        uint256 discoverer,\\n        uint8 direction\\n    ) internal {\\n        Area storage area = _areas[PureDungeon._getAreaLoc(location)];\\n        if (area.lastRoom > 0) {\\n            // area is also actualised with room when necessary\\n            _actualiseRoom(area.lastRoom);\\n            area.lastRoomIndex = area.currentIndex;\\n            area.lastRoom = 0;\\n        }\\n        _elementsContract.subBurnFrom(discoverer, PureDungeon.FRAGMENTS, PureDungeon._discoveryCost(location));\\n        Room storage nextRoom = _rooms[location];\\n        nextRoom.blockNumber = uint64(block.number);\\n        nextRoom.monsterBlockNumber = uint64(block.number);\\n        nextRoom.direction = direction;\\n        nextRoom.areaAtDiscovery = area.discovered;\\n        nextRoom.index = area.currentIndex++;\\n        nextRoom.lastRoomIndex = area.lastRoomIndex;\\n        nextRoom.discoverer = discoverer;\\n        area.lastRoom = location;\\n        _blockHashRegister.request();\\n        uint256 discovererOwner = _charactersContract.getSubOwner(discoverer);\\n        _initializeTaxDueDate(discovererOwner);\\n        _roomsContract.mintId(location, discovererOwner);\\n        emit RoomDiscovered(location, uint64(block.number), nextRoom.direction);\\n    }\\n\\n    function _initializeTaxDueDate(uint256 owner) internal {\\n        if (owner != 0 && _roomsContract.subBalanceOf(owner) == 0) {\\n            uint256 dueDate = block.timestamp + 5 days;\\n            _taxDueDate[address(owner)] = dueDate;\\n            emit RoomTaxPay(address(owner), 0, dueDate);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f1ec36f20e07c28bb353e06be846c988c460ff331a26626dbad37150043c706\"},\"src/dungeon/PureDungeon.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nlibrary PureDungeon {\\n    uint256 internal constant LOCATION_ZERO = 2**255;\\n    uint256 internal constant BOUNTY = 2**254;\\n\\n    uint8 internal constant ROOM_TYPE_NORMAL = 1;\\n    uint8 internal constant ROOM_TYPE_TELEPORT = 2;\\n    uint8 internal constant ROOM_TYPE_TEMPLE = 3;\\n    uint8 internal constant ROOM_TYPE_LORE = 4;\\n    uint8 internal constant ROOM_TYPE_CARRIER = 5;\\n\\n    uint8 internal constant EXITS_INERTIA = 87;\\n    uint8 internal constant EXITS_BIFURCATION = 40;\\n    uint8 internal constant EXITS_BOTH_BIFURCATION = 25;\\n\\n    uint8 internal constant NORTH = 0;\\n    uint8 internal constant EAST = 1;\\n    uint8 internal constant SOUTH = 2;\\n    uint8 internal constant WEST = 3;\\n    uint8 internal constant DOWN = 4;\\n\\n    uint8 internal constant COINS = 6;\\n    uint8 internal constant KEYS = 7;\\n    uint8 internal constant FRAGMENTS = 8;\\n\\n    uint8 internal constant WARRIOR = 0;\\n    uint8 internal constant EXPLORER = 1;\\n    uint8 internal constant MAGE = 2;\\n    uint8 internal constant BARBARIAN = 3;\\n\\n    uint8 internal constant CLASS_BONUS = 4; // 100/4 = 25%\\n\\n    uint8 internal constant LEVEL_RING_WIDTH = 25;\\n    uint16 internal constant ELEMENT_AREA_10000_PROBA = 100; // 1%\\n    uint8 internal constant NUM_ELEMENT_AREA_PER_PERIOD = 10;\\n\\n    uint8 internal constant LOCK_PROBABILITY = 40;\\n    uint8 internal constant TWO_LOCK_PROBABILITY = 10;\\n\\n    uint8 internal constant MONSTER_SPAWN = 15;\\n\\n    uint8 internal constant INITIAL_HP = 16;\\n    uint8 internal constant HP_INCREASE = 10;\\n\\n    function coordinates(uint256 location)\\n        external\\n        pure\\n        returns (\\n            int64 x,\\n            int64 y,\\n            int64 z,\\n            uint64 a\\n        )\\n    {\\n        return _coordinates(location);\\n    }\\n\\n    function _coordinates(uint256 location)\\n        internal\\n        pure\\n        returns (\\n            int64 x,\\n            int64 y,\\n            int64 z,\\n            uint64 a\\n        )\\n    {\\n        x = int64(location);\\n        y = int64(location / 2**64);\\n        z = int64(location / 2**128);\\n        a = uint64(location / 2**255); // = 1 for valid location\\n    }\\n\\n    function location(\\n        int64 x,\\n        int64 y,\\n        int64 z\\n    ) external pure returns (uint256 location) {\\n        return _location(x, y, z);\\n    }\\n\\n    function _location(\\n        int64 x,\\n        int64 y,\\n        int64 z\\n    ) internal pure returns (uint256 location) {\\n        return 2**255 + uint256(uint64(z)) * 2**128 + uint256(uint64(y)) * 2**64 + uint64(x);\\n    }\\n\\n    function _locationToBounty(uint256 location) internal pure returns (uint256 bounty){\\n        return location - LOCATION_ZERO + BOUNTY;\\n    }\\n\\n    function _bountyToLocation(uint256 bounty) internal pure returns (uint256 location){\\n        return location - BOUNTY + LOCATION_ZERO;\\n    }\\n\\n    function generateMonsterIndex(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint256 numMonsters,\\n        bool newlyDiscoveredRoom,\\n        uint8 roomKind\\n    ) external pure returns (uint256) {\\n        return _generateMonsterIndex(location, blockHash, numMonsters, newlyDiscoveredRoom, roomKind);\\n    }\\n\\n    function _generateMonsterIndex(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint256 numMonsters,\\n        bool newlyDiscoveredRoom,\\n        uint8 roomKind\\n    ) internal pure returns (uint256) {\\n        if (roomKind != ROOM_TYPE_NORMAL) {\\n            return 0;\\n        }\\n        uint8 spawnRate = MONSTER_SPAWN;\\n        if (newlyDiscoveredRoom) {\\n            spawnRate += 10;\\n        }\\n        bool hasMonster = uint256(keccak256(abi.encodePacked(location, blockHash, uint8(6)))) % 100 < spawnRate;\\n        if (hasMonster) {\\n            return (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(7)))) % numMonsters) + 1;\\n        }\\n        return 0;\\n    }\\n\\n    function computeRoomDiscoveryReward(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 class\\n    ) external pure returns (uint256 numGold, uint256 numElements) {\\n        return _computeRoomDiscoveryReward(location, blockHash, class);\\n    }\\n\\n    function _computeRoomDiscoveryReward(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 class\\n    ) internal pure returns (uint256 numGold, uint256 numElements) {\\n        uint256 ring = _getRing(location, 0);\\n        uint256 target = ring / LEVEL_RING_WIDTH;\\n        if (target == 0) {\\n            target = 1;\\n        }\\n        numElements = (target / 2) + (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(100)))) % target);\\n        if (numElements == 0) {\\n            numElements = 1;\\n        }\\n        if (MAGE == class) {\\n            numElements = numElements + numElements / CLASS_BONUS;\\n        }\\n        if (target > 8) {\\n            target = 8;\\n        }\\n        numGold = (target / 2) + (uint256(keccak256(abi.encodePacked(location, blockHash, uint8(101)))) % target);\\n        if (numGold == 0) {\\n            numGold = 1;\\n        }\\n        if (EXPLORER == class) {\\n            numGold = numGold + numGold / CLASS_BONUS;\\n        }\\n    }\\n\\n    function discoveryCost(uint256 location) external pure returns (uint256 fragments) {\\n        return _discoveryCost(location);\\n    }\\n\\n    function _discoveryCost(uint256 location) internal pure returns (uint256 fragments) {\\n        if (location == LOCATION_ZERO) {\\n            return 0;\\n        } else {\\n            uint256 ring = _getRing(location, 0);\\n            return 1 + ring / LEVEL_RING_WIDTH;\\n        }\\n    }\\n\\n    function generateRandomEvent(uint256 areaLoc, bytes32 blockHash)\\n        external\\n        pure\\n        returns (uint256 roomLocation, uint64 randomEvent)\\n    {\\n        return _generateRandomEvent(areaLoc, blockHash);\\n    }\\n\\n    function _generateRandomEvent(uint256 areaLoc, bytes32 blockHash)\\n        internal\\n        pure\\n        returns (uint256 roomLocation, uint64 randomEvent)\\n    {\\n        roomLocation = _getRoomLoc(\\n            areaLoc,\\n            uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(102)))) % 9),\\n            uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(103)))) % 9)\\n        );\\n        randomEvent = 2; // for now always monster TODO :uint64(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(104)))));\\n    }\\n\\n    function generateRoom(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    )\\n        external\\n        pure\\n        returns (\\n            uint8 exits,\\n            uint8 kind,\\n            uint8 area_discovered\\n        )\\n    {\\n        return _generateRoom(location, blockHash, direction, areaAtDiscovery, lastIndex, index);\\n    }\\n\\n    function _generateRoom(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8 exits,\\n            uint8 kind,\\n            uint8 area_discovered\\n        )\\n    {\\n        exits = _generateExits(location, blockHash, direction);\\n        (kind, area_discovered) = _getRoomKind(location, blockHash, areaAtDiscovery, lastIndex, index);\\n    }\\n\\n    function _getRoomKind(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 areaAtDiscovery,\\n        uint8 lastIndex,\\n        uint8 index\\n    ) internal pure returns (uint8 kind, uint8 area_discovered) {\\n        uint256 areaLoc = _getAreaLoc(location);\\n        uint8 currentIndex = lastIndex;\\n        area_discovered = areaAtDiscovery;\\n        (int64 x, int64 y, , ) = _coordinates(location);\\n        if (x == 0 && y == 0) {\\n            // special case // cannot be discovered in batch in one block\\n            kind = ROOM_TYPE_TELEPORT;\\n            area_discovered = area_discovered | 1;\\n        } else {\\n            while (currentIndex <= index) {\\n                uint8 roll = uint8(\\n                    uint256(keccak256(abi.encodePacked(areaLoc, currentIndex, blockHash, uint8(3)))) % 20\\n                );\\n                if (!(area_discovered & 1 == 1) && (roll == 0 || currentIndex == 80)) {\\n                    // if roll or last room\\n                    kind = ROOM_TYPE_TELEPORT;\\n                    area_discovered = area_discovered | 1;\\n                } else if (\\n                    !(area_discovered & 2 == 2) &&\\n                    (roll == 1 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1))) // second last room and teleport not found yet\\n                ) {\\n                    kind = ROOM_TYPE_TEMPLE;\\n                    area_discovered = area_discovered | 2;\\n                } else if (\\n                    !(area_discovered & 4 == 4) &&\\n                    (roll == 2 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1)) || // second last room and teleport not found yet\\n                        (currentIndex == 79 && !(area_discovered & 2 == 2)) || // second last room and temple not found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 2 == 2))) // third last room and neither teleport nor temple found yet\\n                ) {\\n                    kind = ROOM_TYPE_LORE;\\n                    area_discovered = area_discovered | 4;\\n                } else if (\\n                    !(area_discovered & 8 == 8) &&\\n                    (roll == 3 ||\\n                        (currentIndex == 80) || // last room\\n                        (currentIndex == 79 && !(area_discovered & 1 == 1)) || // second last room and teleport not found yet\\n                        (currentIndex == 79 && !(area_discovered & 2 == 2)) || // second last room and temple not found yet\\n                        (currentIndex == 79 && !(area_discovered & 4 == 4)) || // second last room and lore not found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 2 == 2)) || // third last room and neither teleport nor temple found yet\\n                        (currentIndex == 78 && !(area_discovered & 1 == 1) && !(area_discovered & 4 == 4)) || // third last room and neither teleport nor lore found yet\\n                        (currentIndex == 78 && !(area_discovered & 4 == 4) && !(area_discovered & 2 == 2)) || // third last room and neither lore nor temple found yet\\n                        (currentIndex == 77 &&\\n                            !(area_discovered & 4 == 4) &&\\n                            !(area_discovered & 2 == 2) &&\\n                            !(area_discovered & 1 == 1))) // fourth last room and neither telport, temple nor lore found yet\\n                ) {\\n                    kind = ROOM_TYPE_CARRIER;\\n                    area_discovered = area_discovered | 8;\\n                } else {\\n                    kind = ROOM_TYPE_NORMAL;\\n                }\\n                currentIndex++;\\n            }\\n        }\\n    }\\n\\n    function toLevelUp(uint16 level)\\n        external\\n        pure\\n        returns (\\n            uint16 xpRequired,\\n            uint256 coinsRequired,\\n            uint8 hpIncrease\\n        )\\n    {\\n        return _toLevelUp(level);\\n    }\\n\\n    function _toLevelUp(uint16 level)\\n        internal\\n        pure\\n        returns (\\n            uint16 xpRequired,\\n            uint256 coinsRequired,\\n            uint8 hpIncrease\\n        )\\n    {\\n        uint16[11] memory xpRequirements = [0, 10, 49, 119, 208, 328, 524, 826, 1269, 3654, 6894];\\n        xpRequired = xpRequirements[level];\\n        if (level > 8) {\\n            coinsRequired = 492;\\n        } else {\\n            coinsRequired = (((1 + level) ** 3) / 5) + 8;\\n        }\\n        hpIncrease = HP_INCREASE;\\n    }\\n\\n    function generateArea(\\n        uint256 areaLoc,\\n        bytes32 blockHash,\\n        uint64 numElementalAreaInPeriod\\n    ) external pure returns (uint8 areaType) {\\n        _generateArea(areaLoc, blockHash, numElementalAreaInPeriod);\\n    }\\n\\n    function _generateArea(\\n        uint256 areaLoc,\\n        bytes32 blockHash,\\n        uint64 numElementalAreaInPeriod\\n    ) internal pure returns (uint8 areaType) {\\n        if (_isCentreArea(areaLoc) || numElementalAreaInPeriod >= NUM_ELEMENT_AREA_PER_PERIOD) {\\n            areaType = 6;\\n        } else {\\n            uint256 roomRing = (_getAreaRing(areaLoc) * 9);\\n            if (roomRing > 0) {\\n                roomRing -= 4; // this set the value to be the one of the corner room nearest to the center\\n            }\\n            if (roomRing >= LEVEL_RING_WIDTH) {\\n                bool elementArea = uint8(uint256(keccak256(abi.encodePacked(areaLoc, blockHash, uint8(12)))) % 10000) <=\\n                    ELEMENT_AREA_10000_PROBA;\\n                if (elementArea) {\\n                    (, ,int64 z, ) = _coordinates(areaLoc);\\n                    areaType = 1 + uint8(z % 5);\\n                } else {\\n                    areaType = 6;\\n                }\\n            } else {\\n                areaType = 6;\\n            }\\n        }\\n    }\\n\\n    // distance between 2 location * 0.4\\n    function teleportTax(uint256 p1, uint256 p2) external pure returns (uint256) {\\n        return _teleportTax(p1, p2);\\n    }\\n\\n    function _teleportTax(uint256 p1, uint256 p2) internal pure returns (uint256) {\\n        uint256 cost = (2 * _getRing(p1, p2)) / 5;\\n        if (cost == 0) {\\n            return 1;\\n        } else {\\n            return cost;\\n        }\\n    }\\n\\n    function carrierCost(uint256 location) external pure returns (uint256) {\\n        return _carrierCost(location);\\n    }\\n\\n    function _carrierCost(uint256 location) internal pure returns (uint256) {\\n        uint256 cost = (2 * _getRing(location, LOCATION_ZERO)) / 6;\\n        if (cost == 0) {\\n            return 1;\\n        } else {\\n            return cost;\\n        }\\n    }\\n\\n    function recyclingReward(uint256 gearData) external pure returns (uint256) {\\n        return _recyclingReward(gearData);\\n    }\\n\\n    function _recyclingReward(uint256 gearData) internal pure returns (uint256) {\\n        (uint16 level, , , uint16 durability, uint16 maxDurability, ) = _decodeGearData(gearData);\\n        uint256 reward = 1 + level / 2;\\n        if (durability == maxDurability) {\\n            reward += 1 + reward / 2;\\n        }\\n        return reward;\\n    }\\n\\n    function hpCost(uint16 hp) external pure returns (uint256) {\\n        return _hpCost(hp);\\n    }\\n\\n    function _hpCost(uint16 hp) internal pure returns (uint256) {\\n        return hp;\\n    }\\n\\n    function getRing(uint256 p1, uint256 p2) external pure returns (uint256) {\\n        return _getRing(p1, p2);\\n    }\\n\\n    function _getRing(uint256 p1, uint256 p2) internal pure returns (uint256) {\\n        (int64 x1, int64 y1, , ) = _coordinates(p1);\\n        (int64 x2, int64 y2, , ) = _coordinates(p2);\\n        int256 dx = x1 - x2;\\n        if (dx < 0) {\\n            dx = -dx;\\n        }\\n        int256 dy = y1 - y2;\\n        if (dy < 0) {\\n            dy = -dy;\\n        }\\n        if (dx > 2**64 / 2) {\\n            dx = 2**64 - dx;\\n        }\\n        if (dy > 2**64 / 2) {\\n            dy = 2**64 - dy;\\n        }\\n        if (dx > dy) {\\n            return uint256(dx);\\n        } else {\\n            return uint256(dy);\\n        }\\n    }\\n\\n    function _getAreaRing(uint256 areaLoc) internal pure returns (uint64) {\\n        (int64 x, int64 y, , ) = _coordinates(areaLoc);\\n        if (x < 0) {\\n            x = -x;\\n        }\\n        if (y < 0) {\\n            y = -y;\\n        }\\n        if (x > y) {\\n            return uint64(x);\\n        } else {\\n            return uint64(y);\\n        }\\n    }\\n\\n    // centre area is currently defined as the first 9 area (first area + 8 surrounding it)\\n    function _isCentreArea(uint256 areaLoc) internal pure returns (bool) {\\n        (int64 areaX, int64 areaY, , ) = _coordinates(areaLoc);\\n        return areaX >= -1 && areaY >= -1 && areaX <= 1 && areaY <= 1;\\n    }\\n\\n    function getAreaLoc(uint256 location) external pure returns (uint256) {\\n        return _getAreaLoc(location);\\n    }\\n\\n    function _getAreaLoc(uint256 location) internal pure returns (uint256) {\\n        (int64 x, int64 y, int64 z, ) = _coordinates(location);\\n        int64 areaX;\\n        if (x >= 0) {\\n            areaX = (x + 4) / 9;\\n        } else {\\n            areaX = -((-x + 4) / 9);\\n        }\\n\\n        int64 areaY;\\n        if (y >= 0) {\\n            areaY = (y + 4) / 9;\\n        } else {\\n            areaY = -((-y + 4) / 9);\\n        }\\n        return _location(areaX, areaY, z);\\n    }\\n\\n    function _getRoomLoc(\\n        uint256 areaLoc,\\n        uint8 x,\\n        uint8 y\\n    ) internal pure returns (uint256) {\\n        (int64 areaX, int64 areaY, int64 floor, ) = _coordinates(areaLoc);\\n        return _location(areaX * 9 - 4 + x, areaY * 9 - 4 + y, floor);\\n    }\\n\\n    // direction based exit generation\\n    // both exits and locks are generated\\n    // return value is encoded (uint4 locksBits, uint4 exitBits)\\n    function _generateExits(\\n        uint256 location,\\n        bytes32 blockHash,\\n        uint8 direction\\n    ) internal pure returns (uint8) {\\n        uint8 exits = 0;\\n        if (DOWN == direction) {\\n            exits = 0xF;\\n        } else {\\n            if (EXITS_INERTIA > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(1)))) % 100)) {\\n                exits = 2**direction;\\n            }\\n            if (EXITS_BIFURCATION > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(2)))) % 100)) {\\n                if (\\n                    EXITS_BOTH_BIFURCATION >\\n                    uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(3)))) % 100)\\n                ) {\\n                    if (NORTH == direction || SOUTH == direction) {\\n                        exits = (exits | 8) | 2;\\n                    } else if (EAST == direction || WEST == direction) {\\n                        exits = (exits | 1) | 4;\\n                    }\\n                } else {\\n                    if (50 > uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(3)))) % 100)) {\\n                        if (NORTH == direction) {\\n                            exits |= 8;\\n                        } else if (EAST == direction) {\\n                            exits |= 1;\\n                        } else if (SOUTH == direction) {\\n                            exits |= 2;\\n                        } else if (WEST == direction) {\\n                            exits |= 4;\\n                        }\\n                    } else {\\n                        if (NORTH == direction) {\\n                            exits |= 2;\\n                        } else if (EAST == direction) {\\n                            exits |= 4;\\n                        } else if (SOUTH == direction) {\\n                            exits |= 8;\\n                        } else if (WEST == direction) {\\n                            exits |= 1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        uint8 randLock = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(111)))) % 100);\\n        uint8 numLocks = randLock < (100 - LOCK_PROBABILITY) ? 0 : (randLock < (100 - TWO_LOCK_PROBABILITY) ? 1 : 2);\\n        if (numLocks >= 4) {\\n            exits = exits | (15 * 2**4);\\n        } else if (numLocks == 3) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 4);\\n            uint8 locks = (chosenLocks + 1) * 7;\\n            if (locks == 21) {\\n                exits = exits | (13 * 2**4);\\n            } else if (locks == 28) {\\n                exits = exits | (11 * 2**4);\\n            }\\n            // 4 possibilities : 7 // 14 // 13 // 11\\n        } else if (numLocks == 2) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 6);\\n            uint8 locks = (chosenLocks + 1) * 3;\\n            if (locks == 15) {\\n                exits = exits | (5 * 2**4);\\n            } else if (locks == 18) {\\n                exits = exits | (10 * 2**4);\\n            }\\n            // 3 // 6 // 9 // 12 // 5 // 10\\n        } else if (numLocks == 1) {\\n            uint8 chosenLocks = uint8(uint256(keccak256(abi.encodePacked(location, blockHash, uint8(112)))) % 4);\\n            exits = exits | (2**chosenLocks * 2**4);\\n        }\\n        return exits;\\n    }\\n\\n    function decodeCharacterData(uint256 data)\\n        external\\n        pure\\n        returns (\\n            uint16 level,\\n            uint16 hp,\\n            uint16 maxHP,\\n            uint32 xp,\\n            uint8 class\\n        )\\n    {\\n        return _decodeCharacterData(data);\\n    }\\n\\n    function _decodeCharacterData(uint256 data)\\n        internal\\n        pure\\n        returns (\\n            uint16 level,\\n            uint16 hp,\\n            uint16 maxHP,\\n            uint32 xp,\\n            uint8 class\\n        )\\n    {\\n        class = uint8(data >> 248);\\n        level = uint16((data >> 232) % 2**16);\\n        xp = uint32((data >> 200) % 2**32);\\n        maxHP = uint16((data >> 184) % 2**16);\\n        hp = uint16((data >> 168) % 2**16);\\n    }\\n\\n    function encodeGearData(\\n        uint16 level,\\n        uint8 slot,\\n        uint8 classBits,\\n        uint16 durability,\\n        uint16 maxDurability,\\n        uint32 template\\n    ) external pure returns (uint256 data) {\\n        return _encodeGearData(level, slot, classBits, durability, maxDurability, template);\\n    }\\n\\n    function _encodeGearData(\\n        uint16 level,\\n        uint8 slot,\\n        uint8 classBits,\\n        uint16 durability,\\n        uint16 maxDurability,\\n        uint32 template\\n    ) internal pure returns (uint256 data) {\\n        return ((uint256(classBits) << 248) +\\n            (uint256(level) << 232) +\\n            (uint256(slot) << 224) +\\n            (uint256(durability) << 208) +\\n            (uint256(maxDurability) << 192) +\\n            template);\\n    }\\n\\n    function decodeGearData(uint256 data)\\n        external\\n        pure\\n        returns (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        )\\n    {\\n        return _decodeGearData(data);\\n    }\\n\\n    function _decodeGearData(uint256 data)\\n        internal\\n        pure\\n        returns (\\n            uint16 level,\\n            uint8 slot,\\n            uint8 classBits,\\n            uint16 durability,\\n            uint16 maxDurability,\\n            uint32 template\\n        )\\n    {\\n        classBits = uint8(data >> 248);\\n        level = uint16((data >> 232) % 2**16);\\n        slot = uint8((data >> 224) % 2**8);\\n        durability = uint16((data >> 208) % 2**16);\\n        maxDurability = uint16((data >> 192) % 2**16);\\n        template = uint32(data % 2**32);\\n    }\\n\\n    function limitedChange(\\n        uint16 value,\\n        uint16 max,\\n        int64 change\\n    ) external pure returns (uint16) {\\n        return _limitedChange(value, max, change);\\n    }\\n\\n    function _limitedChange(\\n        uint16 value,\\n        uint16 max,\\n        int64 change\\n    ) internal pure returns (uint16) {\\n        int64 updated = int64(value) + int64(change);\\n        if (updated > int64(max)) {\\n            return max;\\n        }\\n        if (updated <= 0) {\\n            return 0;\\n        } else {\\n            return uint16(updated);\\n        }\\n    }\\n\\n    function roomsTax(uint256 rooms, uint256 periods) external pure returns (uint256) {\\n        return _roomsTax(rooms, periods);\\n    }\\n    function _roomsTax(uint256 rooms, uint256 periods) internal pure returns (uint256) {\\n        return (1 + rooms / 10) * periods;\\n    }\\n}\\n\",\"keccak256\":\"0x9315f0352f71ccb136247b1195f32081fc7673024efdfd2b6865fc9609fd12ab\"},\"src/player/Player.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./PlayerDataLayout.sol\\\";\\nimport \\\"../utils/MetaTransactionReceiver.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"../utils/Constants.sol\\\";\\n\\ncontract Player is Proxied, PlayerDataLayout, MetaTransactionReceiver, Constants {\\n    event Call(bool success, bytes returnData);\\n    event Refill(address indexed playerAddress, uint256 newEnergy);\\n\\n    function postUpgrade(\\n        Characters charactersContract,\\n        address payable feeRecipient,\\n        uint256 minBalance,\\n        Pool pool\\n    ) external proxied {\\n        // TODO _setTrustedForwarder(...);\\n        _charactersContract = charactersContract;\\n        _feeRecipient = feeRecipient;\\n        MIN_BALANCE = minBalance;\\n        _pool = pool;\\n        pool.register();\\n    }\\n\\n    function register() external {\\n        if (msg.sender != address(_holder)) {\\n            require(address(_holder) == address(0), \\\"holder already set\\\");\\n            _holder = Enterable(msg.sender);\\n        }\\n    }\\n\\n    function getLastCharacterId(address playerAddress) external view returns (uint256) {\\n        return _lastCharacterIds[playerAddress];\\n    }\\n\\n    function getEnergy(address playerAddress) external view returns (uint256 energy, uint256 freeEnergy) {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    // TODO remove ?\\n    function getPlayerInfo(address playerAddress, uint256 characterId)\\n        external\\n        view\\n        returns (uint256 energy, uint256 freeEnergy)\\n    {\\n        Player storage player = _players[playerAddress];\\n        energy = player.energy;\\n        freeEnergy = player.freeEnergy;\\n    }\\n\\n    function createAndEnter(\\n        address payable newDelegate,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        uint256 characterId = _charactersContract.mintTo(address(_holder));\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function enter(\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string calldata name,\\n        uint8 class,\\n        uint256 location\\n    ) external payable {\\n        address payable sender = _msgSender();\\n        _charactersContract.transferFrom(sender, address(_holder), characterId);\\n        _enter(sender, newDelegate, characterId, value, name, class, location);\\n    }\\n\\n    function _enter(\\n        address payable sender,\\n        address payable newDelegate,\\n        uint256 characterId,\\n        uint256 value,\\n        string memory name,\\n        uint8 class,\\n        uint256 location\\n    ) internal {\\n        require(msg.value >= value, \\\"msg.value < value\\\");\\n        if (msg.value > value) {\\n            _refill(sender, sender, msg.value - value);\\n        }\\n        if (newDelegate != address(0)) {\\n            _addDelegate(sender, newDelegate);\\n        }\\n        _holder.enter.value(value)(sender, characterId, name, class, location);\\n        _lastCharacterIds[sender] = characterId;\\n    }\\n\\n    function callAsCharacter(\\n        address destination,\\n        uint256 gasLimit,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData) {\\n        address sender = _msgSender();\\n        // TODO check death ?\\n        require(destination != address(this), \\\"cannot call itself\\\");\\n        // TODO block data if == `enter(address sender, uint256 characterId, bytes data)`\\n        uint256 initialGas = gasleft();\\n        uint256 characterId = _getFirstParam(data);\\n        require(_charactersContract.ownerOf(characterId) == address(_holder), \\\"_holder does not own character\\\");\\n        uint256 playerAddress = _charactersContract.getSubOwner(characterId);\\n        if (uint256(sender) != playerAddress) {\\n            require(uint256(_delegates[sender]) == playerAddress, \\\"sender is not delegate of character's player\\\");\\n        }\\n\\n        (success, returnData) = _executeWithSpecificGas(destination, gasLimit, data);\\n\\n        Player storage player = _players[address(playerAddress)];\\n        uint256 energy = player.energy;\\n        uint256 txCharge = ((initialGas - gasleft()) + 10000) * tx.gasprice;\\n        uint256 freeEnergyFee = (txCharge * 10) / 100; // 10% extra is used for free energy\\n\\n        uint256 poolFee = txCharge * 10; // 1000% is used for UBF\\n\\n        require(energy >= freeEnergyFee + poolFee, \\\"not enough energy\\\");\\n        energy -= (freeEnergyFee + poolFee);\\n        _pool.recordCharge{value: poolFee}(sender, txCharge, poolFee);\\n\\n        if (msg.sender == sender) {\\n            // not metatx : use local private key so need to recharge local balance // TODO remove (once metatx is enabled)\\n            if (msg.sender.balance < MIN_BALANCE) {\\n                uint256 balanceToGive = MIN_BALANCE - msg.sender.balance;\\n                if (balanceToGive >= energy) {\\n                    balanceToGive = energy;\\n                    energy = 0;\\n                } else {\\n                    energy -= balanceToGive;\\n                }\\n\\n                if (balanceToGive > 0) {\\n                    msg.sender.transfer(balanceToGive);\\n                }\\n            }\\n        }\\n        player.freeEnergy += uint128(freeEnergyFee);\\n        player.energy = uint128(energy);\\n\\n        emit Call(success, returnData);\\n    }\\n\\n    function isDelegateFor(address delegate, address playerAddress) external view returns (bool) {\\n        return _delegates[delegate] == playerAddress;\\n    }\\n\\n    function refillAccount(address account) public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, account, msg.value);\\n    }\\n\\n    function refill() public payable {\\n        address payable sender = _msgSender();\\n        _refill(sender, sender, msg.value);\\n    }\\n\\n    function _refill(\\n        address payable sender,\\n        address account,\\n        uint256 value\\n    ) internal returns (uint256 refund) {\\n        uint128 energy = _players[account].energy;\\n        energy += uint128(value);\\n        if (energy > uint128(MAX_FOOD)) {\\n            energy = uint128(MAX_FOOD);\\n            refund = energy - MAX_FOOD;\\n        }\\n        _players[account].energy = energy;\\n        emit Refill(account, energy);\\n        if (refund > 0) {\\n            sender.transfer(refund);\\n        }\\n    }\\n\\n    // TODO add Events for Delegates\\n    function addDelegate(address payable _delegate) public payable {\\n        address payable sender = _msgSender();\\n        if (msg.value > 0) {\\n            _refill(sender, sender, msg.value);\\n        }\\n        _addDelegate(sender, _delegate);\\n    }\\n\\n    function _addDelegate(address sender, address payable _delegate) internal {\\n        require(_delegate != address(0), \\\"no zero address delegate\\\");\\n        require(_players[sender].energy >= uint128(MIN_BALANCE), \\\"not enough energy\\\");\\n        _players[sender].energy -= uint128(MIN_BALANCE);\\n        _delegate.transfer(MIN_BALANCE);\\n        _delegates[_delegate] = sender;\\n    }\\n\\n    function _getFirstParam(bytes memory data) internal pure returns (uint256) {\\n        if (data.length < 36) {\\n            return 0;\\n        }\\n        uint256 value;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value;\\n    }\\n\\n    function _executeWithSpecificGas(\\n        address to,\\n        uint256 gasLimit,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        (success, returnData) = to.call.gas(gasLimit)(data);\\n        assert(gasleft() > gasLimit / 63);\\n        // not enough gas provided, assert to throw all gas // TODO use EIP-1930\\n    }\\n}\\n\",\"keccak256\":\"0x68ad10c9793851f62ca8da96537c9e89c813290c6b1d5a19d3dc760dbfdeadb9\"},\"src/player/PlayerDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../characters/Characters.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ninterface Enterable {\\n    // TODO generalize?\\n    function enter(\\n        address sender,\\n        uint256 characterId,\\n        string calldata data,\\n        uint8 class,\\n        uint256 location\\n    ) external payable;\\n}\\n\\ncontract PlayerDataLayout {\\n    uint256 internal MIN_BALANCE; // = 5000000000000000;\\n\\n    struct Player {\\n        uint128 energy;\\n        uint128 freeEnergy;\\n    }\\n\\n    address payable _feeRecipient;\\n    mapping(address => address) _delegates;\\n    mapping(address => Player) _players;\\n    mapping(address => uint256) _lastCharacterIds;\\n\\n    Characters _charactersContract;\\n    Enterable _holder;\\n\\n    Pool _pool;\\n}\\n\",\"keccak256\":\"0xb5c01a684a934ae4742d2cb686ab53ed1d8e72bb7d6231bf440811de6a01dbbb\"},\"src/player/Pool.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ninterface Pool {\\n    function register() external;\\n\\n    function recordCharge(\\n        address account,\\n        uint256 txCharge,\\n        uint256 poolFee\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x28dfcd73f5c9400c1da453ecc67fea0493bec7c463b27b0eb3b8ccb7979e1a35\"},\"src/tokens/ERC1155Token.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./ERC1155TokenDataLayout.sol\\\";\\n\\ncontract ERC1155Token is Proxied, ERC1155TokenDataLayout {\\n    event TransferSingle(address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n    event TransferBatch(address indexed from, address indexed to, uint256[] indexed ids, uint256[] amounts);\\n    event SubTransferSingle(uint256 indexed from, uint256 indexed to, uint256 indexed id, uint256 amount);\\n    event SubTransferBatch(uint256 indexed from, uint256 indexed to, uint256[] indexed ids, uint256[] amounts);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function postUpgrade(address tokenOwner) public virtual proxied {\\n        _tokenOwner = tokenOwner;\\n    }\\n\\n    function mintVault(\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _balances[owner][id] += amount;\\n        _subBalances[0][id] += amount;\\n        emit TransferSingle(address(0), owner, id, amount);\\n        emit SubTransferSingle(0, 0, id, amount);\\n    }\\n\\n    // TODO remove after fix\\n    function mintTo(\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _balances[owner][id] += amount;\\n        emit TransferSingle(address(0), owner, id, amount);\\n    }\\n\\n    // TODO remove after fix\\n    function subMint(uint256 id, uint256 amount) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subBalances[0][id] += amount;\\n        emit SubTransferSingle(0, 0, id, amount);\\n    }\\n\\n    function mint(\\n        uint256 subOwner,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == _tokenOwner, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subBalances[subOwner][id] += amount;\\n        _balances[_tokenOwner][id] += amount;\\n        emit TransferSingle(address(0), _tokenOwner, id, amount);\\n        emit SubTransferSingle(0, subOwner, id, amount);\\n    }\\n\\n    function subBurnFrom(\\n        uint256 from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(_tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BURN\\\");\\n        uint256 currentBalance = _subBalances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _subBalances[from][id] = currentBalance - amount;\\n        _balances[_tokenOwner][id] -= amount;\\n        emit TransferSingle(_tokenOwner, address(0), id, amount);\\n        emit SubTransferSingle(from, 0, id, amount);\\n    }\\n\\n    function batchSubBurnFrom(\\n        uint256 from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(ids.length == amounts.length, \\\"Inconsistent length\\\");\\n        require(\\n            _tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender],\\n            \\\"NOT_AUTHORIZED_BATCH_SUB_BURN\\\"\\n        );\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            uint256 currentBalance = _subBalances[from][id];\\n            require(currentBalance >= amount, \\\"does not own enough\\\");\\n            _subBalances[from][id] = currentBalance - amount;\\n            _balances[_tokenOwner][id] -= amount;\\n        }\\n        emit TransferBatch(_tokenOwner, address(0), ids, amounts);\\n        emit SubTransferBatch(from, 0, ids, amounts);\\n    }\\n\\n    function subBalanceOf(uint256 who, uint256 id) public view returns (uint256) {\\n        return _subBalances[who][id];\\n    }\\n\\n    function subBalanceOfBatch(uint256[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"Inconsistent array length between args\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = subBalanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    function subTransferFrom(\\n        uint256 from,\\n        uint256 to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        // cannot do any sender like in ERC721 because we would need to keep track of which owner is the balance coming from\\n        require(_tokenOwner == msg.sender || _operatorsForAll[_tokenOwner][msg.sender], \\\"NOT_AUTHORIZED_SUB_TRANSFER\\\");\\n        uint256 currentBalance = _subBalances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _subBalances[from][id] = currentBalance - amount;\\n        _subBalances[to][id] += amount;\\n        emit SubTransferSingle(from, to, id, amount);\\n    }\\n\\n    function balanceOf(address who, uint256 id) public view returns (uint256) {\\n        require(who != address(0), \\\"zero address\\\");\\n        return _balances[who][id];\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(owners.length == ids.length, \\\"Inconsistent array length between args\\\");\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    // TODO ERC1155 use safe version only\\n\\n    // onwer need to take responsibility to subBurn before transfering out\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_TRANSFER\\\");\\n        uint256 currentBalance = _balances[from][id];\\n        require(currentBalance >= amount, \\\"does not own enough\\\");\\n        _balances[from][id] = currentBalance - amount;\\n        _balances[to][id] += amount;\\n        emit TransferSingle(from, to, id, amount);\\n    }\\n\\n    // onwer need to take responsibility to subBurn before transfering out\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(ids.length == amounts.length, \\\"Inconsistent length\\\");\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_BATCH_TRANSFER\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            uint256 currentBalance = _balances[from][id];\\n            require(currentBalance >= amount, \\\"does not own enough\\\");\\n            _balances[from][id] = currentBalance - amount;\\n            _balances[to][id] += amount;\\n        }\\n        emit TransferBatch(from, to, ids, amounts);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _operatorsForAll[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0xcd0147fbb2a8858e06cc424f06fbce16b62e08f25bf2836c252bda68e154d3a9\"},\"src/tokens/ERC1155TokenDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract ERC1155TokenDataLayout {\\n    mapping(address => mapping(uint256 => uint256)) internal _balances; // TODO pack balances into one unit256\\n    mapping(uint256 => mapping(uint256 => uint256)) internal _subBalances; // TODO pack balances into one unit256\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\n    address _tokenOwner; //the dungeon\\n}\\n\",\"keccak256\":\"0xdd21c84c06255dd0e075f96c495bfe5641ab182e1b64e921bdd36447825f80f2\"},\"src/tokens/ERC721Token.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"buidler-deploy/solc_0.6/proxy/Proxied.sol\\\";\\nimport \\\"./ERC721TokenDataLayout.sol\\\";\\n\\ncontract ERC721Token is Proxied, ERC721TokenDataLayout {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n    event SubTransfer(uint256 indexed from, uint256 indexed to, uint256 indexed id);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event DataUpdate(uint256 indexed id, uint256 indexed data);\\n\\n    function postUpgrade(address dungeon) public virtual proxied {\\n        _minter = dungeon;\\n    }\\n\\n    function subBalanceOf(uint256 subOwner) external view returns (uint256) {\\n        return _subNumNFTPerAddress[subOwner];\\n    }\\n\\n    function mint(uint256 subOwner, uint256 data) public returns (uint256 id) {\\n        require(msg.sender == _minter, \\\"NOT_AUTHORIZED_MINT\\\");\\n        id = ++_lastId;\\n        _subOwners[id] = subOwner;\\n        _subNumNFTPerAddress[subOwner]++;\\n        _owners[id] = _minter;\\n        _data[id] = data;\\n        emit DataUpdate(id, data);\\n        emit Transfer(address(0), _minter, id);\\n        emit SubTransfer(0, subOwner, id);\\n    }\\n\\n    // TODO make sure that data of gear/room in vault cannot be changed\\n    function setData(uint256 id, uint256 data) external {\\n        address owner = _owners[id];\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SET_DATA\\\");\\n        _data[id] = data;\\n        emit DataUpdate(id, data);\\n    }\\n\\n    function getData(uint256 id) external view returns (uint256) {\\n        return _data[id];\\n    }\\n\\n    function subBurn(uint256 id) external {\\n        address owner = _owners[id];\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BURN\\\");\\n        uint256 subOwner = _subOwners[id];\\n        _subOwners[id] = 0;\\n        _subNumNFTPerAddress[subOwner]--;\\n        emit SubTransfer(subOwner, 0, id);\\n    }\\n\\n    function subOwnerOf(uint256 id) public view returns (uint256) {\\n        return _subOwners[id];\\n    }\\n\\n    function ownerOf(uint256 id) public view returns (address) {\\n        address owner = _owners[id];\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        return owner;\\n    }\\n\\n    function subTransferFrom(\\n        address owner,\\n        uint256 from,\\n        uint256 to,\\n        uint256 id\\n    ) external {\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_TRANSFER\\\");\\n        require(owner == _owners[id], \\\"not owner\\\");\\n        uint256 subOwner = _subOwners[id];\\n        require(subOwner == from, \\\"not subOnwer\\\");\\n        _subOwners[id] = to;\\n        _subNumNFTPerAddress[subOwner]--;\\n        _subNumNFTPerAddress[to]++;\\n        emit SubTransfer(from, to, id);\\n    }\\n\\n    function subBatchTransferFrom(\\n        address owner,\\n        uint256 from,\\n        uint256 to,\\n        uint256[] calldata ids\\n    ) external {\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"NOT_AUTHORIZED_SUB_BATCH_TRANSFER\\\");\\n        uint256 numIds = ids.length;\\n        for (uint256 i = 0; i < numIds; i++) {\\n            uint256 id = ids[i];\\n            require(owner == _owners[id], \\\"not owner\\\");\\n            uint256 subOwner = _subOwners[id];\\n            require(subOwner == from, \\\"not subOnwer\\\");\\n            _subOwners[id] = to;\\n            emit SubTransfer(from, to, id);\\n        }\\n        _subNumNFTPerAddress[from] -= numIds;\\n        _subNumNFTPerAddress[to] += numIds;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external {\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_TRANSFER\\\");\\n        address owner = _owners[id];\\n        require(owner == from, \\\"not owner\\\");\\n        _owners[id] = to;\\n        uint256 subOwner = _subOwners[id];\\n        if (_subOwners[id] != 0) {\\n            _subOwners[id] = 0;\\n            _subNumNFTPerAddress[subOwner]--;\\n            emit SubTransfer(subOwner, 0, id);\\n        }\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids\\n    ) external {\\n        require(to != address(0), \\\"invalid to\\\");\\n        require(from == msg.sender || _operatorsForAll[from][msg.sender], \\\"NOT_AUTHORIZED_BATCH_TRANSFER\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            address owner = _owners[id];\\n            require(owner == from, \\\"not owner\\\");\\n            _owners[id] = to;\\n            uint256 subOwner = _subOwners[id];\\n            if (_subOwners[id] != 0) {\\n                _subOwners[id] = 0;\\n                _subNumNFTPerAddress[subOwner]--;\\n                emit SubTransfer(subOwner, 0, id);\\n            }\\n            emit Transfer(from, to, id); // TODO extract function (same as transferFrom)\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _operatorsForAll[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0x0e0b76aeb5c792803b2b750cf124709b231ebf0e47c5b408ebae0fb6f4b944f1\"},\"src/tokens/ERC721TokenDataLayout.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract ERC721TokenDataLayout {\\n    address internal _minter;\\n    uint256 internal _lastId;\\n    mapping(uint256 => address) internal _owners;\\n    mapping(uint256 => uint256) internal _subOwners;\\n\\n    mapping(uint256 => uint256) internal _subNumNFTPerAddress;\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    mapping(uint256 => uint256) internal _data;\\n}\\n\",\"keccak256\":\"0xf389950923ea0618a2da366fb1726d4c6c60c507c5fad43fe9f1317f614a8553\"},\"src/tokens/Elements.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC1155Token.sol\\\";\\n\\ncontract Elements is ERC1155Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n}\\n\",\"keccak256\":\"0x5111ca6032430f85a7cb526c3ff0331fbbc398cbb8ceb52e96f73159cc47233f\"},\"src/tokens/Gears.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC721Token.sol\\\";\\n\\ncontract Gears is ERC721Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n}\\n\",\"keccak256\":\"0x6e1e20651a266c4ab8fba8e4f90c321d30101f24348da6803b0bae6711fdef3c\"},\"src/tokens/Rooms.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"./ERC721Token.sol\\\";\\n\\ncontract Rooms is ERC721Token {\\n    function postUpgrade(address dungeon) public override {\\n        super.postUpgrade(dungeon);\\n    }\\n\\n    function mintId(uint256 id, uint256 subOwner) public {\\n        require(msg.sender == _minter, \\\"NOT_AUTHORIZED_MINT\\\");\\n        _subOwners[id] = subOwner;\\n        _subNumNFTPerAddress[subOwner]++;\\n        _owners[id] = _minter;\\n        emit Transfer(address(0), _minter, id);\\n        emit SubTransfer(0, subOwner, id);\\n    }\\n}\\n\",\"keccak256\":\"0x3241793b303d5eb5eb327e8036d6f06a3ed631daedf34e55806b3dea8c3a6573\"},\"src/utils/BlockHashRegister.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract BlockHashRegister {\\n    mapping(uint256 => bytes32) _blockHashes;\\n    uint256 _blockToActualise;\\n\\n    event HashRequest(uint256 blockNumber);\\n\\n    function get(uint256 blockNumber) external view returns (bytes32) {\\n        return _blockHashes[blockNumber];\\n    }\\n\\n    function getOrCompute(uint256 blockNumber) external view returns (bytes32) {\\n        bytes32 blockHash = _blockHashes[blockNumber];\\n        if (uint256(blockHash) == 0) {\\n            return _computeBlockHash(blockNumber);\\n        }\\n        return blockHash;\\n    }\\n\\n    function getBlockToActualise() external view returns (uint256) {\\n        return _blockToActualise;\\n    }\\n\\n    function request() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = block.number;\\n            emit HashRequest(block.number);\\n        }\\n    }\\n\\n    function save() external {\\n        uint256 blockNumber = _blockToActualise;\\n        if (blockNumber < block.number) {\\n            _save(blockNumber);\\n            _blockToActualise = 0;\\n        }\\n    }\\n\\n    function _computeBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (blockNumber < 256 || blockNumber > block.number - 256) {\\n            return blockhash(blockNumber);\\n        } else {\\n            uint256 moduloBlockNumber = block.number - ((block.number - blockNumber - 1) % 256) + 1;\\n            return blockhash(moduloBlockNumber);\\n        }\\n    }\\n\\n    function _save(uint256 blockNumber) internal returns (bytes32) {\\n        bytes32 blockHash = _computeBlockHash(blockNumber);\\n        _blockHashes[blockNumber] = blockHash;\\n        return blockHash;\\n    }\\n}\\n\",\"keccak256\":\"0xbf9f49a9ee6426191a58a2796f50ca4652c8dd635e120aadb277cf2ffb2f0cc9\"},\"src/utils/Constants.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\ncontract Constants {\\n    uint256 public constant MAX_FOOD = 400000000000000000;\\n}\\n\",\"keccak256\":\"0xaf0e49384bb233af73112ec81b17d1a71a68b528a01aa0afd6395506fc17675a\"},\"src/utils/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nabstract contract MetaTransactionReceiver {\\n    bytes32 constant FORWARDER_STORAGE_POSITION = 0xbda473cae6459373242ba82cd14b3b8493956b600be62b2478f52616c8a283de;\\n\\n    function isTrustedForwarder(address forwarder) external returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    function _msgSender() internal view returns (address payable sender) {\\n        sender = msg.sender;\\n        if (_isTrustedForwarder(sender)) {\\n            bytes memory data = msg.data;\\n            uint256 length = msg.data.length;\\n            assembly {\\n                sender := mload(add(data, length))\\n            }\\n        }\\n    }\\n\\n    function _isTrustedForwarder(address trustedForwarder) internal view returns(bool isTrustedForwarder) {\\n        address currentForwarder;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            currentForwarder := sload(\\n                FORWARDER_STORAGE_POSITION\\n            )\\n        }\\n        return currentForwarder == trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address trustedForwarder) internal {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(\\n                FORWARDER_STORAGE_POSITION,\\n                trustedForwarder\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x331029fe6dd9110f1655d42a32d0d698089923cf3ef38a3daab855745d776392\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614489806100206000396000f3fe6080604052600436106100c25760003560e01c8063ab5360601161007f578063d8468f8f11610059578063d8468f8f1461046f578063e6d48fe7146104ae578063e7691518146104de578063f3f543ba14610514576100c2565b8063ab536060146103ca578063b2f2dff9146103fa578063cf747b4914610436576100c2565b80630604ba13146100c757806322988b1d14610121578063398f21681461016c5780636fadcf721461023e5780637507a1c9146103065780639434e4e814610330575b600080fd5b3480156100d357600080fd5b5061011f60048036036101c08110156100eb57600080fd5b50803590602081013590604081013560010b9061ffff6060820135169060808101359060a081013560070b9060c00161055f565b005b34801561012d57600080fd5b5061011f6004803603608081101561014457600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516610aff565b34801561017857600080fd5b5061011f6004803603606081101561018f57600080fd5b81359190810190604081016020820135600160201b8111156101b057600080fd5b8201836020820111156101c257600080fd5b803590602001918460208302840111600160201b831117156101e357600080fd5b919390929091602081019035600160201b81111561020057600080fd5b82018360208201111561021257600080fd5b803590602001918460208302840111600160201b8311171561023357600080fd5b509092509050610bf6565b6102f26004803603604081101561025457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561027e57600080fd5b82018360208201111561029057600080fd5b803590602001918460018302840111600160201b831117156102b157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d11945050505050565b604080519115158252519081900360200190f35b34801561031257600080fd5b5061011f6004803603602081101561032957600080fd5b5035610dc2565b34801561033c57600080fd5b5061011f6004803603608081101561035357600080fd5b8135916001600160401b036020820135169160ff6040830135169190810190608081016060820135600160201b81111561038c57600080fd5b82018360208201111561039e57600080fd5b803590602001918460018302840111600160201b831117156103bf57600080fd5b509092509050610fc8565b3480156103d657600080fd5b5061011f600480360360408110156103ed57600080fd5b50803590602001356110ca565b34801561040657600080fd5b5061011f600480360361016081101561041e57600080fd5b508035906020810135906040810135906060016111fa565b34801561044257600080fd5b5061011f6004803603606081101561045957600080fd5b508035906020810135906040013560010b61150b565b34801561047b57600080fd5b5061011f600480360361014081101561049357600080fd5b508035906001600160a01b0360208201351690604001611777565b3480156104ba57600080fd5b5061011f600480360360408110156104d157600080fd5b50803590602001356118d6565b3480156104ea57600080fd5b5061011f600480360361014081101561050257600080fd5b50803590602081013590604001611a52565b34801561052057600080fd5b5061011f6004803603608081101561053757600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516611b81565b6004546001600160a01b031633146105ac576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b5050506000888152602081905260409020805490915061062f90611cbd565b8315610772576008546040805163c9a59e4760e01b8152600481018b90529051600a926001600160a01b03169163c9a59e47916024808301926020929190829003018186803b15801561068157600080fd5b505afa158015610695573d6000803e3d6000fd5b505050506040513d60208110156106ab57600080fd5b5051106106f0576040805162461bcd60e51b815260206004820152600e60248201526d546f6f206d616e7920676561727360901b604482015290519081900360640190fd5b60085460408051630d9778e560e11b8152600481018b90526024810187905290516001600160a01b0390921691631b2ef1ca916044808201926020929091908290030181600087803b15801561074557600080fd5b505af1158015610759573d6000803e3d6000fd5b505050506040513d602081101561076f57600080fd5b50505b60005b60088160ff1610156108b9576000838260ff166008811061079257fe5b602002013560010b905060008160010b131561082757600754604080516302acc94b60e01b8152600481018d9052600185810160ff16602483015284900b604482015290516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506108b0565b60008160010b12156108b0576007546040805163c9b902e360e01b8152600481018d9052600185810160ff166024830152600085810390910b604483015291516001600160a01b039093169263c9b902e39260648084019391929182900301818387803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b505050505b50600101610775565b506108c2614309565b6108cb8961202d565b90508660010b600014610934576108ee816080015182606001518960010b612106565b61ffff1660808201819052610934576040805189815290518a917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a25b60408101805161ffff88160163ffffffff1690526109528982612152565b8360070b600014610af457610965614337565b610972836002015461221c565b9050806080015161ffff16600014610a27576109978160600151826080015187612106565b61ffff16606082015260028301546109af90826122fd565b606081015161ffff16610a2757600854600284015460408051630301ea6560e51b81526004810192909252516001600160a01b039092169163603d4ca09160248082019260009290919082900301818387803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050505b610a2f614337565b610a3c846003015461221c565b9050806080015161ffff16600014610af157610a618160600151826080015188612106565b61ffff1660608201526003840154610a7990826122fd565b606081015161ffff16610af157600854600385015460408051630301ea6560e51b81526004810192909252516001600160a01b039092169163603d4ca09160248082019260009290919082900301818387803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b505050505b50505b505050505050505050565b6000610b0961237c565b80549091506001600160a01b03163314610b545760405162461bcd60e51b815260040180806020018281038252602c815260200180614408602c913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b03861690811790915560408051630354740160e31b81529051631aa3a0089160048082019260009290919082900301818387803b158015610ba957600080fd5b505af1158015610bbd573d6000803e3d6000fd5b5050600580546001600160a01b039889166001600160a01b03199182161790915560048054959098169416939093179095555050505050565b6004546001600160a01b03163314610c43576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b60005b83811015610d09576007546001600160a01b031663a41dab81868684818110610c6b57fe5b905060200201356001600160a01b031688868686818110610c8857fe5b905060200201356040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610ce557600080fd5b505af1158015610cf9573d6000803e3d6000fd5b505060019092019150610c469050565b505050505050565b6004546000906001600160a01b03163314610d61576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600034905060008084516020860184885af1915081610dbb576040805162461bcd60e51b815260206004820152601160248201527019985a5b1959081d1bc8199bdc9dd85c99607a1b604482015290519081900360640190fd5b5092915050565b6004546001600160a01b03163314610e0f576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b50505050610e8081611cbd565b60008181526001602052604090208054600160401b90046001600160401b031615610eb857805467ffffffffffffffff60401b191681555b60028101546001600160401b031615610edf5760028101805467ffffffffffffffff191690555b60095460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d6020811015610f5557600080fd5b50511115610fc45760095460408051634848b1a560e01b81526004810185905260006024820181905291516001600160a01b0390931692634848b1a59260448084019391929182900301818387803b158015610fb057600080fd5b505af1158015610d09573d6000803e3d6000fd5b5050565b6004546001600160a01b03163314611015576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b6000858152600c602090815260408083206001600160401b03881684529091529020805460ff191660ff851617815561105260018201848461436c565b508360ff16856001600160401b0316877f3553d84d9f5bc81eeb57eac4d5a1fee928d026da4f389c33c1cebfaf3931fda0868660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a4505050505050565b6004546001600160a01b03163314611117576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b5050506000838152602081905260409020805490915061119a90611cbd565b6111a2614309565b6111ab8461202d565b6000608082015290506111be8482612152565b60408051848152905185917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a250505050565b6004546001600160a01b03163314611247576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b611250836123a0565b611296576040805162461bcd60e51b8152602060048201526012602482015271726f6f6d206973206e6f742061637469766560701b604482015290519081900360640190fd5b600954604080516369f648a160e01b81526004810186905290516000926001600160a01b0316916369f648a1916024808301926020929190829003018186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d602081101561130c57600080fd5b505160065460408051630607176160e31b81526004810189905290519293506000926001600160a01b0390921691633038bb0891602480820192602092909190829003018186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d602081101561138a57600080fd5b505190508181146113ce576040805162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b604482015290519081900360640190fd5b60005b6008811015611496576007546001600160a01b031663fe99049a846000600185018886600881106113fe57fe5b60200201356040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b15801561147257600080fd5b505af1158015611486573d6000803e3d6000fd5b5050600190920191506113d19050565b5060095460408051634848b1a560e01b8152600481018890526024810187905290516001600160a01b0390921691634848b1a59160448082019260009290919082900301818387803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b50505050505050505050565b6004546001600160a01b03163314611558576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b505050600084815260208190526040902080549091506115db81611cbd565b6115e3614309565b6115ec8661202d565b905060008460010b826080015161ffff16019050816060015161ffff1660070b8160070b131561162557606082015161ffff1660808301525b60008160070b136116725760408051878152905188917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a26000608083015261167d565b61ffff811660808301525b6116878783612152565b6001840154600360ff9091166002011660006116a4898684612430565b8654604080516000815260ff86166020820152815193945084938d927f3042d0c278ec3b2d8bf290d27da7bb56226996146c187fc01f6f448b6283da72928290030190a46116f181611cbd565b85546000908152600160208190526040808320805467ffffffffffffffff60801b19808216600160801b928390046001600160401b03908116600019018116840291909117909355868652929094208054928316928590048216840190911690930217909155908655909401805460ff191660ff90951694909417909355505050505050565b6004546001600160a01b031633146117c4576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b60005b60088160ff1610156118d05760008160010160ff1690506000838360ff16600881106117ef57fe5b602002013561ffff1661ffff16905060008111156118c6576007546040805163a41dab8160e01b81526001600160a01b03888116600483015260248201869052604482018590529151919092169163a41dab8191606480830192600092919082900301818387803b15801561186357600080fd5b505af1158015611877573d6000803e3d6000fd5b50505050846001600160a01b0316867f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb8484604051808381526020018281526020019250505060405180910390a35b50506001016117c7565b50505050565b6004546001600160a01b03163314611923576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050600083815260208190526040902080549091506119a681611cbd565b60408051600181526004602082015281518592849288927f3042d0c278ec3b2d8bf290d27da7bb56226996146c187fc01f6f448b6283da72929181900390910190a460006119f3846126b7565b50925050508060070b8360010160019054906101000a900460070b60070b1215611a3f5760018301805468ffffffffffffffff0019166101006001600160401b03600785900b16021790555b611a4b858560046126d2565b5050505050565b6004546001600160a01b03163314611a9f576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b6000611aaa84612b6f565b905060005b60088160ff161015611a4b576000838260ff1660088110611acc57fe5b602002013561ffff1661ffff161115611b79576007546001600160a01b03166311aa10fb8386600185018760ff871660088110611b0557fe5b602002013561ffff166040518563ffffffff1660e01b8152600401808581526020018481526020018360ff1681526020018261ffff168152602001945050505050600060405180830381600087803b158015611b6057600080fd5b505af1158015611b74573d6000803e3d6000fd5b505050505b600101611aaf565b6000611b8b61237c565b80549091506001600160a01b03163314611bd65760405162461bcd60e51b815260040180806020018281038252602c815260200180614408602c913960400191505060405180910390fd5b600680546001600160a01b03199081166001600160a01b038881169190911790925560078054821687841617905560088054821686841617905560098054909116918416919091179055600160ff1b60005260016020527fe209ec102481142efb7be62c549d278b9d65c9410e465059ec2d8758d3fc5cf58054600160d01b900460ff1615611cac576040805162461bcd60e51b815260206004820152601760248201527f64756e67656f6e20616c72656164792073746172746564000000000000000000604482015290519081900360640190fd5b610d09600160ff1b60006004612b78565b600081815260016020526040902080546001600160401b0316611d1e576040805162461bcd60e51b81526020600482015260146024820152731c9bdbdb481b9bdd0818dc99585d1959081e595d60621b604482015290519081900360640190fd5b8054600160d01b900460ff1661201957600554815460408051634a83e9cd60e11b81526001600160401b039092166004830152516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015611d8457600080fd5b505afa158015611d98573d6000803e3d6000fd5b505050506040513d6020811015611dae57600080fd5b5051905080611dbe57505061202a565b611dc88382612ec9565b815460009081908190611e06908790869060ff600160c01b8204811691600160d81b8104821691600160e01b8204811691600160e81b900416612fb9565b875460ff808416600160d01b0260ff60d01b19918616600160c81b0260ff60c81b199093169290921716178855919450925090506000611e4587612fea565b600081815260026020526040902080549192509060ff8481166101009092041614611e7d57805461ff00191661010060ff8516021781555b6040805187815260ff8088166020830152861681830152905189917f8850140926f0260fe1b422b7a0d93e7d5734e521eae9ac8969ed512cc3834515919081900360600190a2600082815260026020526040902054600188015460ff909116901561201157611eea614309565b611ef7896001015461202d565b9050600080611f0b8c8b8560000151613082565b9150915060058460ff1611611f955760075460018c0154604080516302acc94b60e01b8152600481019290925260ff8716602483015260448201849052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015611f7c57600080fd5b505af1158015611f90573d6000803e3d6000fd5b505050505b60075460018c0154604080516302acc94b60e01b815260048101929092526006602483015260448201859052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015611ff557600080fd5b505af1158015612009573d6000803e3d6000fd5b505050505050505b505050505050505b610fc461202583612fea565b61317e565b50565b612035614309565b60065460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d60208110156120ab57600080fd5b505190506000808080806120be866132ee565b6040805160a08101825260ff909216825261ffff958616602083015263ffffffff9092169181019190915290831660608201529116608082015296505050505050505b919050565b600080828561ffff160190508361ffff1660070b8160070b131561212d578391505061214b565b60008160070b1361214257600091505061214b565b905061214b565b505b9392505050565b600060a8826080015161ffff16901b60b8836060015161ffff16901b60c8846040015163ffffffff16901b60e8856020015161ffff16901b60f8866000015160ff16901b010101019050600660009054906101000a90046001600160a01b03166001600160a01b0316634848b1a584836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b50505050505050565b612224614337565b60085460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b15801561227057600080fd5b505afa158015612284573d6000803e3d6000fd5b505050506040513d602081101561229a57600080fd5b50519050600080808080806122ae8761331f565b6040805160c08101825261ffff978816815260ff968716602082015294909516948401949094529084166060830152909216608083015263ffffffff1660a08201529998505050505050505050565b6000612325826000015183602001518460400151856060015186608001518760a00151613353565b60085460408051634848b1a560e01b8152600481018790526024810184905290519293506001600160a01b0390911691634848b1a59160448082019260009290919082900301818387803b1580156121ff57600080fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600954604080516331a9108f60e11b815260048101849052905160009283926001600160a01b0390911691636352211e91602480820192602092909190829003018186803b1580156123f157600080fd5b505afa158015612405573d6000803e3d6000fd5b505050506040513d602081101561241b57600080fd5b50516001600160a01b03163014915050919050565b60008060008061243f866126b7565b509194509250905060ff851661245b57600019909101906124e5565b600160ff86161415612472576001909201916124e5565b600260ff86161415612489576001909101906124e5565b600360ff861614156124a157600019909201916124e5565b6040805162461bcd60e51b815260206004820152601460248201527334b6b837b9b9b4b13632903234b932b1ba34b7b760611b604482015290519081900360640190fd5b60006124f28484846133a7565b600088815260016020526040808220838352912081548154939450919290916001600160401b03908116911660ff8a16600290810a906003818d0116900a8284108061254557506001600160401b038316155b156125a557855460ff808416600160c81b90920484161614156125a057855460ff808416918491601091600160c81b9004165b041660ff16141561258e5761258e8e8e896133d0565b869a505050505050505050505061214b565b612675565b826001600160401b0316846001600160401b031611156125f157845460ff808316600160c81b90920483161614156125a057845460ff808316918391601091600160c81b900416612578565b855460ff808416600160c81b909204841616148061261e5750845460ff808316600160c81b909204831616145b1561267557868d111561265b57845460ff808316918391601091600160c81b900416041660ff161415612656576126568e8e896133d0565b61258e565b855460ff808416918491601091600160c81b900416612578565b6040805162461bcd60e51b815260206004820152601260248201527163616e74206d6f766520746869732077617960701b604482015290519081900360640190fd5b90600160401b820490600160801b830490600160ff1b840490565b6000838152602081815260408083208054845260019092528083208584529083208054929391929091906001600160401b031661271957612714868887612b78565b6129f5565b8154600160401b90046001600160401b031615801561274757508154600160801b90046001600160401b0316155b801561276057506002808301546001600160401b031614155b80156127e1575060095460408051630178fe3f60e01b81526004810189905290516001600160a01b0390921691630178fe3f91602480820192602092909190829003018186803b1580156127b357600080fd5b505afa1580156127c7573d6000803e3d6000fd5b505050506040513d60208110156127dd57600080fd5b5051155b1561288257506005546040805163338cdca160e01b8152905143926001600160a01b03169163338cdca191600480830192600092919082900301818387803b15801561282c57600080fd5b505af1158015612840573d6000803e3d6000fd5b50508354600160401b90046001600160401b031615159150612882905057815467ffffffffffffffff60401b1916600160401b6001600160401b038316021782555b61288b86611cbd565b60006128968761354e565b90506001600160a01b03811615801590612930575060065460408051630607176160e31b8152600481018b905290516001600160a01b0390921691633038bb0891602480820192602092909190829003018186803b1580156128f757600080fd5b505afa15801561290b573d6000803e3d6000fd5b505050506040513d602081101561292157600080fd5b50516001600160a01b03821614155b156129f3576007546040805163a41dab8160e01b81526001600160a01b03848116600483015260086024830152600160448301529151919092169163a41dab8191606480830192600092919082900301818387803b15801561299157600080fd5b505af11580156129a5573d6000803e3d6000fd5b505060408051600881526001602082015281516001600160a01b03861694508b93507f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb929181900390910190a35b505b6000612a0087612fea565b600081815260026020819052604090912090810154919250906001600160401b0316158015612a30575060034306155b15612b07576001600160401b038316612aaf57439250600560009054906101000a90046001600160a01b03166001600160a01b031663338cdca16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a9657600080fd5b505af1158015612aaa573d6000803e3d6000fd5b505050505b6002810180546001600160401b03851667ffffffffffffffff199091168117909155604080519182525183917f644c4d4ff52c1efcb89d373879c1d7e01d3f8b7e60cc19f9bdf5da38cd90c14d919081900360200190a25b84546000196001600160401b03600160801b8084048216929092018116820267ffffffffffffffff60801b19938416178855865482810482166001908101909216909202919092161785558887558601805460ff891660ff19909116179055610af4896135e5565b600360fe1b0190565b600060026000612b8786612fea565b81526020019081526020016000209050600081600101541115612bd557612bb18160010154611cbd565b80546201000060ff63010000008304160262ff000019909116178155600060018201555b6007546001600160a01b031663c9b902e3846008612bf288613629565b6040518463ffffffff1660e01b8152600401808481526020018360ff1681526020018281526020019350505050600060405180830381600087803b158015612c3957600080fd5b505af1158015612c4d573d6000803e3d6000fd5b5050506000858152600160208190526040808320805467ffffffffffffffff1916436001600160401b031690811767ffffffffffffffff60401b1916600160401b919091021760ff60c01b1916600160c01b60ff8981169190910291909117808355875460ff60d81b199091166101009091048216600160d81b02178255865463ff00000019811663010000009182900483168087018416909202178855825460ff60e81b1916600160e81b90910217808355875460ff60e01b1990911662010000909104909116600160e01b02178155808301889055918501889055600554815163338cdca160e01b815291519294506001600160a01b03169263338cdca19260048084019382900301818387803b158015612d6957600080fd5b505af1158015612d7d573d6000803e3d6000fd5b505060065460408051630607176160e31b8152600481018990529051600094506001600160a01b039092169250633038bb08916024808301926020929190829003018186803b158015612dcf57600080fd5b505afa158015612de3573d6000803e3d6000fd5b505050506040513d6020811015612df957600080fd5b50519050612e068161365d565b600954604080516319846a3560e21b8152600481018990526024810184905290516001600160a01b0390921691636611a8d49160448082019260009290919082900301818387803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b5050835460408051436001600160401b03168152600160c01b90920460ff16602083015280518a94507fa97399cd19a5b00b49b7d10d188180e100139a0501c9c9b4fe21dab5b915162f9350918290030190a2505050505050565b6000612ed483612fea565b60008181526002602052604090205490915060ff16806118d057600354600160401b90046001600160401b0316612f0c83858361374a565b6000848152600260205260409020805460ff191660ff8316908117909155909250600614611a4b57600354620143704204906001600160401b03808316911614612f875760038054600160401b67ffffffffffffffff199091166001600160401b0384161767ffffffffffffffff60401b1916179055610d09565b600380546001600160401b036001850116600160401b0267ffffffffffffffff60401b19909116179055505050505050565b6000806000612fc989898961382b565b9250612fd88989888888613bf0565b939a9099509297509195505050505050565b600080600080612ff9856126b7565b509250925092506000808460070b1261301c575060096004840160070b05613036565b60098460000360040160070b8161302f57fe5b0560000390505b6000808460070b12613052575060096004840160070b0561306c565b60098460000360040160070b8161306557fe5b0560000390505b6130778282856133a7565b979650505050505050565b6000806000613092866000613f1d565b905060198104806130a1575060015b6040805160208082018a9052818301899052601960fa1b606083015282516041818403018152606190920190925280519101208190816130dd57fe5b0660028204019250826130ef57600192505b600260ff861614156131045760048304830192505b6008811115613111575060085b6040805160208082018a9052818301899052606560f81b6060830152825160418184030181526061909201909252805191012081908161314d57fe5b06600282040193508361315f57600193505b600160ff861614156131745760048404840193505b5050935093915050565b6000818152600260208190526040909120908101546001600160401b031680156132e95760055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b1580156131f657600080fd5b505afa15801561320a573d6000803e3d6000fd5b505050506040513d602081101561322057600080fd5b50519050806132315750505061202a565b60008061323e8684613fbb565b91509150600061324d83614040565b600084815260016020526040902060028082015492935090916001600160401b03161480159061328c57508054600160801b90046001600160401b0316155b8015613296575081155b80156132ac57508054600160d01b900460ff1615155b156132d05760028101805467ffffffffffffffff19166001600160401b0385161790555b50505060028401805467ffffffffffffffff1916905550505b505050565b61ffff60e882901c81169260a883901c82169260b881901c9092169163ffffffff60c882901c169160f89190911c90565b61ffff60e882901c81169260ff60e084901c169260f881901c9260d082901c81169260c083901c9091169163ffffffff1690565b6001600160f81b031960f885901b1661ffff60e81b60e888901b160160ff60e01b60e087901b160161ffff60d01b60d085901b160161ffff60c01b60c084901b160163ffffffff8216019695505050505050565b600160ff1b6001600160401b03938416928416600160401b0291909316600160801b0201010190565b81818111156133dd575081905b6133e8848284614144565b6118d0576007805460408051635986e3e560e11b8152600481018890526024810193909352516000926001600160a01b039092169163b30dc7ca916044808301926020929190829003018186803b15801561344257600080fd5b505afa158015613456573d6000803e3d6000fd5b505050506040513d602081101561346c57600080fd5b5051116134a9576040805162461bcd60e51b81526020600482015260066024820152656e6f206b657960d01b604482015290519081900360640190fd5b600780546040805163c9b902e360e01b815260048101889052602481019390935260016044840152516001600160a01b039091169163c9b902e391606480830192600092919082900301818387803b15801561350457600080fd5b505af1158015613518573d6000803e3d6000fd5b5050506000858152600b6020908152604080832085845282528083208684529091529020805460ff191660011790555050505050565b6000613559826123a0565b156135dd57600954604080516369f648a160e01b81526004810185905290516001600160a01b03909216916369f648a191602480820192602092909190829003018186803b1580156135aa57600080fd5b505afa1580156135be573d6000803e3d6000fd5b505050506040513d60208110156135d457600080fd5b50519050612101565b506000612101565b6135ed614309565b6135f68261202d565b9050806060015161ffff16816080015161ffff161015610fc45760808101805160010161ffff169052610fc48282612152565b6000600160ff1b82141561363f57506000612101565b600061364c836000613f1d565b905060198104600101915050612101565b80158015906136e157506009546040805163c9a59e4760e01b81526004810184905290516001600160a01b039092169163c9a59e4791602480820192602092909190829003018186803b1580156136b357600080fd5b505afa1580156136c7573d6000803e3d6000fd5b505050506040513d60208110156136dd57600080fd5b5051155b1561202a576001600160a01b0381166000818152600d6020908152604080832062069780420190819055815193845291830182905280519193927fc24affdb20f6529973515c5398461c1f6228edbfac531ab49e56a11433a86c9f929081900390910190a25050565b60006137558461416b565b8061376a5750600a6001600160401b03831610155b156137775750600661214b565b6000613782856141c1565b6009026001600160401b03169050600081111561379e57600319015b6019811061382057604080516020808201889052818301879052600360fa1b60608301528251604181840301815260619092019092528051910120606461271090910660ff16118015906138155760006137f7876126b7565b509250505060058160070b8161380957fe5b0760010193505061381a565b600692505b50612149565b506006949350505050565b600080600460ff841614156138425750600f613a2a565b604080516020808201889052818301879052600160f81b606083015282516041818403018152606190920190925280519101206064900660ff166057111561388d575060ff821660020a5b604080516020808201889052818301879052600160f91b606083015282516041818403018152606190920190925280519101206064900660ff1660281115613a2a57604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16601911156139545760ff831615806139245750600260ff8416145b1561393157600a1761394f565b600160ff841614806139465750600360ff8416145b1561394f576005175b613a2a565b604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16603211156139e25760ff83166139a65760081761394f565b600160ff841614156139ba5760011761394f565b600260ff841614156139ce5760021761394f565b600360ff8416141561394f57600417613a2a565b60ff83166139f257600217613a2a565b600160ff84161415613a0657600417613a2a565b600260ff84161415613a1a57600817613a2a565b600360ff84161415613a2a576001175b604080516020808201889052818301879052606f60f81b60608301528251808303604101815260619092019092528051910120606490066000603c60ff831610613a8857605a60ff831610613a80576002613a83565b60015b613a8b565b60005b905060048160ff1610613aa3578260f0179250613be5565b8060ff1660031415613b1d576040805160208082018a9052818301899052600760fc1b606083015282518083036041018152606190920190925280519101206003166001810160070260ff811660151415613b03578460d0179450613b16565b8060ff16601c1415613b16578460b01794505b5050613be5565b8060ff1660021415613b97576040805160208082018a9052818301899052600760fc1b60608301528251808303604101815260619092019092528051910120600690066001810160030260ff8116600f1415613b7e57846050179450613b16565b8060ff1660121415613b16578460a01794505050613be5565b8060ff1660011415613be5576040805160208082018a9052818301899052600760fc1b6060830152825160418184030181526061909201909252805191012060031660020a60100292909217915b509095945050505050565b6000806000613bfe88612fea565b869250905084600080613c108b6126b7565b5050915091508160070b6000148015613c2c57508060070b6000145b15613c405760029550846001179450613f0f565b8660ff168360ff1611613f0f5760408051602080820187905260f886901b6001600160f81b03191682840152604182018d9052600360f81b6061830152825180830360420181526062909201909252805191012060149006600186811614801590613cb9575060ff81161580613cb957508360ff166050145b15613ccd5760029650856001179550613f03565b600280871614801590613d0c57508060ff1660011480613cf057508360ff166050145b80613d0c57508360ff16604f148015613d0c5750600180871614155b15613d205760039650856002179550613f03565b600480871614801590613da657508060ff1660021480613d4357508360ff166050145b80613d5f57508360ff16604f148015613d5f5750600180871614155b80613d7b57508360ff16604f148015613d7b5750600280871614155b80613da657508360ff16604e148015613d975750600180871614155b8015613da65750600280871614155b15613db8576004965094861794613f03565b600880871614801590613eea57508060ff1660031480613ddb57508360ff166050145b80613df757508360ff16604f148015613df75750600180871614155b80613e1357508360ff16604f148015613e135750600280871614155b80613e2f57508360ff16604f148015613e2f5750600480871614155b80613e5a57508360ff16604e148015613e4b5750600180871614155b8015613e5a5750600280871614155b80613e8557508360ff16604e148015613e765750600180871614155b8015613e855750600480871614155b80613eb057508360ff16604e148015613ea15750600480871614155b8015613eb05750600280871614155b80613eea57508360ff16604d148015613ecc5750600480871614155b8015613edb5750600280871614155b8015613eea5750600180871614155b15613efe5760059650856008179550613f03565b600196505b50600190920191613c40565b505050509550959350505050565b6000806000613f2b856126b7565b505091509150600080613f3d866126b7565b5091935091505081840360070b6000811215613f57576000035b81840360070b6000811215613f6a576000035b6001603f1b821315613f805781600160401b0391505b6001603f1b811315613f9357600160401b035b80821315613fa857509450613fb59350505050565b9550613fb5945050505050565b92915050565b604080516020808201859052818301849052603360f91b6060830152825180830360410181526061830184528051908201206081830186905260a18301859052606760f81b60c1840152835160a281850301815260c290930190935281519101206000918291614035918691600991829006919006614217565b946002945092505050565b600081815260016020526040812054600160401b90046001600160401b03168061406e576000915050612101565b60055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b1580156140c257600080fd5b505afa1580156140d6573d6000803e3d6000fd5b505050506040513d60208110156140ec57600080fd5b505190508061410057600092505050612101565b6000848152600160208190526040909120546001600160401b03808216908516149161413b91879185918590600160d01b900460ff1661424e565b95945050505050565b6000928352600b602090815260408085209385529281528284209184525290205460ff1690565b6000806000614179846126b7565b5050915091506000198260070b1215801561419957506000198160070b12155b80156141a9575060018260070b13155b80156141b9575060018160070b13155b949350505050565b60008060006141cf846126b7565b50509150915060008260070b12156141e8578160000391505b60008160070b12156141f8576000035b8060070b8260070b131561420e57509050612101565b91506121019050565b600080600080614226876126b7565b509250925092506130778660ff1660048560090203018660ff166004856009020301836133a7565b600060ff82166001146142635750600061413b565b600f831561426f57600a015b6040805160208082018a9052818301899052600360f91b6060830152825180830360410181526061909201909252805191012060ff821660649091061080156142fb576040805160208082018b90528183018a9052600760f81b606083015282516041818403018152606190920190925280519101208690816142ee57fe5b066001019250505061413b565b506000979650505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106143ad5782800160ff198235161785556143da565b828001600101855582156143da579182015b828111156143da5782358255916020019190600101906143bf565b506143e69291506143ea565b5090565b61440491905b808211156143e657600081556001016143f0565b9056fe4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d207468697320616374696f6e4e4f545f415554484f52495a45445f41444d494e000000000000000000000000a26469706673582212207c0d69b2f0a3d4572084c4949989b8e9ae0446763cc884e3704ae70faae0f9e264736f6c63430006050033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063ab5360601161007f578063d8468f8f11610059578063d8468f8f1461046f578063e6d48fe7146104ae578063e7691518146104de578063f3f543ba14610514576100c2565b8063ab536060146103ca578063b2f2dff9146103fa578063cf747b4914610436576100c2565b80630604ba13146100c757806322988b1d14610121578063398f21681461016c5780636fadcf721461023e5780637507a1c9146103065780639434e4e814610330575b600080fd5b3480156100d357600080fd5b5061011f60048036036101c08110156100eb57600080fd5b50803590602081013590604081013560010b9061ffff6060820135169060808101359060a081013560070b9060c00161055f565b005b34801561012d57600080fd5b5061011f6004803603608081101561014457600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516610aff565b34801561017857600080fd5b5061011f6004803603606081101561018f57600080fd5b81359190810190604081016020820135600160201b8111156101b057600080fd5b8201836020820111156101c257600080fd5b803590602001918460208302840111600160201b831117156101e357600080fd5b919390929091602081019035600160201b81111561020057600080fd5b82018360208201111561021257600080fd5b803590602001918460208302840111600160201b8311171561023357600080fd5b509092509050610bf6565b6102f26004803603604081101561025457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561027e57600080fd5b82018360208201111561029057600080fd5b803590602001918460018302840111600160201b831117156102b157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d11945050505050565b604080519115158252519081900360200190f35b34801561031257600080fd5b5061011f6004803603602081101561032957600080fd5b5035610dc2565b34801561033c57600080fd5b5061011f6004803603608081101561035357600080fd5b8135916001600160401b036020820135169160ff6040830135169190810190608081016060820135600160201b81111561038c57600080fd5b82018360208201111561039e57600080fd5b803590602001918460018302840111600160201b831117156103bf57600080fd5b509092509050610fc8565b3480156103d657600080fd5b5061011f600480360360408110156103ed57600080fd5b50803590602001356110ca565b34801561040657600080fd5b5061011f600480360361016081101561041e57600080fd5b508035906020810135906040810135906060016111fa565b34801561044257600080fd5b5061011f6004803603606081101561045957600080fd5b508035906020810135906040013560010b61150b565b34801561047b57600080fd5b5061011f600480360361014081101561049357600080fd5b508035906001600160a01b0360208201351690604001611777565b3480156104ba57600080fd5b5061011f600480360360408110156104d157600080fd5b50803590602001356118d6565b3480156104ea57600080fd5b5061011f600480360361014081101561050257600080fd5b50803590602081013590604001611a52565b34801561052057600080fd5b5061011f6004803603608081101561053757600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516611b81565b6004546001600160a01b031633146105ac576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b5050506000888152602081905260409020805490915061062f90611cbd565b8315610772576008546040805163c9a59e4760e01b8152600481018b90529051600a926001600160a01b03169163c9a59e47916024808301926020929190829003018186803b15801561068157600080fd5b505afa158015610695573d6000803e3d6000fd5b505050506040513d60208110156106ab57600080fd5b5051106106f0576040805162461bcd60e51b815260206004820152600e60248201526d546f6f206d616e7920676561727360901b604482015290519081900360640190fd5b60085460408051630d9778e560e11b8152600481018b90526024810187905290516001600160a01b0390921691631b2ef1ca916044808201926020929091908290030181600087803b15801561074557600080fd5b505af1158015610759573d6000803e3d6000fd5b505050506040513d602081101561076f57600080fd5b50505b60005b60088160ff1610156108b9576000838260ff166008811061079257fe5b602002013560010b905060008160010b131561082757600754604080516302acc94b60e01b8152600481018d9052600185810160ff16602483015284900b604482015290516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506108b0565b60008160010b12156108b0576007546040805163c9b902e360e01b8152600481018d9052600185810160ff166024830152600085810390910b604483015291516001600160a01b039093169263c9b902e39260648084019391929182900301818387803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b505050505b50600101610775565b506108c2614309565b6108cb8961202d565b90508660010b600014610934576108ee816080015182606001518960010b612106565b61ffff1660808201819052610934576040805189815290518a917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a25b60408101805161ffff88160163ffffffff1690526109528982612152565b8360070b600014610af457610965614337565b610972836002015461221c565b9050806080015161ffff16600014610a27576109978160600151826080015187612106565b61ffff16606082015260028301546109af90826122fd565b606081015161ffff16610a2757600854600284015460408051630301ea6560e51b81526004810192909252516001600160a01b039092169163603d4ca09160248082019260009290919082900301818387803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050505b610a2f614337565b610a3c846003015461221c565b9050806080015161ffff16600014610af157610a618160600151826080015188612106565b61ffff1660608201526003840154610a7990826122fd565b606081015161ffff16610af157600854600385015460408051630301ea6560e51b81526004810192909252516001600160a01b039092169163603d4ca09160248082019260009290919082900301818387803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b505050505b50505b505050505050505050565b6000610b0961237c565b80549091506001600160a01b03163314610b545760405162461bcd60e51b815260040180806020018281038252602c815260200180614408602c913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b03861690811790915560408051630354740160e31b81529051631aa3a0089160048082019260009290919082900301818387803b158015610ba957600080fd5b505af1158015610bbd573d6000803e3d6000fd5b5050600580546001600160a01b039889166001600160a01b03199182161790915560048054959098169416939093179095555050505050565b6004546001600160a01b03163314610c43576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b60005b83811015610d09576007546001600160a01b031663a41dab81868684818110610c6b57fe5b905060200201356001600160a01b031688868686818110610c8857fe5b905060200201356040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610ce557600080fd5b505af1158015610cf9573d6000803e3d6000fd5b505060019092019150610c469050565b505050505050565b6004546000906001600160a01b03163314610d61576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600034905060008084516020860184885af1915081610dbb576040805162461bcd60e51b815260206004820152601160248201527019985a5b1959081d1bc8199bdc9dd85c99607a1b604482015290519081900360640190fd5b5092915050565b6004546001600160a01b03163314610e0f576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b50505050610e8081611cbd565b60008181526001602052604090208054600160401b90046001600160401b031615610eb857805467ffffffffffffffff60401b191681555b60028101546001600160401b031615610edf5760028101805467ffffffffffffffff191690555b60095460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d6020811015610f5557600080fd5b50511115610fc45760095460408051634848b1a560e01b81526004810185905260006024820181905291516001600160a01b0390931692634848b1a59260448084019391929182900301818387803b158015610fb057600080fd5b505af1158015610d09573d6000803e3d6000fd5b5050565b6004546001600160a01b03163314611015576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b6000858152600c602090815260408083206001600160401b03881684529091529020805460ff191660ff851617815561105260018201848461436c565b508360ff16856001600160401b0316877f3553d84d9f5bc81eeb57eac4d5a1fee928d026da4f389c33c1cebfaf3931fda0868660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a4505050505050565b6004546001600160a01b03163314611117576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b5050506000838152602081905260409020805490915061119a90611cbd565b6111a2614309565b6111ab8461202d565b6000608082015290506111be8482612152565b60408051848152905185917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a250505050565b6004546001600160a01b03163314611247576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b611250836123a0565b611296576040805162461bcd60e51b8152602060048201526012602482015271726f6f6d206973206e6f742061637469766560701b604482015290519081900360640190fd5b600954604080516369f648a160e01b81526004810186905290516000926001600160a01b0316916369f648a1916024808301926020929190829003018186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d602081101561130c57600080fd5b505160065460408051630607176160e31b81526004810189905290519293506000926001600160a01b0390921691633038bb0891602480820192602092909190829003018186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d602081101561138a57600080fd5b505190508181146113ce576040805162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b604482015290519081900360640190fd5b60005b6008811015611496576007546001600160a01b031663fe99049a846000600185018886600881106113fe57fe5b60200201356040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b15801561147257600080fd5b505af1158015611486573d6000803e3d6000fd5b5050600190920191506113d19050565b5060095460408051634848b1a560e01b8152600481018890526024810187905290516001600160a01b0390921691634848b1a59160448082019260009290919082900301818387803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b50505050505050505050565b6004546001600160a01b03163314611558576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b505050600084815260208190526040902080549091506115db81611cbd565b6115e3614309565b6115ec8661202d565b905060008460010b826080015161ffff16019050816060015161ffff1660070b8160070b131561162557606082015161ffff1660808301525b60008160070b136116725760408051878152905188917fd02b8bdc1eb9eb4a85fe2b27c68fbe1eec04f697f660cc4cf3bb2cee4456f490919081900360200190a26000608083015261167d565b61ffff811660808301525b6116878783612152565b6001840154600360ff9091166002011660006116a4898684612430565b8654604080516000815260ff86166020820152815193945084938d927f3042d0c278ec3b2d8bf290d27da7bb56226996146c187fc01f6f448b6283da72928290030190a46116f181611cbd565b85546000908152600160208190526040808320805467ffffffffffffffff60801b19808216600160801b928390046001600160401b03908116600019018116840291909117909355868652929094208054928316928590048216840190911690930217909155908655909401805460ff191660ff90951694909417909355505050505050565b6004546001600160a01b031633146117c4576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b60005b60088160ff1610156118d05760008160010160ff1690506000838360ff16600881106117ef57fe5b602002013561ffff1661ffff16905060008111156118c6576007546040805163a41dab8160e01b81526001600160a01b03888116600483015260248201869052604482018590529151919092169163a41dab8191606480830192600092919082900301818387803b15801561186357600080fd5b505af1158015611877573d6000803e3d6000fd5b50505050846001600160a01b0316867f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb8484604051808381526020018281526020019250505060405180910390a35b50506001016117c7565b50505050565b6004546001600160a01b03163314611923576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b600560009054906101000a90046001600160a01b03166001600160a01b03166342dad49e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050600083815260208190526040902080549091506119a681611cbd565b60408051600181526004602082015281518592849288927f3042d0c278ec3b2d8bf290d27da7bb56226996146c187fc01f6f448b6283da72929181900390910190a460006119f3846126b7565b50925050508060070b8360010160019054906101000a900460070b60070b1215611a3f5760018301805468ffffffffffffffff0019166101006001600160401b03600785900b16021790555b611a4b858560046126d2565b5050505050565b6004546001600160a01b03163314611a9f576040805162461bcd60e51b81526020600482015260146024820152600080516020614434833981519152604482015290519081900360640190fd5b6000611aaa84612b6f565b905060005b60088160ff161015611a4b576000838260ff1660088110611acc57fe5b602002013561ffff1661ffff161115611b79576007546001600160a01b03166311aa10fb8386600185018760ff871660088110611b0557fe5b602002013561ffff166040518563ffffffff1660e01b8152600401808581526020018481526020018360ff1681526020018261ffff168152602001945050505050600060405180830381600087803b158015611b6057600080fd5b505af1158015611b74573d6000803e3d6000fd5b505050505b600101611aaf565b6000611b8b61237c565b80549091506001600160a01b03163314611bd65760405162461bcd60e51b815260040180806020018281038252602c815260200180614408602c913960400191505060405180910390fd5b600680546001600160a01b03199081166001600160a01b038881169190911790925560078054821687841617905560088054821686841617905560098054909116918416919091179055600160ff1b60005260016020527fe209ec102481142efb7be62c549d278b9d65c9410e465059ec2d8758d3fc5cf58054600160d01b900460ff1615611cac576040805162461bcd60e51b815260206004820152601760248201527f64756e67656f6e20616c72656164792073746172746564000000000000000000604482015290519081900360640190fd5b610d09600160ff1b60006004612b78565b600081815260016020526040902080546001600160401b0316611d1e576040805162461bcd60e51b81526020600482015260146024820152731c9bdbdb481b9bdd0818dc99585d1959081e595d60621b604482015290519081900360640190fd5b8054600160d01b900460ff1661201957600554815460408051634a83e9cd60e11b81526001600160401b039092166004830152516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b158015611d8457600080fd5b505afa158015611d98573d6000803e3d6000fd5b505050506040513d6020811015611dae57600080fd5b5051905080611dbe57505061202a565b611dc88382612ec9565b815460009081908190611e06908790869060ff600160c01b8204811691600160d81b8104821691600160e01b8204811691600160e81b900416612fb9565b875460ff808416600160d01b0260ff60d01b19918616600160c81b0260ff60c81b199093169290921716178855919450925090506000611e4587612fea565b600081815260026020526040902080549192509060ff8481166101009092041614611e7d57805461ff00191661010060ff8516021781555b6040805187815260ff8088166020830152861681830152905189917f8850140926f0260fe1b422b7a0d93e7d5734e521eae9ac8969ed512cc3834515919081900360600190a2600082815260026020526040902054600188015460ff909116901561201157611eea614309565b611ef7896001015461202d565b9050600080611f0b8c8b8560000151613082565b9150915060058460ff1611611f955760075460018c0154604080516302acc94b60e01b8152600481019290925260ff8716602483015260448201849052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015611f7c57600080fd5b505af1158015611f90573d6000803e3d6000fd5b505050505b60075460018c0154604080516302acc94b60e01b815260048101929092526006602483015260448201859052516001600160a01b03909216916302acc94b9160648082019260009290919082900301818387803b158015611ff557600080fd5b505af1158015612009573d6000803e3d6000fd5b505050505050505b505050505050505b610fc461202583612fea565b61317e565b50565b612035614309565b60065460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d60208110156120ab57600080fd5b505190506000808080806120be866132ee565b6040805160a08101825260ff909216825261ffff958616602083015263ffffffff9092169181019190915290831660608201529116608082015296505050505050505b919050565b600080828561ffff160190508361ffff1660070b8160070b131561212d578391505061214b565b60008160070b1361214257600091505061214b565b905061214b565b505b9392505050565b600060a8826080015161ffff16901b60b8836060015161ffff16901b60c8846040015163ffffffff16901b60e8856020015161ffff16901b60f8866000015160ff16901b010101019050600660009054906101000a90046001600160a01b03166001600160a01b0316634848b1a584836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b50505050505050565b612224614337565b60085460408051630178fe3f60e01b81526004810185905290516000926001600160a01b031691630178fe3f916024808301926020929190829003018186803b15801561227057600080fd5b505afa158015612284573d6000803e3d6000fd5b505050506040513d602081101561229a57600080fd5b50519050600080808080806122ae8761331f565b6040805160c08101825261ffff978816815260ff968716602082015294909516948401949094529084166060830152909216608083015263ffffffff1660a08201529998505050505050505050565b6000612325826000015183602001518460400151856060015186608001518760a00151613353565b60085460408051634848b1a560e01b8152600481018790526024810184905290519293506001600160a01b0390911691634848b1a59160448082019260009290919082900301818387803b1580156121ff57600080fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600954604080516331a9108f60e11b815260048101849052905160009283926001600160a01b0390911691636352211e91602480820192602092909190829003018186803b1580156123f157600080fd5b505afa158015612405573d6000803e3d6000fd5b505050506040513d602081101561241b57600080fd5b50516001600160a01b03163014915050919050565b60008060008061243f866126b7565b509194509250905060ff851661245b57600019909101906124e5565b600160ff86161415612472576001909201916124e5565b600260ff86161415612489576001909101906124e5565b600360ff861614156124a157600019909201916124e5565b6040805162461bcd60e51b815260206004820152601460248201527334b6b837b9b9b4b13632903234b932b1ba34b7b760611b604482015290519081900360640190fd5b60006124f28484846133a7565b600088815260016020526040808220838352912081548154939450919290916001600160401b03908116911660ff8a16600290810a906003818d0116900a8284108061254557506001600160401b038316155b156125a557855460ff808416600160c81b90920484161614156125a057855460ff808416918491601091600160c81b9004165b041660ff16141561258e5761258e8e8e896133d0565b869a505050505050505050505061214b565b612675565b826001600160401b0316846001600160401b031611156125f157845460ff808316600160c81b90920483161614156125a057845460ff808316918391601091600160c81b900416612578565b855460ff808416600160c81b909204841616148061261e5750845460ff808316600160c81b909204831616145b1561267557868d111561265b57845460ff808316918391601091600160c81b900416041660ff161415612656576126568e8e896133d0565b61258e565b855460ff808416918491601091600160c81b900416612578565b6040805162461bcd60e51b815260206004820152601260248201527163616e74206d6f766520746869732077617960701b604482015290519081900360640190fd5b90600160401b820490600160801b830490600160ff1b840490565b6000838152602081815260408083208054845260019092528083208584529083208054929391929091906001600160401b031661271957612714868887612b78565b6129f5565b8154600160401b90046001600160401b031615801561274757508154600160801b90046001600160401b0316155b801561276057506002808301546001600160401b031614155b80156127e1575060095460408051630178fe3f60e01b81526004810189905290516001600160a01b0390921691630178fe3f91602480820192602092909190829003018186803b1580156127b357600080fd5b505afa1580156127c7573d6000803e3d6000fd5b505050506040513d60208110156127dd57600080fd5b5051155b1561288257506005546040805163338cdca160e01b8152905143926001600160a01b03169163338cdca191600480830192600092919082900301818387803b15801561282c57600080fd5b505af1158015612840573d6000803e3d6000fd5b50508354600160401b90046001600160401b031615159150612882905057815467ffffffffffffffff60401b1916600160401b6001600160401b038316021782555b61288b86611cbd565b60006128968761354e565b90506001600160a01b03811615801590612930575060065460408051630607176160e31b8152600481018b905290516001600160a01b0390921691633038bb0891602480820192602092909190829003018186803b1580156128f757600080fd5b505afa15801561290b573d6000803e3d6000fd5b505050506040513d602081101561292157600080fd5b50516001600160a01b03821614155b156129f3576007546040805163a41dab8160e01b81526001600160a01b03848116600483015260086024830152600160448301529151919092169163a41dab8191606480830192600092919082900301818387803b15801561299157600080fd5b505af11580156129a5573d6000803e3d6000fd5b505060408051600881526001602082015281516001600160a01b03861694508b93507f41d17e4a29add7df9dab104b7b914e73209c448b1fd78b8ca04efc5e24df1abb929181900390910190a35b505b6000612a0087612fea565b600081815260026020819052604090912090810154919250906001600160401b0316158015612a30575060034306155b15612b07576001600160401b038316612aaf57439250600560009054906101000a90046001600160a01b03166001600160a01b031663338cdca16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a9657600080fd5b505af1158015612aaa573d6000803e3d6000fd5b505050505b6002810180546001600160401b03851667ffffffffffffffff199091168117909155604080519182525183917f644c4d4ff52c1efcb89d373879c1d7e01d3f8b7e60cc19f9bdf5da38cd90c14d919081900360200190a25b84546000196001600160401b03600160801b8084048216929092018116820267ffffffffffffffff60801b19938416178855865482810482166001908101909216909202919092161785558887558601805460ff891660ff19909116179055610af4896135e5565b600360fe1b0190565b600060026000612b8786612fea565b81526020019081526020016000209050600081600101541115612bd557612bb18160010154611cbd565b80546201000060ff63010000008304160262ff000019909116178155600060018201555b6007546001600160a01b031663c9b902e3846008612bf288613629565b6040518463ffffffff1660e01b8152600401808481526020018360ff1681526020018281526020019350505050600060405180830381600087803b158015612c3957600080fd5b505af1158015612c4d573d6000803e3d6000fd5b5050506000858152600160208190526040808320805467ffffffffffffffff1916436001600160401b031690811767ffffffffffffffff60401b1916600160401b919091021760ff60c01b1916600160c01b60ff8981169190910291909117808355875460ff60d81b199091166101009091048216600160d81b02178255865463ff00000019811663010000009182900483168087018416909202178855825460ff60e81b1916600160e81b90910217808355875460ff60e01b1990911662010000909104909116600160e01b02178155808301889055918501889055600554815163338cdca160e01b815291519294506001600160a01b03169263338cdca19260048084019382900301818387803b158015612d6957600080fd5b505af1158015612d7d573d6000803e3d6000fd5b505060065460408051630607176160e31b8152600481018990529051600094506001600160a01b039092169250633038bb08916024808301926020929190829003018186803b158015612dcf57600080fd5b505afa158015612de3573d6000803e3d6000fd5b505050506040513d6020811015612df957600080fd5b50519050612e068161365d565b600954604080516319846a3560e21b8152600481018990526024810184905290516001600160a01b0390921691636611a8d49160448082019260009290919082900301818387803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b5050835460408051436001600160401b03168152600160c01b90920460ff16602083015280518a94507fa97399cd19a5b00b49b7d10d188180e100139a0501c9c9b4fe21dab5b915162f9350918290030190a2505050505050565b6000612ed483612fea565b60008181526002602052604090205490915060ff16806118d057600354600160401b90046001600160401b0316612f0c83858361374a565b6000848152600260205260409020805460ff191660ff8316908117909155909250600614611a4b57600354620143704204906001600160401b03808316911614612f875760038054600160401b67ffffffffffffffff199091166001600160401b0384161767ffffffffffffffff60401b1916179055610d09565b600380546001600160401b036001850116600160401b0267ffffffffffffffff60401b19909116179055505050505050565b6000806000612fc989898961382b565b9250612fd88989888888613bf0565b939a9099509297509195505050505050565b600080600080612ff9856126b7565b509250925092506000808460070b1261301c575060096004840160070b05613036565b60098460000360040160070b8161302f57fe5b0560000390505b6000808460070b12613052575060096004840160070b0561306c565b60098460000360040160070b8161306557fe5b0560000390505b6130778282856133a7565b979650505050505050565b6000806000613092866000613f1d565b905060198104806130a1575060015b6040805160208082018a9052818301899052601960fa1b606083015282516041818403018152606190920190925280519101208190816130dd57fe5b0660028204019250826130ef57600192505b600260ff861614156131045760048304830192505b6008811115613111575060085b6040805160208082018a9052818301899052606560f81b6060830152825160418184030181526061909201909252805191012081908161314d57fe5b06600282040193508361315f57600193505b600160ff861614156131745760048404840193505b5050935093915050565b6000818152600260208190526040909120908101546001600160401b031680156132e95760055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b1580156131f657600080fd5b505afa15801561320a573d6000803e3d6000fd5b505050506040513d602081101561322057600080fd5b50519050806132315750505061202a565b60008061323e8684613fbb565b91509150600061324d83614040565b600084815260016020526040902060028082015492935090916001600160401b03161480159061328c57508054600160801b90046001600160401b0316155b8015613296575081155b80156132ac57508054600160d01b900460ff1615155b156132d05760028101805467ffffffffffffffff19166001600160401b0385161790555b50505060028401805467ffffffffffffffff1916905550505b505050565b61ffff60e882901c81169260a883901c82169260b881901c9092169163ffffffff60c882901c169160f89190911c90565b61ffff60e882901c81169260ff60e084901c169260f881901c9260d082901c81169260c083901c9091169163ffffffff1690565b6001600160f81b031960f885901b1661ffff60e81b60e888901b160160ff60e01b60e087901b160161ffff60d01b60d085901b160161ffff60c01b60c084901b160163ffffffff8216019695505050505050565b600160ff1b6001600160401b03938416928416600160401b0291909316600160801b0201010190565b81818111156133dd575081905b6133e8848284614144565b6118d0576007805460408051635986e3e560e11b8152600481018890526024810193909352516000926001600160a01b039092169163b30dc7ca916044808301926020929190829003018186803b15801561344257600080fd5b505afa158015613456573d6000803e3d6000fd5b505050506040513d602081101561346c57600080fd5b5051116134a9576040805162461bcd60e51b81526020600482015260066024820152656e6f206b657960d01b604482015290519081900360640190fd5b600780546040805163c9b902e360e01b815260048101889052602481019390935260016044840152516001600160a01b039091169163c9b902e391606480830192600092919082900301818387803b15801561350457600080fd5b505af1158015613518573d6000803e3d6000fd5b5050506000858152600b6020908152604080832085845282528083208684529091529020805460ff191660011790555050505050565b6000613559826123a0565b156135dd57600954604080516369f648a160e01b81526004810185905290516001600160a01b03909216916369f648a191602480820192602092909190829003018186803b1580156135aa57600080fd5b505afa1580156135be573d6000803e3d6000fd5b505050506040513d60208110156135d457600080fd5b50519050612101565b506000612101565b6135ed614309565b6135f68261202d565b9050806060015161ffff16816080015161ffff161015610fc45760808101805160010161ffff169052610fc48282612152565b6000600160ff1b82141561363f57506000612101565b600061364c836000613f1d565b905060198104600101915050612101565b80158015906136e157506009546040805163c9a59e4760e01b81526004810184905290516001600160a01b039092169163c9a59e4791602480820192602092909190829003018186803b1580156136b357600080fd5b505afa1580156136c7573d6000803e3d6000fd5b505050506040513d60208110156136dd57600080fd5b5051155b1561202a576001600160a01b0381166000818152600d6020908152604080832062069780420190819055815193845291830182905280519193927fc24affdb20f6529973515c5398461c1f6228edbfac531ab49e56a11433a86c9f929081900390910190a25050565b60006137558461416b565b8061376a5750600a6001600160401b03831610155b156137775750600661214b565b6000613782856141c1565b6009026001600160401b03169050600081111561379e57600319015b6019811061382057604080516020808201889052818301879052600360fa1b60608301528251604181840301815260619092019092528051910120606461271090910660ff16118015906138155760006137f7876126b7565b509250505060058160070b8161380957fe5b0760010193505061381a565b600692505b50612149565b506006949350505050565b600080600460ff841614156138425750600f613a2a565b604080516020808201889052818301879052600160f81b606083015282516041818403018152606190920190925280519101206064900660ff166057111561388d575060ff821660020a5b604080516020808201889052818301879052600160f91b606083015282516041818403018152606190920190925280519101206064900660ff1660281115613a2a57604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16601911156139545760ff831615806139245750600260ff8416145b1561393157600a1761394f565b600160ff841614806139465750600360ff8416145b1561394f576005175b613a2a565b604080516020808201889052818301879052600360f81b606083015282516041818403018152606190920190925280519101206064900660ff16603211156139e25760ff83166139a65760081761394f565b600160ff841614156139ba5760011761394f565b600260ff841614156139ce5760021761394f565b600360ff8416141561394f57600417613a2a565b60ff83166139f257600217613a2a565b600160ff84161415613a0657600417613a2a565b600260ff84161415613a1a57600817613a2a565b600360ff84161415613a2a576001175b604080516020808201889052818301879052606f60f81b60608301528251808303604101815260619092019092528051910120606490066000603c60ff831610613a8857605a60ff831610613a80576002613a83565b60015b613a8b565b60005b905060048160ff1610613aa3578260f0179250613be5565b8060ff1660031415613b1d576040805160208082018a9052818301899052600760fc1b606083015282518083036041018152606190920190925280519101206003166001810160070260ff811660151415613b03578460d0179450613b16565b8060ff16601c1415613b16578460b01794505b5050613be5565b8060ff1660021415613b97576040805160208082018a9052818301899052600760fc1b60608301528251808303604101815260619092019092528051910120600690066001810160030260ff8116600f1415613b7e57846050179450613b16565b8060ff1660121415613b16578460a01794505050613be5565b8060ff1660011415613be5576040805160208082018a9052818301899052600760fc1b6060830152825160418184030181526061909201909252805191012060031660020a60100292909217915b509095945050505050565b6000806000613bfe88612fea565b869250905084600080613c108b6126b7565b5050915091508160070b6000148015613c2c57508060070b6000145b15613c405760029550846001179450613f0f565b8660ff168360ff1611613f0f5760408051602080820187905260f886901b6001600160f81b03191682840152604182018d9052600360f81b6061830152825180830360420181526062909201909252805191012060149006600186811614801590613cb9575060ff81161580613cb957508360ff166050145b15613ccd5760029650856001179550613f03565b600280871614801590613d0c57508060ff1660011480613cf057508360ff166050145b80613d0c57508360ff16604f148015613d0c5750600180871614155b15613d205760039650856002179550613f03565b600480871614801590613da657508060ff1660021480613d4357508360ff166050145b80613d5f57508360ff16604f148015613d5f5750600180871614155b80613d7b57508360ff16604f148015613d7b5750600280871614155b80613da657508360ff16604e148015613d975750600180871614155b8015613da65750600280871614155b15613db8576004965094861794613f03565b600880871614801590613eea57508060ff1660031480613ddb57508360ff166050145b80613df757508360ff16604f148015613df75750600180871614155b80613e1357508360ff16604f148015613e135750600280871614155b80613e2f57508360ff16604f148015613e2f5750600480871614155b80613e5a57508360ff16604e148015613e4b5750600180871614155b8015613e5a5750600280871614155b80613e8557508360ff16604e148015613e765750600180871614155b8015613e855750600480871614155b80613eb057508360ff16604e148015613ea15750600480871614155b8015613eb05750600280871614155b80613eea57508360ff16604d148015613ecc5750600480871614155b8015613edb5750600280871614155b8015613eea5750600180871614155b15613efe5760059650856008179550613f03565b600196505b50600190920191613c40565b505050509550959350505050565b6000806000613f2b856126b7565b505091509150600080613f3d866126b7565b5091935091505081840360070b6000811215613f57576000035b81840360070b6000811215613f6a576000035b6001603f1b821315613f805781600160401b0391505b6001603f1b811315613f9357600160401b035b80821315613fa857509450613fb59350505050565b9550613fb5945050505050565b92915050565b604080516020808201859052818301849052603360f91b6060830152825180830360410181526061830184528051908201206081830186905260a18301859052606760f81b60c1840152835160a281850301815260c290930190935281519101206000918291614035918691600991829006919006614217565b946002945092505050565b600081815260016020526040812054600160401b90046001600160401b03168061406e576000915050612101565b60055460408051634a83e9cd60e11b81526001600160401b038416600482015290516000926001600160a01b031691639507d39a916024808301926020929190829003018186803b1580156140c257600080fd5b505afa1580156140d6573d6000803e3d6000fd5b505050506040513d60208110156140ec57600080fd5b505190508061410057600092505050612101565b6000848152600160208190526040909120546001600160401b03808216908516149161413b91879185918590600160d01b900460ff1661424e565b95945050505050565b6000928352600b602090815260408085209385529281528284209184525290205460ff1690565b6000806000614179846126b7565b5050915091506000198260070b1215801561419957506000198160070b12155b80156141a9575060018260070b13155b80156141b9575060018160070b13155b949350505050565b60008060006141cf846126b7565b50509150915060008260070b12156141e8578160000391505b60008160070b12156141f8576000035b8060070b8260070b131561420e57509050612101565b91506121019050565b600080600080614226876126b7565b509250925092506130778660ff1660048560090203018660ff166004856009020301836133a7565b600060ff82166001146142635750600061413b565b600f831561426f57600a015b6040805160208082018a9052818301899052600360f91b6060830152825180830360410181526061909201909252805191012060ff821660649091061080156142fb576040805160208082018b90528183018a9052600760f81b606083015282516041818403018152606190920190925280519101208690816142ee57fe5b066001019250505061413b565b506000979650505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106143ad5782800160ff198235161785556143da565b828001600101855582156143da579182015b828111156143da5782358255916020019190600101906143bf565b506143e69291506143ea565b5090565b61440491905b808211156143e657600081556001016143f0565b9056fe4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d207468697320616374696f6e4e4f545f415554484f52495a45445f41444d494e000000000000000000000000a26469706673582212207c0d69b2f0a3d4572084c4949989b8e9ae0446763cc884e3704ae70faae0f9e264736f6c63430006050033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2873,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_characters",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Character)2856_storage)"
      },
      {
        "astId": 2877,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_rooms",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Room)2839_storage)"
      },
      {
        "astId": 2881,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_areas",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Area)2869_storage)"
      },
      {
        "astId": 2888,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_areaCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AreaCounter)2886_storage"
      },
      {
        "astId": 2890,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_adminContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2892,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_blockHashRegister",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(BlockHashRegister)13132"
      },
      {
        "astId": 2894,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_charactersContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Characters)469"
      },
      {
        "astId": 2896,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_elementsContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(Elements)12815"
      },
      {
        "astId": 2898,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_gearsContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(Gears)12834"
      },
      {
        "astId": 2900,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_roomsContract",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(Rooms)12901"
      },
      {
        "astId": 2902,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_playerContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(Player)10683"
      },
      {
        "astId": 2910,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_unlockedExits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))"
      },
      {
        "astId": 2921,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_quests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint64,t_struct(Quest)2915_storage))"
      },
      {
        "astId": 2925,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_taxDueDate",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2929,
        "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
        "label": "_customRoomNames",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BlockHashRegister)13132": {
        "encoding": "inplace",
        "label": "contract BlockHashRegister",
        "numberOfBytes": "20"
      },
      "t_contract(Characters)469": {
        "encoding": "inplace",
        "label": "contract Characters",
        "numberOfBytes": "20"
      },
      "t_contract(Elements)12815": {
        "encoding": "inplace",
        "label": "contract Elements",
        "numberOfBytes": "20"
      },
      "t_contract(Gears)12834": {
        "encoding": "inplace",
        "label": "contract Gears",
        "numberOfBytes": "20"
      },
      "t_contract(Player)10683": {
        "encoding": "inplace",
        "label": "contract Player",
        "numberOfBytes": "20"
      },
      "t_contract(Rooms)12901": {
        "encoding": "inplace",
        "label": "contract Rooms",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint64,t_struct(Quest)2915_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint64 => struct DungeonDataLayout.Quest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_struct(Quest)2915_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Area)2869_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Area)",
        "numberOfBytes": "32",
        "value": "t_struct(Area)2869_storage"
      },
      "t_mapping(t_uint256,t_struct(Character)2856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)2856_storage"
      },
      "t_mapping(t_uint256,t_struct(Room)2839_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DungeonDataLayout.Room)",
        "numberOfBytes": "32",
        "value": "t_struct(Room)2839_storage"
      },
      "t_mapping(t_uint64,t_struct(Quest)2915_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct DungeonDataLayout.Quest)",
        "numberOfBytes": "32",
        "value": "t_struct(Quest)2915_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Area)2869_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Area",
        "members": [
          {
            "astId": 2858,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "areaType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2860,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "discovered",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2862,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "lastRoomIndex",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2864,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "currentIndex",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2866,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "lastRoom",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "eventBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AreaCounter)2886_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.AreaCounter",
        "members": [
          {
            "astId": 2883,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2885,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "numAreas",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Character)2856_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Character",
        "members": [
          {
            "astId": 2841,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "location",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2843,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "direction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 2845,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "floors",
            "offset": 1,
            "slot": "1",
            "type": "t_int64"
          },
          {
            "astId": 2847,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "slot_1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2849,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "slot_2",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2851,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "slot_3",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2853,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "slot_4",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2855,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "slot_5",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Quest)2915_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Quest",
        "members": [
          {
            "astId": 2912,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2914,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Room)2839_storage": {
        "encoding": "inplace",
        "label": "struct DungeonDataLayout.Room",
        "members": [
          {
            "astId": 2818,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2820,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "monsterBlockNumber",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2822,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "numActiveCharacters",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2824,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "direction",
            "offset": 24,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2826,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "exits",
            "offset": 25,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2828,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "kind",
            "offset": 26,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2830,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "areaAtDiscovery",
            "offset": 27,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2832,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "lastRoomIndex",
            "offset": 28,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2834,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "index",
            "offset": 29,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2836,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "discoverer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2838,
            "contract": "src/dungeon/DungeonAdminFacet.sol:DungeonAdminFacet",
            "label": "randomEvent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}